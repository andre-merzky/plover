
cpi_5 shows how all layers work together - but it has
two significant shortcomings:

  - tasks and async calls are interwined with the engine, but
    should in fact be just another package / adaptor 
  
  - related: the task mode info are stored in the call context
    (more exactly in the functor, as arg), which cannot be
    modified by the task adaptor anymore.

We need to actually split the call_context into call_context,
op_context, and task_context, like:

  task t = get_size <async> ();

 The (async get_size) call is Done when a valid task object returned
 (call_context).

 The op is done when the task has the resulting size stored
 (op_context) --> maps to task state / context.  

 An op thus represents some adaptor operation.  But, a task
 state might be comprised of multiple op states (same for
 sync calls btw) - thus the split again...

cpi_6 is doing prepares that splitup, by restructuring the code.
cpi_7 will then re-sort the context and call states.



