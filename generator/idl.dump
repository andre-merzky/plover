$VAR1 = {
          'saga.rpc' => {
                          'parameter' => {
                                           'base' => [
                                                       'saga::buffer'
                                                     ],
                                           'comm' => '',
                                           'def' => {
                                                      'get_io_mode' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'get_io_mode',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'mode',
                                                                                         'default' => undef,
                                                                                         'type' => 'io_mode'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - get_io_mode
      Purpose:  retrieve the current value for io mode
      Format:   get_io_mode          (out io_mode mode);
      Inputs:   -
      InOuts:   -
      Outputs:  mode:                 value of io mode
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   -
      Notes:    -
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 3
                                                                       },
                                                      'set_io_mode' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'set_io_mode',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'mode',
                                                                                         'default' => undef,
                                                                                         'type' => 'io_mode'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - set_io_mode
      Purpose:  set io_mode
      Format:   set_io_mode          (in  io_mode mode);
      Inputs:   mode:                 value for io mode
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   -
      Notes:    - 
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 2
                                                                       },
                                                      'DESTRUCTOR' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'DESTRUCTOR',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'obj',
                                                                                        'default' => undef,
                                                                                        'type' => 'parameter'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - DESTRUCTOR
      Purpose:  destroy an parameter instance
      Format:   DESTRUCTOR           (in  parameter obj);
      Inputs:   obj:                  the parameter to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   - 
      Notes:    - all notes from the buffer DESTRUCTOR apply.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 1
                                                                      },
                                                      'CONSTRUCTOR' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'CONSTRUCTOR',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'data',
                                                                                         'default' => '""',
                                                                                         'type' => 'array<byte>'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'size',
                                                                                         'default' => '-1',
                                                                                         'type' => 'int'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'mode',
                                                                                         'default' => 'In',
                                                                                         'type' => 'io_mode'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'obj',
                                                                                         'default' => undef,
                                                                                         'type' => 'parameter'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - CONSTRUCTOR
      Purpose:  create an parameter instance
      Format:   CONSTRUCTOR          (in  array<byte> data = "",
                                      in  int         size = -1,
                                      in  io_mode     mode = In,
                                      out parameter       obj);
      Inputs:   type:                 data to be used
                size:                 size of data to be used
                io_mode:              type of parameter
      InOuts:   -
      Outputs:  parameter:            the newly created parameter 
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   NotImplemented
                BadParameter
                NoSuccess
      Notes:    - all notes from the buffer CONSTRUCTOR apply.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 0
                                                                       }
                                                    },
                                           'name' => 'parameter',
                                           'idx' => 1,
                                           'type' => 'class'
                                         },
                          'rpc' => {
                                     'comm' => '',
                                     'def' => {
                                                'close' => {
                                                             'params' => [
                                                                           {
                                                                             'mode' => 'in',
                                                                             'name' => 'timeout',
                                                                             'default' => '0.0',
                                                                             'type' => 'float'
                                                                           }
                                                                         ],
                                                             'comm' => 'handle management',
                                                             'temp' => '',
                                                             'is_void' => 0,
                                                             'name' => 'close',
                                                             'idx' => 3
                                                           },
                                                'DESTRUCTOR' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'DESTRUCTOR',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'obj',
                                                                                  'default' => undef,
                                                                                  'type' => 'rpc'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR           (in  rpc  obj)
      Inputs:   obj:                  the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  - 
      PostCond: - the instance is closed.
      Perms:    -
      Throws:   - 
      Notes:    - if the instance was not closed before, the 
                  destructor performs a close() on the instance,
                  and all notes to close() apply.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 1
                                                                },
                                                'call' => {
                                                            'comm' => 'rpc method invocation',
                                                            'precom' => '',
                                                            'name' => 'call',
                                                            'params' => [
                                                                          {
                                                                            'mode' => 'inout',
                                                                            'name' => 'parameters',
                                                                            'default' => undef,
                                                                            'type' => 'array<parameter>'
                                                                          }
                                                                        ],
                                                            'detail' => '    - call
      Purpose:  call the remote procedure
      Format:   call         (inout array<parameter> param);
      Inputs:   - 
      In/Out:   param:        argument/result values for call
      InOuts:   -
      Outputs:  - 
      PreCond:  - the instance is open.
      PostCond: - the instance is available for another call()
                  invocation, even if the present call did not
                  yet finish, in the asynchronous case.
      Perms:    Exec
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - according to the GridRPC specification, the 
                  RPC server might not be contacted before
                  invoking call(). For this reason, all notes to
                  the object constructor apply to the call()
                  method as well.
                - if an implementation finds inconsistent
                  information in the parameter vector, a 
                  \'BadParameter\' exception is thrown.
                - arbitrary backend failures (e.g. semantic
                  failures in the provided parameter stack, or
                  any errors occurring during the execution of
                  the remote procedure) MUST be mapped to a
                  \'NoSuccess\' exception, with a descriptive
                  error message.  That way, error semantics of
                  the SAGA implementation and of the RPC
                  function implementation are strictly
                  distinguished.
                - the notes about memory management from the
                  buffer class apply.
',
                                                            'temp' => '',
                                                            'is_void' => 0,
                                                            'idx' => 2
                                                          },
                                                'CONSTRUCTOR' => {
                                                                   'comm' => '',
                                                                   'precom' => '',
                                                                   'name' => 'CONSTRUCTOR',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 's',
                                                                                   'default' => undef,
                                                                                   'type' => 'session'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'url',
                                                                                   'default' => '""',
                                                                                   'type' => 'saga::url'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'obj',
                                                                                   'default' => undef,
                                                                                   'type' => 'rpc'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - CONSTRUCTOR
      Purpose:  initializes a remote function handle
      Format:   CONSTRUCTOR  (in  session   s, 
                              in  saga::url url = "", 
                              out rpc       obj);
      Inputs:   s:            saga session to use
                url:          remote method to
                              initialize
      InOuts:   -
      Outputs:  obj           the newly created object
      PreCond:  -
      PostCond: - the instance is open.
      Perms:    Query
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if url is not given, or is empty (the 
                  default), the implementation will choose an 
                  appropriate default value.
                - according to the GridRPC specification, the 
                  constructor may or may not contact the RPC
                  server; absence of an exception does not imply
                  that following RPC calls will succeed, or that
                  a remote function handle is in fact available.
                - the following mapping MUST be applied from
                  GridRPC errors to SAGA exceptions:
                  GRPC_SERVER_NOT_FOUND   : BadParameter
                  GRPC_FUNCTION_NOT_FOUND : DoesNotExist
                  GRPC_RPC_REFUSED        : AuthorizationFailed
                  GRPC_OTHER_ERROR_CODE   : NoSuccess
                - non-GridRPC based implementations SHOULD ensure
                  upon object construction that the remote handle
                  is available, for consistency with the
                  semantics on other SAGA object constructors.
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 0
                                                                 }
                                              },
                                     'impl' => [
                                                 'saga::object',
                                                 'saga::async',
                                                 'saga::permissions'
                                               ],
                                     'name' => 'rpc',
                                     'idx' => 2,
                                     'type' => 'class'
                                   },
                          'io_mode' => {
                                         'comm' => '',
                                         'def' => {
                                                    '2,' => {
                                                              'comm' => 'output parameter',
                                                              'name' => 'Out'
                                                            },
                                                    '3' => {
                                                             'comm' => 'input and output parameter',
                                                             'name' => 'InOut'
                                                           },
                                                    '1,' => {
                                                              'comm' => 'input  parameter',
                                                              'name' => 'In'
                                                            }
                                                  },
                                         'name' => 'io_mode',
                                         'idx' => 0,
                                         'type' => 'enum'
                                       }
                        },
          'saga.object' => {
                             'object' => {
                                           'comm' => '',
                                           'def' => {
                                                      'get_session' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'get_session',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 's',
                                                                                         'default' => undef,
                                                                                         'type' => 'session'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - get_session
      Purpose:  query the objects session
      Format:   get_session          (out session s);
      Inputs:   -
      InOuts:   -
      Outputs:  s:                    session of the object
      PreCond:  - the object was created in a session, either
                  explicitly or implicitly.
      PostCond: - the returned session is shallow copied.
      Perms:    -
      Throws:   DoesNotExist
      Notes:    - if no specific session was attached to the
                  object at creation time, the default SAGA
                  session is returned.
                - some objects do not have sessions attached,
                  such as job_description, task, metric, and the
                  session object itself.  For such objects, the
                  method raises a \'DoesNotExist\' exception.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 2
                                                                       },
                                                      'clone' => {
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'clone',
                                                                                   'default' => undef,
                                                                                   'type' => 'object'
                                                                                 }
                                                                               ],
                                                                   'comm' => 'deep copy',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'name' => 'clone',
                                                                   'idx' => 3
                                                                 },
                                                      'get_id' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'get_id',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'id',
                                                                                    'default' => undef,
                                                                                    'type' => 'string'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - get_id
      Purpose:  query the object ID
      Format:   get_id               (out string id);
      Inputs:   -
      InOuts:   -
      Outputs:  id:                   uuid for the object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - 
',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'idx' => 0
                                                                  },
                                                      'get_type' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'get_type',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'type',
                                                                                      'default' => undef,
                                                                                      'type' => 'object_type'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - get_type
      Purpose:  query the object type
      Format:   get_type             (out object_type type);
      Inputs:   -
      InOuts:   -
      Outputs:  type:                 type of the object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - 
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 1
                                                                    }
                                                    },
                                           'impl' => [
                                                       'saga::error-handler'
                                                     ],
                                           'name' => 'object',
                                           'idx' => 1,
                                           'type' => 'interface'
                                         },
                             'object_type' => {
                                                'comm' => '',
                                                'def' => {
                                                           '2,' => {
                                                                     'comm' => '',
                                                                     'name' => 'Buffer'
                                                                   },
                                                           '21,' => {
                                                                      'comm' => '',
                                                                      'name' => 'Parameter'
                                                                    },
                                                           '15,' => {
                                                                      'comm' => '',
                                                                      'name' => 'JobDescription'
                                                                    },
                                                           '4,' => {
                                                                     'comm' => '',
                                                                     'name' => 'Context'
                                                                   },
                                                           '5,' => {
                                                                     'comm' => '',
                                                                     'name' => 'Task'
                                                                   },
                                                           '12,' => {
                                                                      'comm' => '',
                                                                      'name' => 'Directory'
                                                                    },
                                                           '19,' => {
                                                                      'comm' => '',
                                                                      'name' => 'StreamService'
                                                                    },
                                                           '22,' => {
                                                                      'comm' => '',
                                                                      'name' => 'RPC'
                                                                    },
                                                           '16,' => {
                                                                      'comm' => '',
                                                                      'name' => 'JobService'
                                                                    },
                                                           '14,' => {
                                                                      'comm' => '',
                                                                      'name' => 'LogicalDirectory'
                                                                    },
                                                           '13,' => {
                                                                      'comm' => '',
                                                                      'name' => 'LogicalFile'
                                                                    },
                                                           '6,' => {
                                                                     'comm' => '',
                                                                     'name' => 'TaskContainer'
                                                                   },
                                                           '7,' => {
                                                                     'comm' => '',
                                                                     'name' => 'Metric'
                                                                   },
                                                           '17,' => {
                                                                      'comm' => '',
                                                                      'name' => 'Job'
                                                                    },
                                                           '3,' => {
                                                                     'comm' => '',
                                                                     'name' => 'Session'
                                                                   },
                                                           '9,' => {
                                                                     'comm' => '',
                                                                     'name' => 'NSDirectory'
                                                                   },
                                                           '11,' => {
                                                                      'comm' => '',
                                                                      'name' => 'File'
                                                                    },
                                                           '18,' => {
                                                                      'comm' => '',
                                                                      'name' => 'JobSelf'
                                                                    },
                                                           '8,' => {
                                                                     'comm' => '',
                                                                     'name' => 'NSEntry'
                                                                   },
                                                           '10,' => {
                                                                      'comm' => '',
                                                                      'name' => 'IOVec'
                                                                    },
                                                           '1,' => {
                                                                     'comm' => '',
                                                                     'name' => 'URL'
                                                                   },
                                                           '20,' => {
                                                                      'comm' => '',
                                                                      'name' => 'Stream'
                                                                    }
                                                         },
                                                'name' => 'object_type',
                                                'idx' => 0,
                                                'type' => 'enum'
                                              }
                           },
          'saga.namespace' => {
                                'ns_entry' => {
                                                'comm' => '',
                                                'def' => {
                                                           'remove' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'remove',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'flags',
                                                                                         'default' => 'None',
                                                                                         'type' => 'int'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - remove
      Purpose:  removes this entry, and closes it
      Format:   remove             (in  int  flags = None);
      Inputs:   target:             entry to be removed
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the original entry is closed and removed.
      Perms:    Query 
                Write 
                Exec  for parent directory.
                Write for parent directory.
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - a \'BadParameter\' exception is thrown if the 
                  entry is a non-empty directory and the 
                  \'Recursive\' flag is not set.
                - if the \'Recursive\' flag is defined, the target
                  is recursively removed if it is a directory;
                  otherwise this flag is ignored.
                - if the \'Dereference\' flag is specified, the
                  method applies to the link target of target.
                  The flag causes a \'BadParameter\' exception if
                  target is not a link.
                - a \'BadParameter\' exception is thrown if the 
                  entry is not a directory and the \'Recursive\' 
                  flag is set.
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - the default flags are \'None\' (0).
                - if the instance was not closed before, this
                  call performs a close() on the instance, and 
                  all notes to close() apply.
                - similar to \'rm\' as defined by POSIX.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 13
                                                                       },
                                                           'get_mtime' => {
                                                                            'comm' => '',
                                                                            'precom' => '',
                                                                            'name' => 'get_mtime',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'out',
                                                                                            'name' => 'time',
                                                                                            'default' => undef,
                                                                                            'type' => 'int'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - get_mtime
      Purpose:  returns the last modification time
      Format:   get_time           (out int time);
      Inputs:   -
      InOuts:   -
      Outputs:  time:               time of last modification
      PreCond:  -
      PostCond: -
      Perms:    Query
                Query for parent directory.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the returned number represents the time of
                  last modification in seconds since epoch
                  (01.01.1970)
                - similar to the \'st_mtimespec\' element of the
                  stat strucure used in the POSIX stat() call.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 9
                                                                          },
                                                           'move' => {
                                                                       'comm' => '',
                                                                       'precom' => '',
                                                                       'name' => 'move',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'target',
                                                                                       'default' => undef,
                                                                                       'type' => 'saga::url'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'flags',
                                                                                       'default' => 'None',
                                                                                       'type' => 'int'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - move
      Purpose:  rename source to target, or move source to
                target if target is a directory.
      Format:   move               (in  saga::url target,
                                    in  int       flags = None);
      Inputs:   target:             name to move to
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the entry exists at the target url.
                - no entry exists at the original url.
                - the object instance is not closed.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if target gets
                  created.
      Perms:    Query 
                Write 
                Exec  for parent directory.
                Write for parent directory.
                Query for target.
                Exec  for target\'s parent directory.
                Write for target
                      if  target does exist.
                Write for target\'s parent directory 
                      if  target does not exist.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                AlreadyExists
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the target is a directory, the source entry
                  is moved into that directory.
                - a \'BadParameter\' exception is thrown if the 
                  source is a directory and the \'Recursive\' flag 
                  is not set.
                - a \'BadParameter\' exception is thrown if the 
                  source is not a directory and the \'Recursive\' 
                  flag is set.
                - if the target lies in a non-existing part of
                  the name space, a \'DoesNotExist\' exception is
                  thrown, unless the \'CreateParents\' flag is
                  given - then that part of the name space MUST
                  be created.
                - if the target already exists, it will be
                  overwritten if the \'Overwrite\' flag is set,
                  otherwise it is an \'AlreadyExists\' exception.
                - if the instance points at an symbolic link, 
                  the source is not dereferenced before moving,
                  unless the \'Dereference\' flag is given.
                  If derefencing is impossible (e.g. on a broken 
                  link), an \'IncorrectState\' exception is thrown.
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - the default flags are \'None\' (0).
                - similar to \'mv\' as defined by POSIX.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 12
                                                                     },
                                                           'is_link' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'is_link',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'test',
                                                                                          'default' => undef,
                                                                                          'type' => 'boolean'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - is_link
      Purpose:  tests the entry for being a link
      Format:   is_link            (out boolean test);
      Inputs:   -
      InOuts:   -
      Outputs:  test:               boolean indicating if
                                    entry is a link
      PreCond:  -
      PostCond: -
      Perms:    Query
                Query for parent directory.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns true if the entry is a link, false
                  otherwise
                - similar to libc\'s \'readlink\' as defined by
                  POSIX, but with only one level of redirection
                  resolved.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 7
                                                                        },
                                                           'is_dir' => {
                                                                         'comm' => 'navigation/query methods',
                                                                         'precom' => '',
                                                                         'name' => 'is_dir',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'test',
                                                                                         'default' => undef,
                                                                                         'type' => 'boolean'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - is_dir
      Purpose:  tests the entry for being a directory
      Format:   is_dir             (out boolean test);
      Inputs:   -
      InOuts:   -
      Outputs:  test:               boolean indicating if entry
                                    is a directory
      PreCond:  -
      PostCond: -
      Perms:    Query
                Query for parent directory.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns true if entry is a directory, false
                  otherwise
                - similar to \'test -d\' as defined by POSIX.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 5
                                                                       },
                                                           'copy' => {
                                                                       'comm' => 'management methods',
                                                                       'precom' => '    Methods for managing the name space entry:
    -------------------------------------------
',
                                                                       'name' => 'copy',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'target',
                                                                                       'default' => undef,
                                                                                       'type' => 'saga::url'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'flags',
                                                                                       'default' => 'None',
                                                                                       'type' => 'int'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - copy
      Purpose:  copy the entry to another part of the name space
      Format:   copy               (in  saga::url target,
                                    in  int       flags = None);
      Inputs:   target:             name to copy to
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - an identical copy exists at target.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if target gets
                  created.
      Perms:    Query 
                Exec  for parent directory.
                Query for target.
                Query for target\'s parent directory.
                Exec  for target\'s parent directory.
                Write for target
                      if  target does exist.
                Write for target\'s parent directory 
                      if  target does not exist.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                AlreadyExists
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the target is a directory, the source entry
                  is copied into that directory
                - a \'BadParameter\' exception is thrown if the 
                  source is a directory and the \'Recursive\' flag 
                  is not set.
                - a \'BadParameter\' exception is thrown if the 
                  source is not a directory and the \'Recursive\' 
                  flag is set.
                - if the target lies in a non-existing part of
                  the name space, a \'DoesNotExist\' exception is
                  thrown, unless the \'CreateParents\' flag is
                  given - then that part of the name space must
                  be created.
                - if the target already exists, it will be
                  overwritten if the \'Overwrite\' flag is set,
                  otherwise it is an \'AlreadyExists\' exception.
                - if a directory is to be copied recursively,
                  but the target exists and is not a directory,
                  and not a link to a directory, an
                  \'AlreadyExists\' exception is thrown even if
                  the \'Overwrite\' flag is set. 
                - if the instance points at an symbolic link, 
                  the source is deeply dereferenced before copy.
                  If derefencing is impossible (e.g. on a broken 
                  link), an \'IncorrectState\' exception is thrown.
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - the default flags are \'None\' (0).
                - similar to \'cp\' as defined by POSIX.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 10
                                                                     },
                                                           'close' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'close',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'timeout',
                                                                                        'default' => '0.0',
                                                                                        'type' => 'float'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - close
      Purpose:  closes the object
      Format:   close              (in  float timeout = 0.0);
      Inputs:   timeout             seconds to wait
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the entry instance is closed.
      Perms:    -
      Throws:   NotImplemented
                NoSuccess
      Notes:    - any subsequent method call on the object
                  MUST raise an \'IncorrectState\' exception
                  (apart from DESTRUCTOR and close()).
                - close() can be called multiple times, with no
                  side effects.
                - if close() is implicitly called in the
                  DESTRUCTOR, it will never throw an exception.
                - for resource deallocation semantics, see 
                  Section 2.
                - for timeout semantics, see Section 2.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 14
                                                                      },
                                                           'get_cwd' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'get_cwd',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'cwd',
                                                                                          'default' => undef,
                                                                                          'type' => 'saga::url'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - get_cwd
      Purpose:  obtain the current working directory for the
                entry
      Format:   get_cwd            (out saga::url cwd);
      Inputs:   -
      InOuts:   -
      Outputs:  cwd                 current working directory
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    -
                - returns the directory part of the url path
                  element.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 3
                                                                        },
                                                           'link' => {
                                                                       'comm' => '',
                                                                       'precom' => '',
                                                                       'name' => 'link',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'target',
                                                                                       'default' => undef,
                                                                                       'type' => 'saga::url'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'flags',
                                                                                       'default' => 'None',
                                                                                       'type' => 'int'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - link
      Purpose:  create a symbolic link from the target entry to
                the source entry ( this entry) so that any reference 
                to the target refers to the source entry
      Format:   link               (in  saga::url target,
                                    in  int       flags = None);
      Inputs:   target:             name to link to
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - a symbolic link to the entry exists at target.
                - \'Owner\' of target is the id of the context
                  use to perform the operation if target gets
                  created.
      Perms:    Query 
                Exec  for parent directory.
                Query for target.
                Query for target\'s parent directory.
                Exec  for target\'s parent directory.
                Write for target
                      if  target does exist.
                Write for target\'s parent directory 
                      if  target does not exist.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                AlreadyExists
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the target is a directory, the source entry
                  is linked into that directory
                - if the source is a directory, and the
                  \'Recursive\' flag is set, the source directory
                  is recursively linked to the target (which must
                  be a directory as well - otherwise a
                  \'BadParameter\' exception is thrown).  The
                  method then behaves similar to lndir.  If the
                  \'Recursive\' flag is not set, the source entry
                  itself is linked.  
                - a \'BadParameter\' exception is thrown if the 
                  source is not a directory and the \'Recursive\' 
                  flag is set.
                - if the target lies in a non-existing part of
                  the name space, a \'DoesNotExist\' exception is
                  thrown, unless the \'CreateParents\' flag is
                  given - then that part of the name space must
                  be created.
                - if the target already exists, it will be
                  overwritten if the \'Overwrite\' flag is set,
                  otherwise it is an \'AlreadyExists\' exception.
                - if a directory is to be moved, but the target
                  exists and is not a directory, and not a link 
                  to a directory, an \'AlreadyExists\' exception 
                  is thrown even if the \'Overwrite\' flag is set. 
                - if the instance points at an symbolic link, 
                  the source is not dereferenced before linking, 
                  unless the \'Dereference\' flag is given.  If
                  derefencing is impossible (e.g. on a broken 
                  link), an \'IncorrectState\' exception is thrown.
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - the default flags are \'None\' (0).
                - similar to \'ln\' as defined by POSIX.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 11
                                                                     },
                                                           'permissions_allow' => {
                                                                                    'comm' => 'permissions with flags',
                                                                                    'precom' => '    // overload permissions because of namespace specific flags
',
                                                                                    'name' => 'permissions_allow',
                                                                                    'params' => [
                                                                                                  {
                                                                                                    'mode' => 'in',
                                                                                                    'name' => 'id',
                                                                                                    'default' => undef,
                                                                                                    'type' => 'string'
                                                                                                  },
                                                                                                  {
                                                                                                    'mode' => 'in',
                                                                                                    'name' => 'perm',
                                                                                                    'default' => undef,
                                                                                                    'type' => 'permission'
                                                                                                  },
                                                                                                  {
                                                                                                    'mode' => 'in',
                                                                                                    'name' => 'flags',
                                                                                                    'default' => 'None',
                                                                                                    'type' => 'int'
                                                                                                  }
                                                                                                ],
                                                                                    'detail' => '    - permissions_allow
      Purpose:  enable a permission 
      Format:   permissions_allow    (in  string  id,
                                      in  int     perm, 
                                      in  int     flags = None);
      Inputs:   id:                   id to set permission for
                perm:                 permission to enable
                flags:                mode of operation
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the permissions are enabled.
      Perms:    Owner
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to permissions_allow from the
                  saga::permissions interface apply.
                - allowed flags are: \'Recursive\', \'Dereference\'.
                  All other flags cause a \'BadParameter\'
                  exception.
                - specifying \'Recursive\' for a non-directory
                  causes a \'BadParameter\' exception.
',
                                                                                    'temp' => '',
                                                                                    'is_void' => 0,
                                                                                    'idx' => 15
                                                                                  },
                                                           'read_link' => {
                                                                            'comm' => '',
                                                                            'precom' => '',
                                                                            'name' => 'read_link',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'out',
                                                                                            'name' => 'link',
                                                                                            'default' => undef,
                                                                                            'type' => 'saga::url'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - read_link 
      Purpose:  returns the name of the link target
      Format:   read_link          (out saga::url link);
      Inputs:   -
      InOuts:   -
      Outputs:  link:               resolved name
      PreCond:  -
      PostCond: -
      Perms:    Query
                Query for parent directory.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the returned name MUST be sufficient to
                  access the link target entry
                - resolves one link level only
                - if the entry instance this method is called
                  upon does not point to a link, an
                  \'IncorrectState\' exception is thrown.
                - similar to libc\'s \'readlink\' as defined by
                  POSIX, but with only one level of redirection
                  resolved.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 8
                                                                          },
                                                           'is_entry' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'is_entry',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'test',
                                                                                           'default' => undef,
                                                                                           'type' => 'boolean'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - is_entry
      Purpose:  tests the entry for being an ns_entry
      Format:   is_entry           (out boolean test);
      Inputs:   -
      InOuts:   -
      Outputs:  test:               boolean indicating if entry
                                    is an ns_entry
      PreCond:  -
      PostCond: -
      Perms:    Query
                Query for parent directory.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the method returns false if the entry is a
                  link or a directory (although an ns_directory
                  IS_A ns_entry, false is returned on a test on 
                  an ns_directory) - otherwise true is returned.
                - similar to \'test -f\' as defined by POSIX.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 6
                                                                         },
                                                           'DESTRUCTOR' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'DESTRUCTOR',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'obj',
                                                                                             'default' => undef,
                                                                                             'type' => 'ns_entry'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR           (in  ns_entry     obj)
      Inputs:   obj:                  the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the entry is closed.
      Perms:    -
      Throws:   - 
      Notes:    - if the instance was not closed before, the 
                  destructor performs a close() on the instance,
                  and all notes to close() apply.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 1
                                                                           },
                                                           'get_name' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'get_name',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'name',
                                                                                           'default' => undef,
                                                                                           'type' => 'saga::url'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - get_name
      Purpose:  obtain the name part of the url path element
      Format:   get_name           (out  saga::url name);
      Inputs:   -
      InOuts:   -
      Outputs:  name                last part of path element
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    -
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 4
                                                                         },
                                                           'get_url' => {
                                                                          'comm' => 'basic properties',
                                                                          'precom' => '    Methods for inspecting ns_entry:
    --------------------------------
',
                                                                          'name' => 'get_url',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'url',
                                                                                          'default' => undef,
                                                                                          'type' => 'saga::url'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - get_url
      Purpose:  obtain the complete url pointing to the entry
      Format:   get_url            (out  saga::url url);
      Inputs:   -
      InOuts:   -
      Outputs:  url                 url pointing to the entry
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    -
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 2
                                                                        },
                                                           'CONSTRUCTOR' => {
                                                                              'comm' => '',
                                                                              'precom' => '       ftp://ftp.host.net/pub/data/test.txt
      http://www.host.net/ftp/data/test.txt
      http://www.host.net/ftp/data/./test.txt
      http://www.host.net/ftp/data/../data/test.txt
',
                                                                              'name' => 'CONSTRUCTOR',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 's',
                                                                                              'default' => undef,
                                                                                              'type' => 'session'
                                                                                            },
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'name',
                                                                                              'default' => undef,
                                                                                              'type' => 'saga::url'
                                                                                            },
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'flags',
                                                                                              'default' => 'None',
                                                                                              'type' => 'int'
                                                                                            },
                                                                                            {
                                                                                              'mode' => 'out',
                                                                                              'name' => 'obj',
                                                                                              'default' => undef,
                                                                                              'type' => 'ns_entry'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR          (in  session   s, 
                                      in  saga::url name,
                                      in  int       flags = Read,
                                      out ns_entry obj)
      Inputs:   s:                    session handle
                name:                 initial working dir
                flags:                open mode
      InOuts:   -
      Outputs:  obj:                  the newly created object
      PreCond:  -
      PostCond: - the entry is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the entry 
                  gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                AlreadyExists
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the default flag set is \'Read\'.
                - the constructor performs an open of the 
                  entry - all notes to the respective open 
                  call (on namespace_directory) apply.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 0
                                                                            },
                                                           'permissions_deny' => {
                                                                                   'comm' => '',
                                                                                   'precom' => '',
                                                                                   'name' => 'permissions_deny',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'id',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'perm',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'permission'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'flags',
                                                                                                   'default' => 'None',
                                                                                                   'type' => 'int'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - permissions_deny
      Purpose:  disable a permission flag
      Format:   permissions_deny     (in  string     id,
                                      in  int        perm,
                                      in  int        flags);
      Inputs:   id:                   id to set permission for
                perm:                 permission to disable
                flags:                mode of operation
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the permissions are disabled.
      Perms:    Owner
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to permissions_deny from the
                  saga::permissions interface apply.
                - allowed flags are: \'Recursive\', \'Dereference\'.
                  All other flags cause a \'BadParameter\'
                  exception.
                - specifying \'Recursive\' for a non-directory
                  causes a \'BadParameter\' exception.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 16
                                                                                 }
                                                         },
                                                'impl' => [
                                                            'saga::object,',
                                                            'saga::async',
                                                            'saga::permissions'
                                                          ],
                                                'name' => 'ns_entry',
                                                'idx' => 1,
                                                'type' => 'class'
                                              },
                                'flags' => {
                                             'comm' => '',
                                             'def' => {
                                                        'comm' => '128,    reserved for Truncate'
                                                      },
                                             'name' => 'flags',
                                             'idx' => 0,
                                             'type' => 'enum'
                                           },
                                'ns_directory' => {
                                                    'base' => [
                                                                'saga::ns_entry'
                                                              ],
                                                    'comm' => '',
                                                    'def' => {
                                                               'remove' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'remove',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'target',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'flags',
                                                                                             'default' => 'None',
                                                                                             'type' => 'int'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - remove
      Purpose:  removes entries
      Format:   remove             (in  string  target,
                                    in  int     flags = None);
      Notes:    - the syntax and semantics of this call is 
                  identical to its URL based counterpart.  
                - the \'target\' string can contain wildcards, as
                  described above.
                - on error conditions on any of the expanded 
                  list of target entries, the respective error 
                  described in the URL version of the method is 
                  thrown - the state of the operations on the 
                  other elements of the expanded entry list is 
                  undefined.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 21
                                                                           },
                                                               'get_mtime' => {
                                                                                'comm' => '',
                                                                                'precom' => '',
                                                                                'name' => 'get_mtime',
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 'name',
                                                                                                'default' => undef,
                                                                                                'type' => 'saga::url'
                                                                                              },
                                                                                              {
                                                                                                'mode' => 'out',
                                                                                                'name' => 'time',
                                                                                                'default' => undef,
                                                                                                'type' => 'int'
                                                                                              }
                                                                                            ],
                                                                                'detail' => '    - get_mtime
      Purpose:  returns the last modification time
      Format:   get_time           (in  saga::url name,
                                    out int time);
      Inputs:   name:               name to be checked
      InOuts:   -
      Outputs:  time:               time of last modification
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Query for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to ns_entry::get_mtime() apply.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if \'name\' does not exist, a \'DoesNotExist\'
                  exception is thrown.
',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'idx' => 10
                                                                              },
                                                               'move' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'move',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'source',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'target',
                                                                                           'default' => undef,
                                                                                           'type' => 'saga::url'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'None',
                                                                                           'type' => 'int'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - move
      Purpose:  moves sources to a target directory.
      Format:   move               (in  string     source,
                                    in  saga::url  target,
                                    in  int        flags = None);
      Notes:    - the syntax and semantics of this call is 
                  identical to its URL based counterpart.  
                - the \'source\' string can contain wildcards, as
                  described above.
                - on error conditions on any of the expanded 
                  list of source entries, the respective error 
                  described in the URL version of the method is 
                  thrown - the state of the operations on the 
                  other elements of the expanded entry list is 
                  undefined.
                - if source expands to multiple entries, then the
                  target URL MUST specify a directory -
                  otherwise a \'BadParameter\' exception is thrown.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 20
                                                                         },
                                                               'is_link' => {
                                                                              'comm' => '',
                                                                              'precom' => '',
                                                                              'name' => 'is_link',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'name',
                                                                                              'default' => undef,
                                                                                              'type' => 'saga::url'
                                                                                            },
                                                                                            {
                                                                                              'mode' => 'out',
                                                                                              'name' => 'test',
                                                                                              'default' => undef,
                                                                                              'type' => 'boolean'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - is_link
      Purpose:  tests name for being a symbolic link
      Format:   is_link            (in  saga::url name,
                                    out boolean   test);
      Inputs:   name:               name to be tested
      InOuts:   -
      Outputs:  test:               boolean indicating if name
                                    is a link
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Exec  for name\'s parent directory.
                Read  for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                IncorrectState
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to the ns_entry::is_link() method 
                  apply.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if \'name\' is a valid entry name but the entry
                  does not exist, a \'DoesNotExist\' exception is
                  thrown.
                - similar to \'test -L\' as defined by POSIX.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 8
                                                                            },
                                                               'is_dir' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'is_dir',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'name',
                                                                                             'default' => undef,
                                                                                             'type' => 'saga::url'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'test',
                                                                                             'default' => undef,
                                                                                             'type' => 'boolean'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - is_dir
      Purpose:  tests name for being a directory
      Format:   is_dir             (in  saga::url name,
                                    out boolean test);
      Inputs:   name:               name to be tested
      InOuts:   -
      Outputs:  test:               boolean indicating if name
                                    is a directory
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Exec  for name\'s parent directory.
                Read  for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns true if the instance represents
                  a directory entry, false otherwise
                - all notes to the ns_entry::is_dir() method 
                  apply.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, an \'BadParameter\'
                  exception is thrown.
                - if \'name\' is a valid entry name but the entry
                  does not exist, a \'DoesNotExist\' exception is
                  thrown.
                - similar to \'test -d\' as defined by POSIX.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 6
                                                                           },
                                                               'find' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'find',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'name_pattern',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'Recursive',
                                                                                           'type' => 'int'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'names',
                                                                                           'default' => undef,
                                                                                           'type' => 'array<saga::url>'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - find
      Purpose:  find entries in the current directory and below
      Format:   find               (in  string  name_pattern,
                                    in  int     flags = Recursive,
                                    out array<saga::url> names);
      Inputs:   name_pattern:       pattern for names of
                                    entries to be found
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  names:              array of names matching the
                                    name_pattern
      PreCond:  -
      PostCond: -
      Perms:    Read  for cwd.
                Query for entries specified by name_pattern.
                Exec  for parent directories of these entries.
                Query for parent directories of these entries.
                Read  for directories specified by name_pattern.
                Exec  for directories specified by name_pattern.
                Exec  for parent directories of these directories.
                Query for parent directories of these directories.
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - find operates recursively below the current
                  working directory if the \'Recursive\' flag is
                  specified (default)
                - find does not follow symbolically linked
                  directories, unless the \'Dereference\' flag
                  is specified - otherwise find lists symbolic 
                  link entries with a matching name.
                - the default flags are \'Recursive\' (1).
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - the name_pattern follows the standard POSIX 
                  shell wildcard specification, as described 
                  above.
                - the matching entries returned are path names 
                  relative to cwd.
                - similar to \'find\' as defined by POSIX, but
                  limited to the -name option.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 4
                                                                         },
                                                               'copy' => {
                                                                           'comm' => 'management methods - wildcard versions',
                                                                           'precom' => '    Management of name space entries - wildcard versions:
    -----------------------------------------------------
',
                                                                           'name' => 'copy',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'source',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'target',
                                                                                           'default' => undef,
                                                                                           'type' => 'saga::url'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'None',
                                                                                           'type' => 'int'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - copy
      Purpose:  copy the entry to another part of the name space
      Format:   copy               (in  string     source,
                                    in  saga::url  target,
                                    in  int        flags = None);
      Notes:    - the syntax and semantics of this call is 
                  identical to its URL based counterpart.  
                - the \'source\' string can contain wildcards, as
                  described above.
                - on error conditions on any of the expanded 
                  list of source entries, the respective error 
                  described in the URL version of the method is 
                  thrown - the state of the operations on the 
                  other elements of the expanded entry list is 
                  undefined.
                - if source expands to multiple entries, then the
                  target URL MUST specify a directory -
                  otherwise a \'BadParameter\' exception is thrown.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 18
                                                                         },
                                                               'open_dir' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'open_dir',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'name',
                                                                                               'default' => undef,
                                                                                               'type' => 'saga::url'
                                                                                             },
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'flags',
                                                                                               'default' => 'Read',
                                                                                               'type' => 'int'
                                                                                             },
                                                                                             {
                                                                                               'mode' => 'out',
                                                                                               'name' => 'dir',
                                                                                               'default' => undef,
                                                                                               'type' => 'ns_directory'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - open_dir
      Purpose:  creates a new ns_directory instance
      Format:   open_dir           (in  saga::url name,
                                    in  int       flags = Read,
                                    out ns_directory dir);
      Inputs:   name:               directory to open
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  dir:                opened directory instance
      PreCond:  -
      PostCond: - the session of the returned instance is that of
                  the calling instance.
                - \'Owner\' of name is the id of the context
                  used to perform the operation if name gets
                  created.
                - the namespace directory is created if it
                  does not yet exist, and the Create is set.
      Perms:    Exec  for name\'s parent directory.
                Write for name\'s parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the cwd of the new dir object instance is set
                  to \'name\'
                - a \'DoesNotExist\' exception is thrown if \'name\'
                  does not exist and the \'Create\' flag is not
                  given.
                - a \'AlreadyExist\' exception is thrown if \'name\'
                  does exist and the \'Create\' flag and the
                 \'Exclusive\' flag are given.
                - no exception is thrown if \'name\' does exist and 
                  the \'Create\' flag is given, and the \'Exclusive\' 
                  flag is not given.
                - if the \'Create\' flag is given, all notes to the
                  ns_directory::make_dir() method apply.
                - the default flag set is \'Read\'.
                - the flags \'Overwrite\', \'Recursive\' and
                  \'Dereference\' are not allowed on this method, 
                  and cause a \'BadParameter\' exception.
                - \'name\' is always deeply dereferenced, however,
                  the cwd is still set to \'name\', and not to the
                  value of the link target.
                - parent directories are created on the fly if
                  the \'CreateParents\' and \'Create\' flag are both
                  given, if they don\'t exist.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid directory name, a \'BadParameter\'
                  exception is thrown.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 23
                                                                             },
                                                               'list' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'list',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'name_pattern',
                                                                                           'default' => '"."',
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'None',
                                                                                           'type' => 'int'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'names',
                                                                                           'default' => undef,
                                                                                           'type' => 'array<saga::url>'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - list
      Purpose:  list entries in this directory
      Format:   list               (in  string name_pattern = ".",
                                    in  int    flags        = None
                                    out array<saga::url> names);
      Inputs:   flags:              flags defining the operation
                                    modus
                name_pattern:       name or pattern to list
      InOuts:   -
      Outputs:  names:              array of names matching the
                                    name_pattern
      PreCond:  -
      PostCond: -
      Perms:    Query for entries specified by name_pattern.
                Exec  for parent directories of these entries.
                Query for parent directories of these entries.
                Read  for directories specified by name_pattern.
                Exec  for directories specified by name_pattern.
                Exec  for parent directories of these directories.
                Query for parent directories of these directories.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if name_pattern is not given (i.e. is an empty 
                  string), all entries in the current working 
                  directory are listed.
                - if name_pattern is given and points to a 
                  directory, the contents of that directory 
                  are listed.
                - the name_pattern follows the standard POSIX 
                  shell wildcard specification, as described 
                  above.
                - list does not follow symbolically linked
                  directories, unless the \'Dereference\' flag
                  is specified - otherwise list lists symbolic 
                  link entries with a matching name.
                - if the \'DeReference\' flag is set, list 
                  returns the name of link targets, not of the
                  link entry itself.
                - the default flags are \'None\' (0).
                - other flags are not allowed, and cause a
                  \'BadParameter\' exception.
                - if the name_pattern cannot be parsed, a
                  \'BadParameter\' exception with a descriptive
                  error message is thrown.
                - if the name_pattern does not match any entry,
                  an empty list is returned, but no exception is
                  raised.
                - similar to \'ls\' as defined by POSIX.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 3
                                                                         },
                                                               'link' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'link',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'source',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'target',
                                                                                           'default' => undef,
                                                                                           'type' => 'saga::url'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'None',
                                                                                           'type' => 'int'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - link
      Purpose:  create a symbolic link from the target entry to
                the source entry so that any reference to the
                target refers to the source entry
      Format:   link               (in  string     source,
                                    in  saga::url  target,
                                    in  int        flags = None);
      Notes:    - the syntax and semantics of this call is 
                  identical to its URL based counterpart.  
                - the \'source\' string can contain wildcards, as
                  described above.
                - on error conditions on any of the expanded 
                  list of source entries, the respective error 
                  described in the URL version of the method is 
                  thrown - the state of the operations on the 
                  other elements of the expanded entry list is 
                  undefined.
                - if source expands to multiple entries, then the
                  target URL MUST specify a directory -
                  otherwise a \'BadParameter\' exception is thrown.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 19
                                                                         },
                                                               'permissions_allow' => {
                                                                                        'comm' => 'permissions with flags - wildcard versions',
                                                                                        'precom' => '    // permissions calls - wildcard versions
',
                                                                                        'name' => 'permissions_allow',
                                                                                        'params' => [
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'target',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'string'
                                                                                                      },
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'id',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'string'
                                                                                                      },
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'perm',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'int'
                                                                                                      },
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'flags',
                                                                                                        'default' => 'None',
                                                                                                        'type' => 'int'
                                                                                                      }
                                                                                                    ],
                                                                                        'detail' => '    - permissions_allow
      Purpose:  enable a permission 
      Format:   permissions_allow    (in  string  target, 
                                      in  string  id,
                                      in  int     perm, 
                                      in  int     flags = None);
      Notes:    - the syntax and semantics of this call is 
                  identical to its URL based counterpart.  
                - the \'source\' string can contain wildcards, as
                  described above.
                - on error conditions on any of the expanded 
                  list of source entries, the respective error 
                  described in the URL version of the method is 
                  thrown - the state of the operations on the 
                  other elements of the expanded entry list is 
                  undefined.
',
                                                                                        'temp' => '',
                                                                                        'is_void' => 0,
                                                                                        'idx' => 26
                                                                                      },
                                                               'read_link' => {
                                                                                'comm' => '',
                                                                                'precom' => '',
                                                                                'name' => 'read_link',
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 'name',
                                                                                                'default' => undef,
                                                                                                'type' => 'saga::url'
                                                                                              },
                                                                                              {
                                                                                                'mode' => 'out',
                                                                                                'name' => 'link',
                                                                                                'default' => undef,
                                                                                                'type' => 'saga::url'
                                                                                              }
                                                                                            ],
                                                                                'detail' => '    - read_link 
      Purpose:  returns the name of the link target
      Format:   read_link          (in  saga::url name,
                                    out saga::url link);
      Inputs:   name:               name to be resolved
      InOuts:   -
      Outputs:  link:               resolved name
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Exec  for name\'s parent directory.
                Read  for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to ns_entry::read_link() apply
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if \'name\' does not exist, a \'DoesNotExist\'
                  exception is thrown.
',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'idx' => 9
                                                                              },
                                                               'is_entry' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'is_entry',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'name',
                                                                                               'default' => undef,
                                                                                               'type' => 'saga::url'
                                                                                             },
                                                                                             {
                                                                                               'mode' => 'out',
                                                                                               'name' => 'test',
                                                                                               'default' => undef,
                                                                                               'type' => 'boolean'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - is_entry
      Purpose:  tests name for being an ns_entry
      Format:   is_entry           (in  saga::url name,
                                    out boolean   test);
      Inputs:   name:               name to be tested
      InOuts:   -
      Outputs:  test:               boolean indicating if name
                                    is a non-directory entry
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Exec  for name\'s parent directory.
                Read  for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to the ns_entry::is_entry() method 
                  apply.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if \'name\' is a valid entry name but the entry
                  does not exist, a \'DoesNotExist\' exception is
                  thrown.
                - similar to \'test -f\' as defined by POSIX.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 7
                                                                             },
                                                               'get_num_entries' => {
                                                                                      'comm' => 'manage entries by number',
                                                                                      'precom' => '    Iterate over large directories:
    -------------------------------
',
                                                                                      'name' => 'get_num_entries',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'out',
                                                                                                      'name' => 'num',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'int'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - get_num_entries
      Purpose:  gives the number of entries in the directory
      Format:   get_num_entries    (out int   num);
      Inputs:   -
      InOuts:   -
      Outputs:  num:                number of entries in the
                                    directory
      PreCond:  -
      PostCond: -
      Perms:    Query for cwd.
                Exec  for cwd.
                Read  for cwd.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - at the time of using the result of this call,
                  the actual number of entries may already have
                  changed (no locking is implied)
                - vaguely similar to \'opendir\'/\'readdir\' (2) as
                  defined by POSIX.
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 11
                                                                                    },
                                                               'open' => {
                                                                           'comm' => 'factory methods',
                                                                           'precom' => '',
                                                                           'name' => 'open',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'name',
                                                                                           'default' => undef,
                                                                                           'type' => 'saga::url'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'flags',
                                                                                           'default' => 'Read',
                                                                                           'type' => 'int'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'entry',
                                                                                           'default' => undef,
                                                                                           'type' => 'ns_entry'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - open
      Purpose:  creates a new ns_entry instance
      Format:   open               (in  saga::url name,
                                    in  int       flags = Read,
                                    out ns_entry  entry);
      Inputs:   name:               entry
                flags:              flags defining the operation
                                    modus
      InOuts:   -
      Outputs:  entry:              opened entry instance
      PreCond:  -
      PostCond: - the session of the returned instance is that
                  of the calling instance.
                - \'Owner\' of name is the id of the context
                  used to perform the operation if name gets
                  created.
                - the namespace entry is created if it does not 
                  yet exist, and the CREATE flag is specified.
      Perms:    Exec  for name\'s parent directory.
                Write for name\'s parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - a \'BadParameter\' exception is thrown if \'name\'
                  is an invalid entry name.
                - a \'DoesNotExist\' exception is thrown if \'name\'
                  does not exist, and the \'Create\' flag is not
                  given.
                - a \'AlreadyExists\' exception is thrown if \'name\'
                  does exist, and the \'Create\' and \'Exclusive\' 
                  flags are given.
                - \'name\' is always deeply dereferenced, the cwd,
                  however, is not changed to the link targets
                  cwd.
                - parent directories are created on the fly if
                  the \'CreateParents\' and \'Create\' flag are both
                  given, if they don\'t exist.
                - the entry is locked on open if the \'Lock\' flag
                  is given.  If the entry is already in a locked
                  state, the open will fail and a descriptive
                  error will be issued.  If a entry is opened in
                  locked mode, any other open on that entry MUST
                  fail with a \'NoSuccess\' exception if the \'Lock\'
                  flag is given.  Note that a entry can be opened
                  in unlocked mode, and then in locked mode,
                  without an error getting raised.  The
                  application programmer must take precautions
                  to avoid such situations.  The lock will get
                  removed on destruction of the entry object, and
                  also on close.  If an implementation does not
                  support locking, a descriptive \'BadParameter\'
                  exception MUST get thrown if the \'Lock\' flag 
                  is given.  Read-locks and Write-locks are not
                  distinguished.
                - the default flag set is \'Read\'.
                - the flags \'Recursive\' and \'Dereference\' are 
                  not allowed on this method, and cause a 
                  \'BadParameter\' exception.
                - similar to \'open\' (2) as defined by POSIX.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 22
                                                                         },
                                                               'get_entry' => {
                                                                                'comm' => '',
                                                                                'precom' => '',
                                                                                'name' => 'get_entry',
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 'entry',
                                                                                                'default' => undef,
                                                                                                'type' => 'int'
                                                                                              },
                                                                                              {
                                                                                                'mode' => 'out',
                                                                                                'name' => 'name',
                                                                                                'default' => undef,
                                                                                                'type' => 'saga::url'
                                                                                              }
                                                                                            ],
                                                                                'detail' => '    - get_entry 
      Purpose:  gives the name of an entry in the directory
                based upon the enumeration defined by
                get_num_entries
      Format:   get_entry          (in  int       entry,
                                    out saga::url name);
      Inputs:   entry:              index of entry to get
      InOuts:   -
      Outputs:  name:               name of entry at index
      PreCond:  -
      PostCond: -
      Perms:    Query for cwd.
                Exec  for cwd.
                Read  for cwd.
      Throws:   NotImplemented
                IncorrectState
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - \'0\' is the first entry
                - there is no sort order implied by the
                  enumeration, however an underlying
                  implementation MAY choose to sort the entries
                - subsequent calls to get_entry and/or
                  get_num_entries may return inconsistent data,
                  i.e. no locking or state tracking is implied.
                  In particular, an index may be invalid - a
                  \'DoesNotExist\' exception is then thrown (not a
                  \'BadParameter\' exception).
                - vaguely similar to \'opendir\'/\'readdir\' (2) as
                  defined by POSIX.
',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'idx' => 12
                                                                              },
                                                               'change_dir' => {
                                                                                 'comm' => 'navigation/query methods',
                                                                                 'precom' => '    Methods for navigation in the name space hierarchy:
    ---------------------------------------------------
',
                                                                                 'name' => 'change_dir',
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'in',
                                                                                                 'name' => 'dir',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'saga::url'
                                                                                               }
                                                                                             ],
                                                                                 'detail' => '    - change_dir
      Purpose:  change the working directory
      Format:   change_dir         (in  saga::url  dir);
      Inputs:   dir:                directory to change to
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - dir is the directory the instance represents.
      Perms:    Exec for dir.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if \'dir\' can be parsed as URL, but contains an
                  invalid directory name, a \'BadParameter\'
                  exception is thrown.
                - if \'dir\' does not exist, a \'DoesNotExist\'
                  exception is thrown.
                - similar to the \'cd\' command in the POSIX 
                  shell.
',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'idx' => 2
                                                                               },
                                                               'make_dir' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'make_dir',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'target',
                                                                                               'default' => undef,
                                                                                               'type' => 'saga::url'
                                                                                             },
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'flags',
                                                                                               'default' => 'None',
                                                                                               'type' => 'int'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - make_dir
      Purpose:  creates a new directory
      Format:   make_dir           (in  saga::url  target,
                                    in  int     flags = None);
      Inputs:   target:             directory to create
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - \'Owner\' of target is the id of the context
                  used to perform the operation if target gets
                  created.
      Perms:    Exec  for target\'s parent directory.
                Write for target\'s parent directory.
                Write for target if Write is set.
                Read  for target if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the parent directory or directories do not
                  exist, the \'CreateParents\' flag must be set 
                  or a \'DoesNotExist\' exception is thrown.  
                  If set, the parent directories are created as 
                  well.
                - an \'AlreadyExists\' exception is thrown if the
                  directory already exists and the \'Exclusive\' 
                  flag is given.
                - the default flags are \'None\' (0).
                - other flags are not allowed on this method, 
                  and cause a \'BadParameter\' exception.
                - if \'target\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - similar to \'mkdir\' (2) as defined by POSIX.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 17
                                                                             },
                                                               'DESTRUCTOR' => {
                                                                                 'comm' => '',
                                                                                 'precom' => '',
                                                                                 'name' => 'DESTRUCTOR',
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'in',
                                                                                                 'name' => 'obj',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'ns_directory'
                                                                                               }
                                                                                             ],
                                                                                 'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR           (in  ns_directory obj)
      Inputs:   obj:                  the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the directory is closed.
      Perms:    -
      Throws:   - 
      Notes:    - the semantics of the inherited destructors
                  apply
',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'idx' => 1
                                                                               },
                                                               'exists' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'exists',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'name',
                                                                                             'default' => undef,
                                                                                             'type' => 'saga::url'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'exists',
                                                                                             'default' => undef,
                                                                                             'type' => 'boolean'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - exists
      Purpose:  returns true if entry exists, false otherwise
      Format:   exists             (in  saga::url name,
                                    out boolean  exists);
      Inputs:   name:               name to be tested for
                                    existence
      InOuts:   -
      Outputs:  exists:             boolean indicating existence
                                    of name
      PreCond:  -
      PostCond: -
      Perms:    Query for name.
                Exec  for name\'s parent directory.
                Read  for name\'s parent directory.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, an \'BadParameter\'
                  exception is thrown.
                - note that no exception is thrown if the entry
                  does not exist - the method just returns
                  \'false\' in this case.
                - similar to \'test -e\' as defined by POSIX.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 5
                                                                           },
                                                               'CONSTRUCTOR' => {
                                                                                  'comm' => '',
                                                                                  'precom' => '',
                                                                                  'name' => 'CONSTRUCTOR',
                                                                                  'params' => [
                                                                                                {
                                                                                                  'mode' => 'in',
                                                                                                  'name' => 's',
                                                                                                  'default' => undef,
                                                                                                  'type' => 'session'
                                                                                                },
                                                                                                {
                                                                                                  'mode' => 'in',
                                                                                                  'name' => 'name',
                                                                                                  'default' => undef,
                                                                                                  'type' => 'saga::url'
                                                                                                },
                                                                                                {
                                                                                                  'mode' => 'in',
                                                                                                  'name' => 'flags',
                                                                                                  'default' => 'None',
                                                                                                  'type' => 'int'
                                                                                                },
                                                                                                {
                                                                                                  'mode' => 'out',
                                                                                                  'name' => 'obj',
                                                                                                  'default' => undef,
                                                                                                  'type' => 'ns_directory'
                                                                                                }
                                                                                              ],
                                                                                  'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR          (in  session   s,
                                      in  saga::url name,
                                      in  int       flags = Read,
                                      out ns_directory obj)
      Inputs:   name:                 initial working dir
                flags:                open mode
                s:                    session handle for
                                      object creation
      InOuts:   -
      Outputs:  obj:                  the newly created object
      PreCond:  -
      PostCond: - the directory is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the
                  directory gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the semantics of the inherited constructors
                  apply
                - the constructor performs an open of the 
                  entry - all notes to the respective open 
                  call apply.
                - the default flag set is \'Read\'.
',
                                                                                  'temp' => '',
                                                                                  'is_void' => 0,
                                                                                  'idx' => 0
                                                                                },
                                                               'permissions_deny' => {
                                                                                       'comm' => '',
                                                                                       'precom' => '',
                                                                                       'name' => 'permissions_deny',
                                                                                       'params' => [
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'target',
                                                                                                       'default' => undef,
                                                                                                       'type' => 'string'
                                                                                                     },
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'id',
                                                                                                       'default' => undef,
                                                                                                       'type' => 'string'
                                                                                                     },
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'perm',
                                                                                                       'default' => undef,
                                                                                                       'type' => 'int'
                                                                                                     },
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'flags',
                                                                                                       'default' => 'None',
                                                                                                       'type' => 'int'
                                                                                                     }
                                                                                                   ],
                                                                                       'detail' => '    - permissions_deny
      Purpose:  disable a permission flag
      Format:   permissions_deny     (in  saga::url target, 
                                      in  string    id,
                                      in  int       perm,
                                      in  int       flags = None);
      Inputs:   target:               entry to set permissions for
                id:                   id to set permission for
                perm:                 permission to disable
                flags:                mode of operation
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the permissions are disabled.
      Perms:    Owner of target
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes to permissions_deny from the
                  saga::permissions interface apply.
                - allowed flags are: \'Recursive\', \'Dereference\'.
                  All other flags cause a \'BadParameter\'
                  exception.
                - specifying \'Recursive\' for a non-directory
                  causes a \'BadParameter\' exception.
',
                                                                                       'temp' => '',
                                                                                       'is_void' => 0,
                                                                                       'idx' => 27
                                                                                     }
                                                             },
                                                    'name' => 'ns_directory',
                                                    'idx' => 2,
                                                    'type' => 'class'
                                                  }
                              },
          'saga.job' => {
                          'job_self' => {
                                          'base' => [
                                                      'saga::job'
                                                    ],
                                          'comm' => 'no CONSTRUCTOR',
                                          'def' => {
                                                     'DESTRUCTOR' => {
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'obj',
                                                                                       'default' => undef,
                                                                                       'type' => 'job_self'
                                                                                     }
                                                                                   ],
                                                                       'comm' => '',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'name' => 'DESTRUCTOR',
                                                                       'idx' => 0
                                                                     }
                                                   },
                                          'impl' => [
                                                      'saga::steerable'
                                                    ],
                                          'name' => 'job_self',
                                          'idx' => 4,
                                          'type' => 'class'
                                        },
                          'job_service' => {
                                             'comm' => '',
                                             'def' => {
                                                        'create_job' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'create_job',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'jd',
                                                                                          'default' => undef,
                                                                                          'type' => 'job_description'
                                                                                        },
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'job',
                                                                                          'default' => undef,
                                                                                          'type' => 'job'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - create_job
      Purpose:  create a job instance
      Format:   create_job        (in  job_description jd,
                                   out job             job);
      Inputs:   jd:                description of job to be
                                   submitted
      InOuts:   -
      Outputs:  job:               a job object representing
                                   the submitted job instance
      PreCond:  - jd has an \'Executable\' attribute.
      PostCond: - job is in \'New\' state
                - jd is deep copied (no state is shared
                  after method invocation)
                - \'Owner\' of the job is the id of the context
                  used for creating the job.
      Perms:    -
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - calling run() on the job will submit it to
                  the resource, and advance its state.
                - if the job description does not have a valid
                  \'Executable\' attribute, a \'BadParameter\' 
                  exception is thrown.
                - if the job description contains values which
                  are outside of the allowed range, or cannot be
                  parsed, or are otherwise invalid and not
                  usable for creating a job instance, a
                  \'BadParameter\' exception is thrown, which MUST
                  indicate which attribute(s) caused this
                  exception, and why.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 2
                                                                        },
                                                        'get_self' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'get_self',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'out',
                                                                                        'name' => 'job',
                                                                                        'default' => undef,
                                                                                        'type' => 'job_self'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - get_self
      Purpose:  This method returns a job object representing
                _this_ job, i.e. the calling application.
      Format:   get_self            (out job_self  self)
      Inputs:   -
      InOuts:   -
      Outputs:  self:                a job_self object 
                                     representing _this_ job.
      PreCond:  - the application is managed by the job_service.
      PostCond: - job_self is, by definition, in \'Running\' 
                  state.
      Perms:    Query on the job.
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - in general, only a job_service representing the
                  resource manager which started the application
                  which now calls get_self() can successfully
                  return a job_self instance.  However, other
                  job_services may succeed as well.
                - if a job_service cannot handle the calling job
                  as a job_self instance, a \'NoSuccess\' exception
                  is thrown, with a descriptive error message.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 6
                                                                      },
                                                        'DESTRUCTOR' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'DESTRUCTOR',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'obj',
                                                                                          'default' => undef,
                                                                                          'type' => 'job_service'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR        (in  job_service   obj)
      Inputs:   obj:               the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - jobs created by that job_service instance 
                  are not affected by the destruction, and are
                  in particular not canceled.
      Perms:    -
      Throws:   - 
      Notes:    - 
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 1
                                                                        },
                                                        'get_job' => {
                                                                       'comm' => '',
                                                                       'precom' => '',
                                                                       'name' => 'get_job',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'job_id',
                                                                                       'default' => undef,
                                                                                       'type' => 'string'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'job',
                                                                                       'default' => undef,
                                                                                       'type' => 'job'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - get_job
      Purpose:  Given a job identifier, this method returns a
                job object representing this job.
      Format:   get_job             (in  string job_id,
                                     out job    job)
      Inputs:   job_id:              job identifier as returned
                                     by the resource manager
      InOuts:   -
      Outputs:  job:                 a job object representing
                                     the job identified by
                                     job_id
      PreCond:  - job identified by job_id is managed by the
                  job_service.
      PostCond: - 
      Perms:    Query on the job.
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - in general, only a job_service representing the
                  resource manager which submitted the job may be
                  able to handle the job_id, and to identify the
                  job -- however, other job_services may succeed
                  as well.
                - if the resource manager can handle the job_id,
                  but the referenced job is not alive, a 
                  \'DoesNotExist\' exception is thrown.
                - if the resource manager cannot parse the job_id
                  at all, a \'BadParameter\' exception is thrown.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 5
                                                                     },
                                                        'CONSTRUCTOR' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'CONSTRUCTOR',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 's',
                                                                                           'default' => undef,
                                                                                           'type' => 'session'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'rm',
                                                                                           'default' => '""',
                                                                                           'type' => 'url'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'obj',
                                                                                           'default' => undef,
                                                                                           'type' => 'job_service'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR       (in  session       s,
                                   in  url           rm = "",
                                   out job_service   obj)
      Inputs:   s:                 session to associate with
                                   the object
                rm:                contact url for resource 
                                   manager
      InOuts:   -
      Outputs:  obj:               the newly created object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                BadParameter
                IncorrectURL
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - \'rm\' defaults to an empty string - in that
                  case, the implementation must perform a
                  resource discovery, or fall back to a fixed 
                  value, or find a valid  rm contact in any 
                  other way.  If that is not possible, a 
                  \'BadParameter\' exception MUST be thrown, and 
                  MUST indicate that a rm contact string is 
                  needed.  The expected behavior MUST be 
                  documented (i.e. if a default is available).
                - if the rm identified by the rm URL cannot be
                  contacted (i.e. does not exist), a
                  \'BadParameter\' exception is thrown.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 0
                                                                         },
                                                        'list' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'list',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'job_ids',
                                                                                    'default' => undef,
                                                                                    'type' => 'array<string>'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - list
      Purpose:  Get a list of jobs which are currently known by
                the resource manager.
      Format:   list              (out array<string>   job_ids);
      Inputs:   -
      InOuts:   -
      Outputs:  job_ids:           an array of job identifiers
      PreCond:  -
      PostCond: -
      Perms:    Query on jobs identified by the returned ids
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - which jobs are viewable by the calling user 
                  context, and how long a resource manager keeps 
                  job information, are both implementation 
                  dependent.
                - a returned job_id may translate into a job 
                  (via get_job()) which is not controllable by 
                  the requesting application (e.g. it could 
                  cause an \'AuthorizationFailed\' exception).
',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'idx' => 4
                                                                  },
                                                        'run_job' => {
                                                                       'comm' => '',
                                                                       'precom' => '',
                                                                       'name' => 'run_job',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'commandline',
                                                                                       'default' => undef,
                                                                                       'type' => 'string'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'host',
                                                                                       'default' => '""',
                                                                                       'type' => 'string'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'job',
                                                                                       'default' => undef,
                                                                                       'type' => 'job'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'stdin',
                                                                                       'default' => undef,
                                                                                       'type' => 'opaque'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'stdout',
                                                                                       'default' => undef,
                                                                                       'type' => 'opaque'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'stderr',
                                                                                       'default' => undef,
                                                                                       'type' => 'opaque'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - run_job  
      Purpose:  Run a command synchronously.
      Format:   run_job           (in  string  commandline,
                                   in  string  host = "",
                                   out job     job, 
                                   out opaque  stdin,
                                   out opaque  stdout,
                                   out opaque  stderr);
      Inputs:   commandline:       the command and arguments
                                   to be run
                host:              hostname to be used by rm for
                                   submission
      InOuts:   -
      Outputs:  stdin:             IO handle for the running
                                   job\'s standard input stream
                stdout:            IO handle for the running
                                   job\'s standard output
                stderr:            IO handle for the running
                                   job\'s standard error
                job:               a job object representing
                                   the submitted job instance
      PreCond:  -
      PostCond: - job is in \'Running\', \'Done\' or \'Failed\' state.
                - \'Owner\' of the job is the id of the context
                  used for creating the job.
      Perms:    - 
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - This is a convenience routine built on the
                  create_job method, and is intended to simplify
                  the steps of creating a job_description,
                  creating and running the job, and then
                  querying the standard I/O streams.
                - the I/O handles have to be passed to the call
                  as references, in most languages, as calls
                  often allow only one return value (Perl or
                  python being notable exceptions).  If these
                  parameters are omitted, the job is to be
                  started non-interactively, and the output I/O
                  streams may be discarded.
                - the job is guaranteed to run on the given
                  host, or not at all.
                - the method is exactly equivalent to the
                  sequence of (1) creation of a job_description
                  with \'Executable\' set to the values from the
                  commandline, \'Interactive\' set if I/O is
                  requested, \'CandidateHost\' set to host; (2)
                  create_job() with that description; (3)
                  calling run() on that job.  This method can
                  throw any of the exceptions which can occur in
                  this sequence, with the semantics defined in
                  the detailed description of the methods used
                  in this sequence.  No other exception are to
                  be expected.
                - if \'host\' is an empty string (the default),
                  the implementation MUST choose an arbitrary
                  host for execution.
                - stdin, stdout and stderr are guaranteed to
                  contain/provide the complete standard I/O
                  streams, beginning at the start of the remote
                  process.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 3
                                                                     }
                                                      },
                                             'impl' => [
                                                         'saga::object',
                                                         'saga::async'
                                                       ],
                                             'name' => 'job_service',
                                             'idx' => 2,
                                             'type' => 'class'
                                           },
                          'job' => {
                                     'base' => [
                                                 'saga::task'
                                               ],
                                     'comm' => 'no CONSTRUCTOR',
                                     'att' => {
                                                'job.cpu_time' => {
                                                                    'unit' => 'seconds',
                                                                    'mode' => 'ReadOnly',
                                                                    'desc' => 'number of CPU seconds consumed by the job',
                                                                    'name' => 'job.cpu_time',
                                                                    'val' => '-',
                                                                    'type' => 'Int',
                                                                    'opt' => 'optional',
                                                                    'note' => '- aggregated across all processes/threads'
                                                                  },
                                                'ExecutionHosts' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadOnly',
                                                                      'desc' => 'list of host names or IP addresses allocated to run this job',
                                                                      'name' => 'ExecutionHosts',
                                                                      'val' => '-',
                                                                      'type' => 'Vector String',
                                                                      'opt' => 'optional',
                                                                      'note' => '-'
                                                                    },
                                                'job.memory_use' => {
                                                                      'unit' => 'megabyte',
                                                                      'mode' => 'ReadOnly',
                                                                      'desc' => 'current aggregate memory usage',
                                                                      'name' => 'job.memory_use',
                                                                      'val' => '0.0',
                                                                      'type' => 'Float',
                                                                      'opt' => 'optional',
                                                                      'note' => '- metric becomes \'Final\' after job completion, and then shows the memory high water mark'
                                                                    },
                                                'job.signal' => {
                                                                  'unit' => '1',
                                                                  'mode' => 'ReadOnly',
                                                                  'desc' => 'fires as a job receives a signal, and has a value indicating the signal number',
                                                                  'name' => 'job.signal',
                                                                  'val' => '-',
                                                                  'type' => 'Int',
                                                                  'opt' => 'optional',
                                                                  'note' => '- no guarantees are made that any or all signals can be notified by this metric'
                                                                },
                                                'JobID' => {
                                                             'unit' => '',
                                                             'mode' => 'ReadOnly',
                                                             'desc' => 'SAGA representation of the job identifier',
                                                             'name' => 'JobID',
                                                             'val' => '-',
                                                             'type' => 'String',
                                                             'opt' => '',
                                                             'note' => '- format: as described earlier'
                                                           },
                                                'job.state_detail' => {
                                                                        'unit' => '1',
                                                                        'mode' => 'ReadOnly',
                                                                        'desc' => 'fires as a job changes its state detail',
                                                                        'name' => 'job.state_detail',
                                                                        'val' => '-',
                                                                        'type' => 'String',
                                                                        'opt' => 'optional',
                                                                        'note' => ''
                                                                      },
                                                'Finished' => {
                                                                'unit' => '',
                                                                'mode' => 'ReadOnly',
                                                                'desc' => 'time stamp indicating when the job completed',
                                                                'name' => 'Finished',
                                                                'val' => '-',
                                                                'type' => 'Time',
                                                                'opt' => 'optional',
                                                                'note' => ''
                                                              },
                                                'job.performance' => {
                                                                       'unit' => 'FLOPS',
                                                                       'mode' => 'ReadOnly',
                                                                       'desc' => 'current performance',
                                                                       'name' => 'job.performance',
                                                                       'val' => '0.0',
                                                                       'type' => 'Float',
                                                                       'opt' => 'optional',
                                                                       'note' => '- metric becomes \'Final\' after job completion, and then shows the performance high water mark'
                                                                     },
                                                'job.vmemory_use' => {
                                                                       'unit' => 'megabyte',
                                                                       'mode' => 'ReadOnly',
                                                                       'desc' => 'current aggregate virtual memory usage',
                                                                       'name' => 'job.vmemory_use',
                                                                       'val' => '0.0',
                                                                       'type' => 'Float',
                                                                       'opt' => 'optional',
                                                                       'note' => '- metric becomes \'Final\' after job completion, and then shows the virtual memory high water mark'
                                                                     },
                                                'Started' => {
                                                               'unit' => '',
                                                               'mode' => 'ReadOnly',
                                                               'desc' => 'time stamp indicating when the job started running',
                                                               'name' => 'Started',
                                                               'val' => '-',
                                                               'type' => 'Time',
                                                               'opt' => 'optional',
                                                               'note' => ''
                                                             },
                                                'ExitCode' => {
                                                                'unit' => '',
                                                                'mode' => 'ReadOnly',
                                                                'desc' => 'process exit code as collected by the wait(2) series of system calls.',
                                                                'name' => 'ExitCode',
                                                                'val' => '-',
                                                                'type' => 'Int',
                                                                'opt' => 'optional',
                                                                'note' => '- exit code is collected from the process which was started from the \'Executable\' attribute of the job_description object.
- only available in final states, if at all'
                                                              },
                                                'WorkingDirectory' => {
                                                                        'unit' => '',
                                                                        'mode' => 'ReadOnly',
                                                                        'desc' => 'working directory on the execution host',
                                                                        'name' => 'WorkingDirectory',
                                                                        'val' => '-',
                                                                        'type' => 'String',
                                                                        'opt' => 'optional',
                                                                        'note' => '- can be used to determine the location of files staged using relative file paths'
                                                                      },
                                                'Created' => {
                                                               'unit' => '',
                                                               'mode' => 'ReadOnly',
                                                               'desc' => 'time stamp of the job creation in the resource manager',
                                                               'name' => 'Created',
                                                               'val' => '-',
                                                               'type' => 'Time',
                                                               'opt' => 'optional',
                                                               'note' => '- can be interpreted as submission time'
                                                             },
                                                'ServiceURL' => {
                                                                  'unit' => '',
                                                                  'mode' => 'ReadOnly',
                                                                  'desc' => 'URL representation of the job::service instance managing this job',
                                                                  'name' => 'ServiceURL',
                                                                  'val' => '-',
                                                                  'type' => 'String',
                                                                  'opt' => '',
                                                                  'note' => '- can be used for a job::service CONSTRUCTOR.'
                                                                },
                                                'Termsig' => {
                                                               'unit' => '',
                                                               'mode' => 'ReadOnly',
                                                               'desc' => 'signal number which caused the job to exit',
                                                               'name' => 'Termsig',
                                                               'val' => '-',
                                                               'type' => 'Int',
                                                               'opt' => 'optional',
                                                               'note' => '- only available in final states, if at all Metrics: name:  job.state desc:  fires on state changes of the job, and has the literal value of the job state enum. mode:  ReadOnly unit:  1 type:  Enum value: New notes: - the state metric is inherited from saga::task, but has a different set of possible values
- see description of job states above'
                                                             }
                                              },
                                     'name' => 'job',
                                     'def' => {
                                                'resume' => {
                                                              'detail' => '    - resume
      Purpose:  Ask the resource manager to perform a resume
                operation on a suspended job.
      Format:   resume             (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - the job is in \'Suspended\' state.
      PostCond: - the job is in \'Running\' state.
      Perms:    Exec (job can be controlled).
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the job is not in \'Suspended\' state, an
                  \'IncorrectState\' exception is thrown.
',
                                                              'comm' => '',
                                                              'temp' => '',
                                                              'precom' => '',
                                                              'is_void' => 1,
                                                              'name' => 'resume',
                                                              'idx' => 6
                                                            },
                                                'checkpoint' => {
                                                                  'detail' => '    - checkpoint
      Purpose:  Ask the resource manager to initiate a checkpoint
                operation on a running job.
      Format:   checkpoint         (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - the job is in \'Running\' state.
      PostCond: - the job is in \'Running\' state.
                - the job was checkpointed.
      Perms:    Exec (job can be controlled).
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - The semantics of checkpoint(), and the actions
                  taken to initiate a checkpoint, are resource
                  manager specific.  In particular, the
                  implementation or backend can trigger either 
                  a system level or an application level
                - if the job is not in \'Running\' state, 
                  an \'IncorrectState\' exception is thrown.
',
                                                                  'comm' => '',
                                                                  'temp' => '',
                                                                  'precom' => '',
                                                                  'is_void' => 1,
                                                                  'name' => 'checkpoint',
                                                                  'idx' => 7
                                                                },
                                                'get_stderr' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'get_stderr',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'stderr',
                                                                                  'default' => undef,
                                                                                  'type' => 'opaque'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - get_stderr
      Purpose:  retrieve error stream of job
      Format:   get_stderr         (out opaque stderr)
      Inputs:   -
      InOuts:   -
      Outputs:  stderr:             standard error stream for
                                    the job
      PreCond:  - the job is interactive.
      PostCond: - the jobs standard error stream is available 
                  from stderr.
      Perms:    Read (application can read the jobs stderr).
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the preconditions are met, but the standard
                  error stream is not available for some 
                  reason, a \'DoesNotExist\' exception is thrown.
                - the stream MUST be valid until the job reaches
                  a final state.  If it is, for some reason,
                  disconnected earlier, a language typical error
                  message is thrown (e.g. EBADF could be 
                  returned on reads on that stream in C).
                - if the job is not interactive, e.g. it was
                  submitted with the \'Interactive\' attribute set
                  to \'False\', an \'IncorrectState\' exception is
                  thrown.
                - if the job is not in \'New\' state, it is not
                  guaranteed that the job did write data on
                  its standard error stream before, which are
                  then not returned on the returned stream.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 4
                                                                },
                                                'migrate' => {
                                                               'comm' => '',
                                                               'precom' => '',
                                                               'name' => 'migrate',
                                                               'params' => [
                                                                             {
                                                                               'mode' => 'in',
                                                                               'name' => 'jd',
                                                                               'default' => undef,
                                                                               'type' => 'job_description'
                                                                             }
                                                                           ],
                                                               'detail' => '    - migrate
      Purpose:  Ask the resource manager to migrate a job.
      Format:   migrate            (in job_description jd);
      Inputs:   jd:                 new job parameters to apply
                                    when the job is migrated
      InOuts:   -
      Outputs:  -
      PreCond:  - the job is in \'Running\' or \'Suspended\' state.
      PostCond: - the job keeps its state.
                - jd is deep copied (no state is shared
                  after method invocation)
                - the job reflects the attributes specified in
                  the job_description.
      Perms:    Exec (job can be controlled).
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                AuthorizationFailed
                AuthenticationFailed
                PermissionDenied
                Timeout
                NoSuccess
      Notes:    - jd might indicate new resource 
                  requirements, for example.
                - the action of migration might change the job 
                  identifier within the resource manager.
                - ideally, the submitted job description was
                  obtained by get_job_description(), and then
                  changed by the application.  This is not a
                  requirement though.
                - if the job is not in \'Running\' or \'Suspended\' 
                  state, an \'IncorrectState\' exception is thrown.
                - the method can call the same exceptions as
                  the submit_job() and run() methods, in
                  particular in respect to an incorrect
                  job_description.
',
                                                               'temp' => '',
                                                               'is_void' => 0,
                                                               'idx' => 8
                                                             },
                                                'signal' => {
                                                              'comm' => '',
                                                              'precom' => '',
                                                              'name' => 'signal',
                                                              'params' => [
                                                                            {
                                                                              'mode' => 'in',
                                                                              'name' => 'signum',
                                                                              'default' => undef,
                                                                              'type' => 'int'
                                                                            }
                                                                          ],
                                                              'detail' => '    - signal
      Purpose:  Ask the resource manager to deliver an arbitrary
                signal to a dispatched job.
      Format:   signal               (in int signum);	
      Inputs:   signum:               signal number to be
                                      delivered
      InOuts:   -
      Outputs:  -
      PreCond:  - job is in \'Running\' or \'Suspended\' state.
      PostCond: - the signal was delivered to the job.
      Perms:    Exec (job can be controlled).
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - there is no guarantee that the signal number 
                  specified is valid for the operating system 
                  on the execution host where the job is 
                  running, or that the signal can be delivered.
                - if the signal number is not supported by the
                  backend, a \'BadParameter\' exception is thrown.
                - if the job is not in \'Running\' or \'Suspended\'
                  state, an \'IncorrectState\' exception is 
                  thrown.
',
                                                              'temp' => '',
                                                              'is_void' => 0,
                                                              'idx' => 9
                                                            },
                                                'suspend' => {
                                                               'detail' => '    - suspend
      Purpose:  Ask the resource manager to perform a suspend
                operation on the running job.
      Format:   suspend       (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - the job is in \'Running\' state.
      PostCond: - the job is in \'Suspended\' state.
      Perms:    Exec (job can be controlled).
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the job is not in \'Running\' state, an
                  \'IncorrectState\' exception is thrown.
',
                                                               'comm' => 'job management',
                                                               'temp' => '',
                                                               'precom' => '    Job Management Methods:
    -----------------------
',
                                                               'is_void' => 1,
                                                               'name' => 'suspend',
                                                               'idx' => 5
                                                             },
                                                'get_stdin' => {
                                                                 'comm' => '',
                                                                 'precom' => '',
                                                                 'name' => 'get_stdin',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'stdin',
                                                                                 'default' => undef,
                                                                                 'type' => 'opaque'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - get_stdin 
      Purpose:  retrieve input stream for a job.
      Format:   get_stdin          (out opaque stdin)
      Inputs:   -
      InOuts:   -
      Outputs:  stdin:              standard input stream for
                                    the job
      PreCond:  - the job is interactive.
      PostCond: - the jobs standard input stream is available 
                  at stdin.
      Perms:    Write (application can write to the jobs stdin).
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the preconditions are met, but the standard
                  input stream is not available for some 
                  reason, a \'DoesNotExist\' exception is thrown.
                - the stream MUST be valid until the job reaches
                  a final state.  If it is, for some reason,
                  disconnected earlier, a language typical error
                  message is thrown (e.g. EBADF could be 
                  returned on writes on that stream in C).
                - if the job is not interactive, e.g. it was
                  submitted with the \'Interactive\' attribute set
                  to \'False\', an \'IncorrectState\' exception is
                  thrown.
                - if the job is not in \'New\' state, it is not
                  guaranteed that the job did not receive other
                  data on its standard input stream before.
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 2
                                                               },
                                                'DESTRUCTOR' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'DESTRUCTOR',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'obj',
                                                                                  'default' => undef,
                                                                                  'type' => 'job'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR        (in  job  obj)
      Inputs:   obj:               the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - the object destruction does not imply a 
                  call to cancel() for the job instance.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 0
                                                                },
                                                'get_stdout' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'get_stdout',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'stdout',
                                                                                  'default' => undef,
                                                                                  'type' => 'opaque'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - get_stdout
      Purpose:  retrieve output stream of job
      Format:   get_stdout         (out opaque stdout)
      Inputs:   -
      InOuts:   -
      Outputs:  stdout:             standard output stream for
                                    the job
      PreCond:  - the job is interactive.
      PostCond: - the jobs standard output stream is available 
                  from stdout.
      Perms:    Read (application can read the jobs stdout).
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the preconditions are met, but the standard
                  output stream is not available for some 
                  reason, a \'DoesNotExist\' exception is thrown.
                - the stream MUST be valid until the job reaches
                  a final state.  If it is, for some reason,
                  disconnected earlier, a language typical error
                  message is thrown (e.g. EBADF could be 
                  returned on reads on that stream in C).
                - if the job is not interactive, e.g. it was
                  submitted with the \'Interactive\' attribute set
                  to \'False\', an \'IncorrectState\' exception is
                  thrown.
                - if the job is not in \'New\' state, it is not
                  guaranteed that the job did write data on
                  its standard output stream before, which are
                  then not returned on the returned stream.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 3
                                                                },
                                                'get_job_description' => {
                                                                           'comm' => 'job inspection',
                                                                           'precom' => '',
                                                                           'name' => 'get_job_description',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'jd',
                                                                                           'default' => undef,
                                                                                           'type' => 'job_description'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - get_job_description
      Purpose:  Retrieve the job_description which was used to
                submit this job instance.
      Format:   get_job_description (out job_description jd);
      Inputs:   -
      InOuts:   -
      Outputs:  jd:                  a job_description object
      PreCond:  -
      PostCond: - jd is deep copied (no state is shared
                  after method invocation)
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - There are cases when the job_description is not
                  available.  This may include cases when
                  the job was not submitted through
                  SAGA and get_job() was used to retrieve the
                  job, or when this state information has been
                  lost (e.g. the client application restarts and
                  the particular SAGA implementation did not
                  persist the information).  In that case, a
                  \'DoesNotExist\' exception is thrown, with a
                  descriptive error message.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 1
                                                                         }
                                              },
                                     'impl' => [
                                                 'saga::async',
                                                 'saga::attributes',
                                                 'saga::permissions'
                                               ],
                                     'type' => 'class',
                                     'idx' => 3
                                   },
                          'job_description' => {
                                                 'comm' => '',
                                                 'att' => {
                                                            'Queue' => {
                                                                         'unit' => '',
                                                                         'mode' => 'ReadWrite',
                                                                         'desc' => 'name of a queue to place the job into',
                                                                         'name' => 'Queue',
                                                                         'val' => '-',
                                                                         'type' => 'String',
                                                                         'opt' => 'optional',
                                                                         'note' => '- While SAGA itself does not define the semantics of a "queue", many backend systems can make use of this attribute.
- not supported by JSDL'
                                                                       },
                                                            'JobStartTime' => {
                                                                                'unit' => '',
                                                                                'mode' => 'ReadWrite',
                                                                                'desc' => 'time at which a job should be scheduled',
                                                                                'name' => 'JobStartTime',
                                                                                'val' => '-',
                                                                                'type' => 'Int',
                                                                                'opt' => 'optional',
                                                                                'note' => '- Could be viewed as a desired job start time, but that is up to the resource manager.
- format: number of seconds since epoch
- available in DRMAA
- not supported by JSDL'
                                                                              },
                                                            'CPUArchitecture' => {
                                                                                   'unit' => '',
                                                                                   'mode' => 'ReadWrite',
                                                                                   'desc' => 'compatible processor for job submission',
                                                                                   'name' => 'CPUArchitecture',
                                                                                   'val' => '-',
                                                                                   'type' => 'String',
                                                                                   'opt' => 'optional',
                                                                                   'note' => '- allowed values as specified in JSDL
- available in JSDL
- semantics as defined by JSDL'
                                                                                 },
                                                            'Error' => {
                                                                         'unit' => '',
                                                                         'mode' => 'ReadWrite',
                                                                         'desc' => 'pathname of the standard error file',
                                                                         'name' => 'Error',
                                                                         'val' => '-',
                                                                         'type' => 'String',
                                                                         'opt' => 'optional',
                                                                         'note' => '- available in JSDL, DRMAA
- semantics as specified by JSDL
- will not be used if \'Interactive\' is \'True\''
                                                                       },
                                                            'NumberOfProcesses' => {
                                                                                     'unit' => '',
                                                                                     'mode' => 'ReadWrite',
                                                                                     'desc' => 'total number of processes to be started',
                                                                                     'name' => 'NumberOfProcesses',
                                                                                     'val' => '\'1\'',
                                                                                     'type' => 'Int',
                                                                                     'opt' => 'optional',
                                                                                     'note' => '- available in JSDL, SPMD extension
- semantics as defined in JSDL'
                                                                                   },
                                                            'JobProject' => {
                                                                              'unit' => '',
                                                                              'mode' => 'ReadWrite',
                                                                              'desc' => 'name of a account or project name',
                                                                              'name' => 'JobProject',
                                                                              'val' => '-',
                                                                              'type' => 'String',
                                                                              'opt' => 'optional',
                                                                              'note' => '- While SAGA itself does not define the semantics of an "account" or "project", many backend systems can make use of this attribute for the purpose of accounting.
- available in JSDL
- semantics as defined by JSDL'
                                                                            },
                                                            'WallTimeLimit' => {
                                                                                 'unit' => '',
                                                                                 'mode' => 'ReadWrite',
                                                                                 'desc' => 'hard limit for the total job runtime.',
                                                                                 'name' => 'WallTimeLimit',
                                                                                 'val' => '-',
                                                                                 'type' => 'Int',
                                                                                 'opt' => 'optional',
                                                                                 'note' => '- intended to provide hints to the scheduler.
- available in JSDL, DRMAA
- semantics as defined in JSDL'
                                                                               },
                                                            'Output' => {
                                                                          'unit' => '',
                                                                          'mode' => 'ReadWrite',
                                                                          'desc' => 'pathname of the standard output file',
                                                                          'name' => 'Output',
                                                                          'val' => '-',
                                                                          'type' => 'String',
                                                                          'opt' => 'optional',
                                                                          'note' => '- available in JSDL, DRMAA
- semantics as specified by JSDL
- will not be used if \'Interactive\' is \'True\''
                                                                        },
                                                            'JobContact' => {
                                                                              'unit' => '',
                                                                              'mode' => 'ReadWrite',
                                                                              'desc' => 'set of endpoints describing where to report job state transitions.',
                                                                              'name' => 'JobContact',
                                                                              'val' => '-',
                                                                              'type' => 'Vector String',
                                                                              'opt' => 'optional',
                                                                              'note' => '- format: URI (e.g. fax:+123456789, sms:+123456789, mailto:joe@doe.net).
- available in DRMAA
- not supported by JSDL'
                                                                            },
                                                            'Input' => {
                                                                         'unit' => '',
                                                                         'mode' => 'ReadWrite',
                                                                         'desc' => 'pathname of the standard input file',
                                                                         'name' => 'Input',
                                                                         'val' => '-',
                                                                         'type' => 'String',
                                                                         'opt' => 'optional',
                                                                         'note' => '- available in JSDL, DRMAA
- semantics as specified by JSDL
- will not be used if \'Interactive\' is \'True\''
                                                                       },
                                                            'Executable' => {
                                                                              'unit' => '',
                                                                              'mode' => 'ReadWrite
      //   value: \'\'
      //   notes: - this is the only required attribute.  
      //          - can be a full pathname, a pathname 
      //            relative to the \'WorkingDirectory\' as 
      //            evaluated on the execution host, or
      //            a executable name to be searched in the
      //            target host\'s PATH environment (if 
      //            available).
      //          - available in JSDL, DRMAA
      //          - semantics as defined in JSDL
      //
      //   name:  Arguments
      //   desc:  positional parameters for the command. 
      //   mode:  ReadWrite',
                                                                              'desc' => 'command to execute. type:  String',
                                                                              'name' => 'Executable',
                                                                              'val' => '-',
                                                                              'type' => 'Vector String',
                                                                              'opt' => 'optional',
                                                                              'note' => '- available in JSDL, DRMAA semantics as specified by JSDL'
                                                                            },
                                                            'Environment' => {
                                                                               'unit' => '',
                                                                               'mode' => 'ReadWrite',
                                                                               'desc' => 'set of environment variables for the job',
                                                                               'name' => 'Environment',
                                                                               'val' => '-',
                                                                               'type' => 'Vector String',
                                                                               'opt' => 'optional',
                                                                               'note' => '- exported into the job environment
- format: \'key=value\'
- available in JSDL, DRMAA
- semantics as specified by JSDL'
                                                                             },
                                                            'CandidateHosts' => {
                                                                                  'unit' => '',
                                                                                  'mode' => 'ReadWrite',
                                                                                  'desc' => 'list of host names which are to be considered by the resource manager as candidate targets',
                                                                                  'name' => 'CandidateHosts',
                                                                                  'val' => '-',
                                                                                  'type' => 'Vector String',
                                                                                  'opt' => 'optional',
                                                                                  'note' => '- available in JSDL
- semantics as defined by JSDL'
                                                                                },
                                                            'TotalPhysicalMemory' => {
                                                                                       'unit' => '',
                                                                                       'mode' => 'ReadWrite',
                                                                                       'desc' => 'Estimated amount of memory the job requires',
                                                                                       'name' => 'TotalPhysicalMemory',
                                                                                       'val' => '-',
                                                                                       'type' => 'Float',
                                                                                       'opt' => 'optional',
                                                                                       'note' => '- unit is in MegaByte
- memory usage of the job is aggregated across all processes of the job
- available in JSDL
- semantics as defined by JSDL'
                                                                                     },
                                                            'ProcessesPerHost' => {
                                                                                    'unit' => '',
                                                                                    'mode' => 'ReadWrite',
                                                                                    'desc' => 'number of processes to be started per host',
                                                                                    'name' => 'ProcessesPerHost',
                                                                                    'val' => '\'1\'',
                                                                                    'type' => 'Int',
                                                                                    'opt' => 'optional',
                                                                                    'note' => '- available in JSDL, SPMD extension
- semantics as defined in JSDL'
                                                                                  },
                                                            'TotalCPUTime' => {
                                                                                'unit' => '',
                                                                                'mode' => 'ReadWrite',
                                                                                'desc' => 'estimate total number of CPU seconds which the job will require.',
                                                                                'name' => 'TotalCPUTime',
                                                                                'val' => '-',
                                                                                'type' => 'Int',
                                                                                'opt' => 'optional',
                                                                                'note' => '- intended to provide hints to the scheduler.
- available in JSDL, DRMAA
- semantics as defined in JSDL'
                                                                              },
                                                            'ThreadsPerProcess' => {
                                                                                     'unit' => '',
                                                                                     'mode' => 'ReadWrite',
                                                                                     'desc' => 'number of threads to start per process',
                                                                                     'name' => 'ThreadsPerProcess',
                                                                                     'val' => '\'1\'',
                                                                                     'type' => 'Int',
                                                                                     'opt' => 'optional',
                                                                                     'note' => '- available in JSDL, SPMD extension
- semantics as defined in JSDL'
                                                                                   },
                                                            'SPMDVariation' => {
                                                                                 'unit' => '',
                                                                                 'mode' => 'ReadWrite',
                                                                                 'desc' => 'SPMD job type and startup mechanism',
                                                                                 'name' => 'SPMDVariation',
                                                                                 'val' => '-',
                                                                                 'type' => 'String',
                                                                                 'opt' => 'optional',
                                                                                 'note' => '- as defined in the SPMD extension of JSDL notes: - available in JSDL, SPMD extension
- semantics as defined in JSDL
- the SPMD JSDL extension defines the value to be an URI.  For simplicity, SAGA allows the following strings, which map into the respective URIs: MPI, GridMPI, IntelMPI, LAM-MPI, MPICH1, MPICH2, MPICH-GM, MPICH-MX, MVAPICH, MVAPICH2, OpenMP, POE, PVM, None
- the value \'\' (no value, default) indicates that the application is not a SPMD application.
- as JSDL, SAGA allows other arbitrary values. The implementation must clearly document which values are supported.'
                                                                               },
                                                            'OperatingSystemType' => {
                                                                                       'unit' => '',
                                                                                       'mode' => 'ReadWrite',
                                                                                       'desc' => 'compatible operating system for job submission',
                                                                                       'name' => 'OperatingSystemType',
                                                                                       'val' => '-',
                                                                                       'type' => 'String',
                                                                                       'opt' => 'optional',
                                                                                       'note' => '- allowed values as specified in JSDL
- available in JSDL
- semantics as defined by JSDL'
                                                                                     },
                                                            'WorkingDirectory' => {
                                                                                    'unit' => '',
                                                                                    'mode' => 'ReadWrite',
                                                                                    'desc' => 'working directory for the job',
                                                                                    'name' => 'WorkingDirectory',
                                                                                    'val' => '\'.\'',
                                                                                    'type' => 'String',
                                                                                    'opt' => 'optional',
                                                                                    'note' => '- gets created if it does not exist
- available in JSDL, DRMAA
- semantics as specified by JSDL'
                                                                                  },
                                                            'Interactive' => {
                                                                               'unit' => '',
                                                                               'mode' => 'ReadWrite',
                                                                               'desc' => 'run the job in interactive mode',
                                                                               'name' => 'Interactive',
                                                                               'val' => '\'False\'',
                                                                               'type' => 'Bool',
                                                                               'opt' => 'optional',
                                                                               'note' => '- this implies that stdio streams will stay connected to the submitter after job submission, and during job execution.
- if an implementation cannot handle interactive jobs, and this attribute is present, and \'True\', the job creation MUST throw an \'IncorrectParameter\' error with a descriptive error message.
- not supported by JSDL, DRMAA'
                                                                             },
                                                            'TotalCPUCount' => {
                                                                                 'unit' => '',
                                                                                 'mode' => 'ReadWrite',
                                                                                 'desc' => 'total number of cpus requested for this job',
                                                                                 'name' => 'TotalCPUCount',
                                                                                 'val' => '\'1\'',
                                                                                 'type' => 'Int',
                                                                                 'opt' => 'optional',
                                                                                 'note' => '- available in JSDL, DRMAA
- semantics as defined in JSDL'
                                                                               },
                                                            'Cleanup' => {
                                                                           'unit' => '',
                                                                           'mode' => 'ReadWrite',
                                                                           'desc' => 'defines if output files get removed after the job finishes',
                                                                           'name' => 'Cleanup',
                                                                           'val' => '\'Default\'',
                                                                           'type' => 'String',
                                                                           'opt' => 'optional',
                                                                           'note' => '- can have the Values \'True\', \'False\', and \'Default\'
- On \'False\', output files MUST be kept after job the finishes
- On \'True\', output files MUST be deleted after job the finishes
- On \'Default\', the behavior is defined by the implementation or the backend.
- translates into \'DeleteOnTermination\' elements in JSDL'
                                                                         },
                                                            'FileTransfer' => {
                                                                                'unit' => '',
                                                                                'mode' => 'ReadWrite',
                                                                                'desc' => 'a list of file transfer directives',
                                                                                'name' => 'FileTransfer',
                                                                                'val' => '-',
                                                                                'type' => 'Vector String',
                                                                                'opt' => 'optional',
                                                                                'note' => '- translates into jsdl:DataStaging
- used to specify pre- and post-staging
- staging is part of the \'Running\' state
- syntax similar to LSF (see earlier notes)
- available in JSDL, DRMAA
- semantics as specified in JSDL'
                                                                              }
                                                          },
                                                 'def' => {
                                                            'DESTRUCTOR' => {
                                                                              'comm' => '',
                                                                              'precom' => '',
                                                                              'name' => 'DESTRUCTOR',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'obj',
                                                                                              'default' => undef,
                                                                                              'type' => 'job_description'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR        (in  job_description obj)
      Inputs:   obj:               the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    -
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 1
                                                                            },
                                                            'CONSTRUCTOR' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'CONSTRUCTOR',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'out',
                                                                                               'name' => 'obj',
                                                                                               'default' => undef,
                                                                                               'type' => 'job_description'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR       (out job_description obj)
      Inputs:   -
      InOuts:   -
      Outputs:  obj:               the newly created object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                NoSuccess
      Notes:    - a job_description is not associated with a
                  session, but can be used for job services
                  from different sessions.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 0
                                                                             }
                                                          },
                                                 'impl' => [
                                                             'saga::object',
                                                             'saga::attributes'
                                                           ],
                                                 'name' => 'job_description',
                                                 'idx' => 1,
                                                 'type' => 'class'
                                               },
                          'state' => {
                                       'comm' => '',
                                       'def' => {
                                                  '6' => {
                                                           'comm' => '',
                                                           'name' => 'Suspended'
                                                         },
                                                  '2,' => {
                                                            'comm' => 'same as in saga::task::state',
                                                            'name' => 'Running'
                                                          },
                                                  '4,' => {
                                                            'comm' => 'same as in saga::task::state',
                                                            'name' => 'Canceled'
                                                          },
                                                  '5,' => {
                                                            'comm' => 'same as in saga::task::state',
                                                            'name' => 'Failed'
                                                          },
                                                  '1,' => {
                                                            'comm' => 'same as in saga::task::state',
                                                            'name' => 'New'
                                                          },
                                                  '3,' => {
                                                            'comm' => 'same as in saga::task::state',
                                                            'name' => 'Done'
                                                          }
                                                },
                                       'name' => 'state',
                                       'idx' => 0,
                                       'type' => 'enum'
                                     }
                        },
          'saga.monitoring' => {
                                 'monitorable' => {
                                                    'comm' => '// SAGA objects which provide metrics and can thus be
    // monitored implement the monitorable interface
    SAGA objects which provide metrics and can thus bemonitored implement the monitorable interfaceintrospection',
                                                    'def' => {
                                                               'add_callback' => {
                                                                                   'comm' => 'callback handling',
                                                                                   'precom' => '    // callback handling
',
                                                                                   'name' => 'add_callback',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'name',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'cb',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'callback'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'out',
                                                                                                   'name' => 'cookie',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'int'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - add_callback
      Purpose:  add a callback to the specified metric
      Format:   add_callback       (in  string      name,
                                    in  callback    cb,
                                    out int         cookie);
      Inputs:   name:               identifies the metric to 
                                    which cb
                                    is to be added
                cb:                 reference to callback class
                                    instance to be registered
      InOuts:   -
      Outputs:  cookie:             handle for callback removal
      PreCond:  -
      PostCond: - the callback is registered on the metric.
      Perms:    Read on the metric.
      Throws:   NotImplemented
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
                NoSuccess
      Notes:    - notes to the add_callback method of the metric
                  class apply.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 2
                                                                                 },
                                                               'list_metrics' => {
                                                                                   'comm' => '',
                                                                                   'precom' => '    // introspection
',
                                                                                   'name' => 'list_metrics',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'out',
                                                                                                   'name' => 'names',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'array<string>'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - list_metrics
      Purpose:  list all metrics associated with the object
      Format:   list_metrics       (out array<string>   names);
      Inputs:   -
      InOuts:   -
      Outputs:  names:              array of names identifying
                                    the metrics associated with
                                    the object instance
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - several SAGA objects are required to expose
                  certain metrics (e.g. \'task.state\').  However,
                  in general that assumption cannot be made, as
                  implementations might be unable to provide
                  metrics.  In particular, listed metrics might
                  actually be unavailable.
                - no order is implied on the returned array
                - the returned array is guaranteed to have no
                  double entries (names are unique)
                - an \'AuthenticationFailed\', 
                  \'AuthorizationFailed\' or \'PermissionDenied\'
                  exception indicates that the current session
                  is not allowed to list the available metrics.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to list the
                  available metrics.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 0
                                                                                 },
                                                               'get_metric' => {
                                                                                 'comm' => '',
                                                                                 'precom' => '',
                                                                                 'name' => 'get_metric',
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'in',
                                                                                                 'name' => 'name',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'string'
                                                                                               },
                                                                                               {
                                                                                                 'mode' => 'out',
                                                                                                 'name' => 'metric',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'metric'
                                                                                               }
                                                                                             ],
                                                                                 'detail' => '    - get_metric
      Purpose:  returns a metric instance, identified by name
      Format:   get_metric         (in  string  name,
                                    out metric  metric);
      Inputs:   name:               name of the metric to be
                                    returned
      InOuts:   -
      Outputs:  metric:             metric instance identified 
                                    by name
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - multiple calls of this method with the same
                  value for name return multiple identical
                  instances (copies) of the metric.
                - a \'DoesNotExist\' exception indicates that the
                  backend does not know the metric with the
                  given name.
                - an \'AuthenticationFailed\', 
                  \'AuthorizationFailed\' or \'PermissionDenied\'
                  exception indicates that the current session
                  is not allowed to obtain the named metric.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to return the
                  named metric.
',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'idx' => 1
                                                                               },
                                                               'remove_callback' => {
                                                                                      'comm' => '',
                                                                                      'precom' => '',
                                                                                      'name' => 'remove_callback',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'in',
                                                                                                      'name' => 'cookie',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'int'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - remove_callback
      Purpose:  remove a callback from the specified metric
      Format:   remove_callback    (in  string  name,
                                    in  int     cookie);
      Inputs:   name:               identifies the metric for 
                                    which cb is to be removed
                cookie:             identifies the cb to be
                                    removed
      InOuts:   -
      Outputs:  -
      PreCond:  - the callback was registered on the metric.
      PostCond: - 
      Perms:    Read on the metric.
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - notes to the remove_callback method of the 
                  metric class apply
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 3
                                                                                    }
                                                             },
                                                    'name' => 'monitorable',
                                                    'idx' => 2,
                                                    'type' => 'interface'
                                                  },
                                 'callback' => {
                                                 'comm' => '// callbacks are used for asynchronous notification of
    // metric changes (events)
    callbacks are used for asynchronous notification ofmetric changes (events)',
                                                 'def' => {
                                                            'cb' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'cb',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'mt',
                                                                                      'default' => undef,
                                                                                      'type' => 'monitorable'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'metric',
                                                                                      'default' => undef,
                                                                                      'type' => 'metric'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'ctx',
                                                                                      'default' => undef,
                                                                                      'type' => 'context'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'keep',
                                                                                      'default' => undef,
                                                                                      'type' => 'bool'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - cb
      Purpose:  asynchronous handler for metric changes
      Format:   cb                 (in  monitorable mt,
                                    in  metric      metric,
                                    in  context     ctx,
                                    out bool        keep);
      Inputs:   mt:                 the saga monitorable object
                                    which causes the callback
                                    invocation
                metric:             the metric causing the
                                    callback invocation
                ctx:                the context associated with
                                    the callback causing entity
      InOuts:   -
      Outputs:  keep:               indicates if callback stays
                                    registered
      PreCond:  - the passed context is authenticated.
      PostCond: - if \'keep\' is returned as true, the callback
                  stays registered, and will be invoked again on
                  the next metric update.
                - if \'keep\' is returned as false, the callback
                  gets unregistered, and will not be invoked
                  again on metric updates, unless it gets
                  re-added by the user.
      Perms:    -
      Throws:   NotImplemented
                AuthorizationFailed
      Notes:    - \'metric\' is the metric the callback is
                  invoked on - that means that this metric
                  recently changed.  Note that this change is
                  semantically defined by the metric, e.g. the
                  string of the \'value\' attribute of the metric
                  might have the same value in two subsequent
                  invocations of the callback.
                - \'mt\' is the monitorable object the metric 
                  \'metric\' belongs to.
                - the context \'ctx\' is the context which allows
                  the callback to authorize the metric change.
                  If the cb method decides not to authorize this
                  particular invocation, it MUST throw an
                  \'AuthorizationFailed\' exception.
                - if no context is available, a context of type 
                  \'Unknown\' is passed, with no attributes
                  attached.  Note that this can also indicate
                  that a non-authenticated party connected.
                - a callback can be added to a metric multiple
                  times.  A \'false\' return value (no keep) will 
                  remove only one registration, and keep the 
                  others.
                - a callback can be added to multiple metrics at
                  the same time.  A false return (no keep) will
                  only remove the registration on the metric the
                  callback was invoked on.  
                - the application must ensure appropriate locking
                  of callback instances which are used with multiple
                  metrics.
                - a callback added to exactly one metric exactly
                  once is guaranteed to be active at most once at
                  any given time.  That implies that the SAGA
                  implementation MUST queue pending requests
                  until a callback invocation is finished.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 0
                                                                    }
                                                          },
                                                 'name' => 'callback',
                                                 'idx' => 0,
                                                 'type' => 'interface'
                                               },
                                 'metric' => {
                                               'comm' => '// a metric represents an entity / value to be monitored.
    a metric represents an entity / value to be monitored.',
                                               'att' => {
                                                          'Value' => {
                                                                       'unit' => '',
                                                                       'mode' => 'depending on the mode attribute above',
                                                                       'desc' => 'value of the metric',
                                                                       'name' => 'Value',
                                                                       'val' => '-',
                                                                       'type' => 'String',
                                                                       'opt' => '',
                                                                       'note' => 'see description of value formatting below'
                                                                     },
                                                          'Unit' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadOnly',
                                                                      'desc' => 'unit of the metric',
                                                                      'name' => 'Unit',
                                                                      'val' => '\'String\', \'Int\', \'Enum\', \'Float\', \'Bool\', 
      //          \'Time\' or \'Trigger\'',
                                                                      'type' => 'String
      //
      //   name:  Type
      //   desc:  value type of the metric
      //   mode:  ReadOnly
      //   type:  String',
                                                                      'opt' => '',
                                                                      'note' => ''
                                                                    },
                                                          'Description' => {
                                                                             'unit' => '',
                                                                             'mode' => 'ReadOnly',
                                                                             'desc' => 'description of the metric',
                                                                             'name' => 'Description',
                                                                             'val' => '\'ReadOnly\', \'ReadWrite\' or \'Final\'',
                                                                             'type' => 'String
      //
      //   name:  Mode
      //   desc:  access mode of the metric
      //   mode:  ReadOnly
      //   type:  String',
                                                                             'opt' => '',
                                                                             'note' => ''
                                                                           },
                                                          'Name' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadOnly',
                                                                      'desc' => 'name of the metric',
                                                                      'name' => 'Name',
                                                                      'val' => '-',
                                                                      'type' => 'String',
                                                                      'opt' => '',
                                                                      'note' => 'naming conventions as described below apply'
                                                                    }
                                                        },
                                               'def' => {
                                                          'fire' => {
                                                                      'detail' => '    - fire
      Purpose:  push a new metric value to the backend
      Format:   fire               (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - the metric is not \'Final\'.
                - the metric is \'ReadWrite\'
      PostCond: - callbacks registered on the metric are
                  invoked.
      Perms:    Write
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - \'IncorrectState\' is thrown if the metric is 
                  \'Final\'.
                - \'PermissionDenied\' is thrown if the metric is 
                  not \'ReadWrite\' -- That also holds for a once
                  writable metric which was flagged \'Final\'.
                  To catch race conditions on this exceptions,
                  the application should try/catch the fire().
                - it is not necessary to change the value of a
                  metric in order to fire it.
                - \'set_attribute ("value", "...") on a metric
                  does NOT imply a fire.  Hence the value can be
                  changed multiple times, but unless fire() is
                  explicitly called, no consumer will notice.
                - if the application invoking fire() has
                  callbacks registered on the metric, these 
                  callbacks are invoked.
                - \'AuthenticationFailed\', \'AuthorizationFailed\' 
                  or \'PermissionDenied\' may get thrown if the
                  current session is not allowed to fire this 
                  metric.
                - a \'Timeout\' or \'NoSuccess\' exception signals 
                  that the implementation could not communicate 
                  the new metric state to the backend.
',
                                                                      'comm' => 'actively signal an event',
                                                                      'temp' => '',
                                                                      'precom' => '',
                                                                      'is_void' => 1,
                                                                      'name' => 'fire',
                                                                      'idx' => 4
                                                                    },
                                                          'add_callback' => {
                                                                              'comm' => 'callback handling',
                                                                              'precom' => '    // manage callbacks on the metric
',
                                                                              'name' => 'add_callback',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'cb',
                                                                                              'default' => undef,
                                                                                              'type' => 'callback'
                                                                                            },
                                                                                            {
                                                                                              'mode' => 'out',
                                                                                              'name' => 'cookie',
                                                                                              'default' => undef,
                                                                                              'type' => 'int'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - add_callback
      Purpose:  add asynchronous notifier callback to watch
                metric changes
      Format:   add_callback       (in  callback cb,
                                    out int      cookie);
      Inputs:   cb:                 callback class instance
      InOuts:   -
      Outputs:  cookie:             handle for this callback,
                                    to be used for removal
      PreCond:  - the metric is not \'Final\'.
      PostCond: - the callback is invoked on metric changes.
      Perms:    Read
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - \'IncorrectState\' is thrown if the metric is 
                  \'Final\'.
                - the \'callback\' method on cb will be invoked on
                  any change of the metric (not only when its
                  value changes)
                - if the \'callback\' method returns true, the
                  callback is kept registered; if it returns
                  false, the callback is called, and is
                  un-registered after completion.  If the
                  callback throws an exception, it stays
                  registered.
                - the cb is passed by reference.
                - the returned cookie uniquely identifies the
                  callback, and can be used to remove it.
                - A \'Timeout\' or \'NoSuccess\' exception is thrown
                  if the implementation cannot invoke the 
                  callback on metric changes.
                - a backend MAY limit the ability to add
                  callbacks - the method may hence cause an 
                  \'AuthenticationFailed\', \'AuthorizationFailed\'
                  or \'PermissionDenied\' exception to be thrown.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 2
                                                                            },
                                                          'DESTRUCTOR' => {
                                                                            'comm' => '',
                                                                            'precom' => '',
                                                                            'name' => 'DESTRUCTOR',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'in',
                                                                                            'name' => 'obj',
                                                                                            'default' => undef,
                                                                                            'type' => 'metric'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR         (in  metric obj)
      Inputs:   obj:                the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - all callbacks registered on the metric are
                  unregistered.
      Perms:    -
      Throws:   -
      Notes:    - if a callback is active at the time of
                  destruction, the destructor MUST block until
                  that callback returns.  The callback is not
                  activated anew during or after that block.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 1
                                                                          },
                                                          'remove_callback' => {
                                                                                 'comm' => '',
                                                                                 'precom' => '',
                                                                                 'name' => 'remove_callback',
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'in',
                                                                                                 'name' => 'cookie',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'int'
                                                                                               }
                                                                                             ],
                                                                                 'detail' => '    - remove_callback
      Purpose:  remove a callback from a metric
      Format:   remove_callback    (in  int      cookie);
      Inputs:   cookie:             handle identifying the cb to
                                    be removed
      InOuts:   -
      Outputs:  -
      PreCond:  - the callback identified by \'cookie\' is
                  registered for that metric.
      PostCond: - the callback identified by \'cookie\' is not
                  active, nor invoked ever again.
      Perms:    Read
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if a callback is active at the time of
                  removal, the call MUST block until
                  that callback returns.  The callback is not
                  activated anew during or after that block.
                - if the callback was removed earlier, or
                  was unregistered by returning false, this call
                  does nothing.
                - the removal only affects the cb identified
                  by \'cookie\', even if the same callback was
                  registered multiple times.
                - if the cookie was not created by adding a
                  callback to this object instance, a
                  \'BadParameter\' is thrown.
                - a \'Timeout\' or \'NoSuccess\' exception is thrown 
                  if the backend cannot guarantee that the 
                  callback gets successfully removed.
                - note that the backend MUST allow the removal of
                  the callback, if it did allow its addition -
                  hence, no authentication, authorization or
                  permission faults are tom be expected.
',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'idx' => 3
                                                                               },
                                                          'CONSTRUCTOR' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'CONSTRUCTOR',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'name',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'desc',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'mode',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'unit',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'type',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'in',
                                                                                             'name' => 'value',
                                                                                             'default' => undef,
                                                                                             'type' => 'string'
                                                                                           },
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'obj',
                                                                                             'default' => undef,
                                                                                             'type' => 'metric'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR        (in  string   name
                                    in  string   desc,
                                    in  string   mode,
                                    in  string   unit,
                                    in  string   type,
                                    in  string   value,
                                    out metric   obj);
      Inputs:   name:               name of the metric
                desc:               description of the metric
                mode:               mode of the metric
                unit:               unit of the metric value
                type:               type of the metric
                value:              initial value of the metric
      InOuts:   -
      Outputs:  obj:                the newly created object
      PreCond:  -
      PostCond: - callbacks can be registered on the metric.
      Perms:    -
      Throws:   NotImplemented
                BadParameter
                Timeout
                NoSuccess
      Notes:    - a metric is not attached to a session, but
                  can be used in different sessions.
                - the string arguments given are used to
                  initialize the attributes of the metric.
                - the constructor ensures that metrics are
                  always initialized completely.  All changes to
                  attributes later will always result in an
                  equally valid metric.
                - incorrectly formatted \'value\' parameter, 
                  invalid \'mode\' and \'type\' parameter, and empty
                  required parameter (all but \'unit\') will cause
                  a \'BadParameter\' exception.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend could not create that specific
                  metric.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 0
                                                                           }
                                                        },
                                               'impl' => [
                                                           'saga::object',
                                                           'saga::attributes'
                                                         ],
                                               'name' => 'metric',
                                               'idx' => 1,
                                               'type' => 'class'
                                             },
                                 'steerable' => {
                                                  'comm' => '// SAGA objects which can be steered by changing their
    // metrics implement the steerable interface
    SAGA objects which can be steered by changing theirmetrics implement the steerable interfacemetric handling',
                                                  'def' => {
                                                             'add_metric' => {
                                                                               'comm' => '',
                                                                               'precom' => '    // metric handling
',
                                                                               'name' => 'add_metric',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'metric',
                                                                                               'default' => undef,
                                                                                               'type' => 'metric'
                                                                                             },
                                                                                             {
                                                                                               'mode' => 'out',
                                                                                               'name' => 'success',
                                                                                               'default' => undef,
                                                                                               'type' => 'bool'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - add_metric
      Purpose:  add a metric instance to the application 
                instance
      Format:   add_metric         (in  metric  metric,
                                    out bool    success);
      Inputs:   metric:             metric to be added
      InOuts:   -
      Outputs:  success:            indicates success
      PreCond:  -
      PostCond: - the metric can be accessed from this
                  application, and possibly from other
                  applications.
      Perms:    Write
      Throws:   NotImplemented
                AlreadyExists
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - a metric is uniquely identified by its name
                  attribute - no two metrics with the same name
                  can be added.
                - any callbacks already registered on the metric
                  stay registered (the state of metric is not
                  changed)
                - an object being steerable does not guarantee
                  that a metric can in fact be added -- the
                  returned boolean indicates if that particular
                  metric could be added.
                - an \'AuthenticationFailed\', 
                  \'AuthorizationFailed\' or \'PermissionDenied\'
                  exception indicates that the current session
                  is not allowed to add metrics to the 
                  steerable.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to add the 
                  metric.
                - if a metric with the same name is already
                  known for the object, an \'AlreadyExists\'
                  exception is thrown.
                - if the steerable instance does not support the
                  addition of new metrics, i.e. if only the
                  default metrics can be steered, an 
                  \'IncorrectState\' exception is thrown.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 0
                                                                             },
                                                             'fire_metric' => {
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 'name',
                                                                                                'default' => undef,
                                                                                                'type' => 'string'
                                                                                              }
                                                                                            ],
                                                                                'comm' => '',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'name' => 'fire_metric',
                                                                                'idx' => 2
                                                                              },
                                                             'remove_metric' => {
                                                                                  'comm' => '',
                                                                                  'precom' => '',
                                                                                  'name' => 'remove_metric',
                                                                                  'params' => [
                                                                                                {
                                                                                                  'mode' => 'in',
                                                                                                  'name' => 'name',
                                                                                                  'default' => undef,
                                                                                                  'type' => 'string'
                                                                                                }
                                                                                              ],
                                                                                  'detail' => '    - remove_metric
      Purpose:  remove a metric instance
      Format:   remove_metric      (in  string  name);
      Inputs:   name:               identifies the metric to be
                                    removed
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - all callbacks registered on that metric are
                  unregistered.
                - the metric is not available anymore.
      Perms:    Write
      Throws:   NotImplemented
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - only previously added metrics can be removed;
                  default metrics (saga defined or implementation
                  specific) cannot be removed; attempts to do so 
                  raise a BadParameter exception.
                - an \'AuthenticationFailed\', 
                  \'AuthorizationFailed\' or \'PermissionDenied\'
                  exception indicates that the current session
                  is not allowed to remove the metrics from the 
                  steerable.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to remove the 
                  metric.
                - if a metric with that name is not known for
                  the object, a \'DoesNotExist\' exception is 
                  thrown.
                - if a steerable instance does not support the
                  removal of some metric, e.g. if a metric
                  needs to be always present, an 
                  \'IncorrectState\' exception is thrown.  
                  For example, the \'state\' metric on a steerable
                  job cannot be removed.
',
                                                                                  'temp' => '',
                                                                                  'is_void' => 0,
                                                                                  'idx' => 1
                                                                                }
                                                           },
                                                  'impl' => [
                                                              'monitorable'
                                                            ],
                                                  'name' => 'steerable',
                                                  'idx' => 3,
                                                  'type' => 'interface'
                                                }
                               },
          'saga.stream' => {
                             'stream_server' => {
                                                  'met' => {
                                                             'stream_server.client_connect' => {
                                                                                                 'unit' => '1',
                                                                                                 'mode' => 'ReadOnly',
                                                                                                 'desc' => 'fires if a client connects',
                                                                                                 'name' => 'stream_server.client_connect',
                                                                                                 'val' => '1',
                                                                                                 'type' => 'Trigger',
                                                                                                 'opt' => '',
                                                                                                 'note' => ''
                                                                                               }
                                                           },
                                                  'comm' => '',
                                                  'def' => {
                                                             'serve' => {
                                                                          'comm' => '',
                                                                          'precom' => '    // stream management
',
                                                                          'name' => 'serve',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'timeout',
                                                                                          'default' => '-1.0',
                                                                                          'type' => 'float'
                                                                                        },
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'stream',
                                                                                          'default' => undef,
                                                                                          'type' => 'stream'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - serve
      Purpose:  wait for incoming client connections
      Format:   serve                (in  float   timeout,
                                      out stream  client);
      Inputs:   timeout:              number of seconds to wait
                                      for a client
      InOuts:   -
      Outputs:  client:               new Connected stream object
      PreCond:  -
      PostCond: - the returned client is in \'Open\' state.
                - the session of the returned client is that of 
                  the stream_server.
      Perms:    - Exec.
                - Exec for the connecting remote party.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                NoSuccess
                Timeout
      Notes:    - if successful, it returns a new stream object
                  that is connected to the client.
                - if no client connects within the specified 
                  timeout, a \'Timeout\' exception is thrown.
                - if connection setup failed (not on timeout!),
                  the returned client is in the \'Error\' state.
                  Its error_handler interface should give
                  detailed information about the reason.
                - for timeout semantics, see Section 2.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 3
                                                                        },
                                                             'close' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'close',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'timeout',
                                                                                          'default' => '0.0',
                                                                                          'type' => 'float'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - close
      Purpose:  closes a stream server
      Format:   close                (in float timeout)
      Inputs:   timeout               seconds to wait
      InOuts:   -
      Outputs:  -
      PreCond:  - 
      PostCond: - no clients are accepted anymore.
                - no callbacks registered for the
                  \'ClientConnect\' metric are invoked.
      Perms:    -
      Throws:   NotImplemented
                NoSuccess
      Notes:    - any subsequent method call on the object
                  MUST raise an \'IncorrectState\' exception
                  (apart from DESTRUCTOR and close()).
                - if close() is implicitly called in the
                  DESTRUCTOR, it will never throw an exception.
                - close() can be called multiple times, with no
                  side effects.
                - for resource deallocation semantics, see 
                  Section 2.
                - for timeout semantics, see Section 2.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 5
                                                                        },
                                                             'DESTRUCTOR' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'DESTRUCTOR',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'in',
                                                                                               'name' => 'obj',
                                                                                               'default' => undef,
                                                                                               'type' => 'stream_server'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - DESTRUCTOR
      Purpose:  Destructor for stream_server object.
      Format:   DESTRUCTOR           (in stream_server obj)
      Inputs:   obj:                  object to be destroyed
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the stream_server is closed.
      Perms:    -
      Throws:   -
      Notes:    - if the instance was not closed before, the 
                  destructor performs a close() on the instance,
                  and all notes to close() apply.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 1
                                                                             },
                                                             'get_url' => {
                                                                            'comm' => '',
                                                                            'precom' => '    // inspection
',
                                                                            'name' => 'get_url',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'out',
                                                                                            'name' => 'url',
                                                                                            'default' => undef,
                                                                                            'type' => 'saga::url'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - get_url
      Purpose:  get URL to be used to connect to this server
      Format:   get_url              (out saga::url url);
      Inputs:   -
      InOuts:   -
      Outputs:  url:                  the URL of the connection.
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns a URL which can be passed to
                  the stream constructor to create a connection
                  to this stream_server.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 2
                                                                          },
                                                             'CONSTRUCTOR' => {
                                                                                'comm' => '',
                                                                                'precom' => '',
                                                                                'name' => 'CONSTRUCTOR',
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 's',
                                                                                                'default' => undef,
                                                                                                'type' => 'session'
                                                                                              },
                                                                                              {
                                                                                                'mode' => 'in',
                                                                                                'name' => 'url',
                                                                                                'default' => undef,
                                                                                                'type' => 'saga::url'
                                                                                              },
                                                                                              {
                                                                                                'mode' => 'out',
                                                                                                'name' => 'obj',
                                                                                                'default' => undef,
                                                                                                'type' => 'stream_server'
                                                                                              }
                                                                                            ],
                                                                                'detail' => '    - CONSTRUCTOR
      Purpose:  create a new stream_server object
      Format:   CONSTRUCTOR          (in  session   s,
                                      in  saga::url url = "",
                                      out stream_server obj);
      Inputs:   s:                    session to be used for
                                      object creation
                url:                  channel name or url,
                                      defines the source side
                                      binding for the stream
      InOuts:   -
      Outputs:  obj:                  new stream_server object
      PreCond:  -
      PostCond: - stream_server can wait for incoming
                  connections.
                - \'Owner\' of name is the id of the context
                  used to create the stream_server.
                - the stream_server has \'Exec\', \'Query\', \'Read\' 
                  and \'Write\' permissions for \'*\'.
      Perms:    -
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the given url is an empty string (the 
                  default), the implementation will choose an
                  appropriate default value.
                - the implementation MUST ensure that the given
                  URL is usable, and a later call to \'serve\' 
                  will not fail because of the information given
                  by the URL - otherwise, a \'BadParameter\'
                  exception MUST be thrown.
',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'idx' => 0
                                                                              },
                                                             'connect' => {
                                                                            'comm' => '',
                                                                            'precom' => '',
                                                                            'name' => 'connect',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'in',
                                                                                            'name' => 'timeout',
                                                                                            'default' => '-1.0',
                                                                                            'type' => 'float'
                                                                                          },
                                                                                          {
                                                                                            'mode' => 'out',
                                                                                            'name' => 'stream',
                                                                                            'default' => undef,
                                                                                            'type' => 'stream'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - connect
      Purpose:  Establishes a connection to the remote
                connection endpoint represented by this instance
      Format:   connect              (in float timeout = -1.0);
      Inputs:   timeout:              connection timeout
      InOuts:   -
      Outputs:  -
      PreCond:  - 
      PostCond: - the returned stream is in \'Open\' state.
      Perms:    Exec
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - on failure, the stream state is changed to
                  \'Error\'
                - this call is equivalent to creating a
                  stream instance with the URL used to
                  create this stream_server instance, and 
                  calling connect() on that stream.
                - if the stream instance is not in \'New\' state,
                  an \'IncorrectState\' exception is thrown.
                - for timeout semantics, see Section 2.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 4
                                                                          }
                                                           },
                                                  'impl' => [
                                                              'saga::object',
                                                              'saga::async',
                                                              'saga::monitorable',
                                                              'saga::permissions'
                                                            ],
                                                  'name' => 'stream_server',
                                                  'idx' => 2,
                                                  'type' => 'class'
                                                },
                             'stream' => {
                                           'base' => [
                                                       'saga::object'
                                                     ],
                                           'comm' => 'constructor / destructor',
                                           'att' => {
                                                      'stream.read' => {
                                                                         'unit' => '1',
                                                                         'mode' => 'ReadOnly',
                                                                         'desc' => 'fires if a stream gets readable',
                                                                         'name' => 'stream.read',
                                                                         'val' => '1',
                                                                         'type' => 'Trigger',
                                                                         'opt' => '',
                                                                         'note' => '- a stream is considered readable if a subsequent read() can successfully read 1 or more bytes of data.'
                                                                       },
                                                      'stream.exception' => {
                                                                              'unit' => '1',
                                                                              'mode' => 'ReadOnly',
                                                                              'desc' => 'fires if a stream has an error condition',
                                                                              'name' => 'stream.exception',
                                                                              'val' => '1',
                                                                              'type' => 'Trigger',
                                                                              'opt' => '',
                                                                              'note' => '-'
                                                                            },
                                                      'Blocking' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadWrite',
                                                                      'desc' => 'determines if read/writes are blocking or not',
                                                                      'name' => 'Blocking',
                                                                      'val' => 'True',
                                                                      'type' => 'Bool',
                                                                      'opt' => 'optional',
                                                                      'note' => '- if the attribute is not supported, the implementation MUST be blocking
- if the attribute is set to \'True\', a read or write operation MAY return immediately if no data can be read or written - that does not constitute an error (see EAGAIN in POSIX).'
                                                                    },
                                                      'Nodelay' => {
                                                                     'unit' => '',
                                                                     'mode' => 'ReadWrite',
                                                                     'desc' => 'determines if packets are sent immediately, i.e. without delay',
                                                                     'name' => 'Nodelay',
                                                                     'val' => 'True',
                                                                     'type' => 'Bool',
                                                                     'opt' => 'optional',
                                                                     'note' => '- similar to the TCP_NODELAY option'
                                                                   },
                                                      'stream.write' => {
                                                                          'unit' => '1',
                                                                          'mode' => 'ReadOnly',
                                                                          'desc' => 'fires if a stream gets writable',
                                                                          'name' => 'stream.write',
                                                                          'val' => '1',
                                                                          'type' => 'Trigger',
                                                                          'opt' => '',
                                                                          'note' => '- a stream is considered writable if a subsequent write() can successfully write 1 or more bytes of data.'
                                                                        },
                                                      'stream.dropped' => {
                                                                            'unit' => '1',
                                                                            'mode' => 'ReadOnly',
                                                                            'desc' => 'fires if the stream gets dropped by the remote party',
                                                                            'name' => 'stream.dropped',
                                                                            'val' => '1',
                                                                            'type' => 'Trigger',
                                                                            'opt' => '',
                                                                            'note' => ''
                                                                          },
                                                      'Reliable' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadWrite',
                                                                      'desc' => 'determines if all sent data MUST arrive',
                                                                      'name' => 'Reliable',
                                                                      'val' => 'True',
                                                                      'type' => 'Bool',
                                                                      'opt' => 'optional',
                                                                      'note' => '- if the attribute is not supported, the implementation MUST be reliable Metrics: name:  stream.state desc:  fires if the state of the stream changes, and has the value of the new state enum mode:  ReadOnly unit:  1 type:  Enum value: New'
                                                                    },
                                                      'BufSize' => {
                                                                     'unit' => '',
                                                                     'mode' => 'ReadWrite',
                                                                     'desc' => 'determines the size of the send buffer, in bytes',
                                                                     'name' => 'BufSize',
                                                                     'val' => 'system dependent',
                                                                     'type' => 'Int',
                                                                     'opt' => 'optional',
                                                                     'note' => '- the implementation MUST document the default value, and its meaning (e.g. on what layer that buffer is maintained, or if it disables zero copy).'
                                                                   },
                                                      'Compression' => {
                                                                         'unit' => '',
                                                                         'mode' => 'ReadWrite',
                                                                         'desc' => 'determines if data are compressed before/after transfer',
                                                                         'name' => 'Compression',
                                                                         'val' => 'schema dependent',
                                                                         'type' => 'Bool',
                                                                         'opt' => 'optional',
                                                                         'note' => '- the implementation MUST document the default values for the available schemas'
                                                                       },
                                                      'Timeout' => {
                                                                     'unit' => '',
                                                                     'mode' => 'ReadWrite',
                                                                     'desc' => 'determines the amount of idle time before dropping the line, in seconds',
                                                                     'name' => 'Timeout',
                                                                     'val' => 'system dependent',
                                                                     'type' => 'Int',
                                                                     'opt' => 'optional',
                                                                     'note' => '- the implementation MUST document the default value
- if this attribute is supported, the connection MUST be closed by the implementation if for that many seconds nothing has been read from or written to the stream.'
                                                                   }
                                                    },
                                           'name' => 'stream',
                                           'def' => {
                                                      'close' => {
                                                                   'comm' => '',
                                                                   'precom' => '',
                                                                   'name' => 'close',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'timeout',
                                                                                   'default' => '0.0',
                                                                                   'type' => 'float'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - close
      Purpose:  closes an active connection
      Format:   close                (in float timeout)
      Inputs:   timeout               seconds to wait
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - stream is in \'Closed\' state
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                NoSuccess
      Notes:    - any subsequent method call on the object
                  MUST raise an \'IncorrectState\' exception
                  (apart from DESTRUCTOR and close()).
                - if close() is implicitly called in the
                  DESTRUCTOR, it will never throw an exception.
                - close() can be called multiple times, with no
                  side effects.
                - for resource deallocation semantics, see 
                  Section 2.
                - for timeout semantics, see Section 2.
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 6
                                                                 },
                                                      'get_context' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'get_context',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'ctx',
                                                                                         'default' => undef,
                                                                                         'type' => 'context'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - get_context
      Purpose:  return remote authorization info
      Format:   get_context           (out context ctx);
      Inputs:   -
      InOuts:   -
      Outputs:  ctx:                   remote context
      PreCond:  - the stream is, or has been, in the \'Open\' 
                  state.
      PostCond: - the returned context is deep copied, and does
                  not share state with any other object.
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the context returned contains the security
                  information from the REMOTE party, and can be 
                  used for authorization.
                - if the stream is in a final state, but has
                  been in \'Open\' state before, the returned
                  context represents the remote party the stream
                  has been connected to while it was in \'Open\'
                  state.
                - if the stream is not in \'Open\' state, and is
                  not in a final state after having been in
                  \'Open\' state, an \'IncorrectState\' exception is
                  thrown.
                - if no security information are available, the
                  returned context has the type \'Unknown\' and no
                  attributes are attached.
                - the returned context MUST be authenticated, or
                  must be of type \'Unknown\' as described above.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 3
                                                                       },
                                                      'wait' => {
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'what',
                                                                                  'default' => undef,
                                                                                  'type' => 'int'
                                                                                },
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'timeout',
                                                                                  'default' => '-1.0',
                                                                                  'type' => 'float'
                                                                                },
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'cause',
                                                                                  'default' => undef,
                                                                                  'type' => 'int'
                                                                                }
                                                                              ],
                                                                  'comm' => '',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'name' => 'wait',
                                                                  'idx' => 5
                                                                },
                                                      'DESTRUCTOR' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'DESTRUCTOR',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'obj',
                                                                                        'default' => undef,
                                                                                        'type' => 'stream'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - DESTRUCTOR
      Purpose:  destroy a stream object
      Format:   DESTRUCTOR           (in stream obj)
      Inputs:   obj:                  stream to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the socket is closed.
      Perms:    -
      Throws:   -
      Notes:    - if the instance was not closed before, the 
                  destructor performs a close() on the instance,
                  and all notes to close() apply.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 1
                                                                      },
                                                      'read' => {
                                                                  'comm' => 'I/O methods',
                                                                  'precom' => '    Stream I/O methods:
    -------------------
',
                                                                  'name' => 'read',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'inout',
                                                                                  'name' => 'buf',
                                                                                  'default' => undef,
                                                                                  'type' => 'buffer'
                                                                                },
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'len_in',
                                                                                  'default' => '-1',
                                                                                  'type' => 'int'
                                                                                },
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'len_out',
                                                                                  'default' => undef,
                                                                                  'type' => 'int'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - read
      Purpose:  Read a data buffer from stream.
      Format:   read                 (inout buffer      buf,
                                      in    int         len_in = -1,
                                      out   int         len_out);
      Inputs:   len_in:               Maximum number of bytes
                                      that can be copied into
                                      the buffer.
      InOuts:   buf:                  buffer to store read data 
                                      into
      Outputs:  len_out:              number of bytes read, if
                                      successful. 
      PreCond:  - the stream is in \'Open\' state.
      PostCond: - data from the stream are available in the
                  buffer.
      Perms:    Read for the stream_server represented by the
                url used for creating this stream instance.
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the stream is blocking, the call waits
                  until data become available.
                - if the stream is non-blocking, the call
                  returns immediately, even if no data are
                  available -- that is not an error condition.
                - the actually number of bytes read into buffer
                  is returned in len_out.  It is not an error
                  to read less bytes than requested, or in fact
                  zero bytes.
                - errors are indicated by returning negative
                  values for len_out, which correspond to
                  negatives of the respective ERRNO error code
                - the given buffer must be large enough to
                  store up to len_in bytes, or managed by the
                  implementation - otherwise a \'BadParameter\'
                  exception is thrown.
                - the notes about memory management from the
                  buffer class apply.
                - if len_in is smaller than 0, or not given, 
                  the buffer size is used for len_in.
                  If that is also not available, a
                  \'BadParameter\' exception is thrown.
                - if the stream is not in \'Open\' state, an
                  \'IncorrectState\' exception is thrown.
                - similar to read (2) as specified by POSIX
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 7
                                                                },
                                                      'CONSTRUCTOR' => {
                                                                         'comm' => '',
                                                                         'precom' => '    Constructor / Destructor:
    -------------------------
',
                                                                         'name' => 'CONSTRUCTOR',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 's',
                                                                                         'default' => undef,
                                                                                         'type' => 'session'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'url',
                                                                                         'default' => '""',
                                                                                         'type' => 'saga::url'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'obj',
                                                                                         'default' => undef,
                                                                                         'type' => 'stream'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - CONSTRUCTOR
      Purpose:  Constructor, initializes a client stream,
                for later connection to a server.
      Format:   CONSTRUCTOR          (in  session    s,
                                      in  saga::url  url,
                                      out stream  obj);
      Inputs:   s:                    saga session handle
                url:                  server location as URL
      InOuts:   -
      Outputs:  obj:                  new, unconnected stream
                                      instance
      PreCond:  -
      PostCond: - the state of the socket is \'New\'.
      Perms:    - Query for the stream_server represented by
                  url.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - server location and possibly protocol are
                  described by the input URL - see description
                  above.
                - the \'url\' can be empty (which is the default).
                  A stream so constructed is only to be used
                  as parameter to an asynchronous
                  stream_server::serve() call.  For such a
                  stream, a later call to connect() will fail.  
                - the implementation MUST ensure that the
                  information given in the URL are usable -
                  otherwise a \'BadParameter\' exception MUST be
                  thrown.
                - the socket is only connected after the
                  connect() method is called.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 0
                                                                       },
                                                      'get_url' => {
                                                                     'comm' => 'inspection methods',
                                                                     'precom' => '    Inspection methods:
    -------------------
',
                                                                     'name' => 'get_url',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'out',
                                                                                     'name' => 'url',
                                                                                     'default' => undef,
                                                                                     'type' => 'saga::url'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - get_url
      Purpose:  get URL used for creating the stream
      Format:   get_url               (out saga::url url);
      Inputs:   -
      InOuts:   -
      Outputs:  url:                  the URL of the connection.
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns a URL which can be passed to a
                  stream constructor to create another
                  connection to the same stream_server.
                - the returned url may be empty, indicating that
                  this instance has been created with an empty
                  url as parameter to the stream CONSTRUCTOR().
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 2
                                                                   },
                                                      'write' => {
                                                                   'comm' => '',
                                                                   'precom' => '',
                                                                   'name' => 'write',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'buf',
                                                                                   'default' => undef,
                                                                                   'type' => 'buffer'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'len_in',
                                                                                   'default' => '-1',
                                                                                   'type' => 'int'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'len_out',
                                                                                   'default' => undef,
                                                                                   'type' => 'int'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - write
      Purpose:  Write a data buffer to stream.
      Format:   write                (in  buffer        buf,
                                      in  int           len_in = -1,
                                      out int           len_out);
      Inputs:   len_in:               number of bytes of data in
                                      the buffer
                buffer:               buffer containing data
                                      that will be sent out via
                                      socket
      InOuts:   -
      Outputs:  len_out:              bytes written if successful
      PreCond:  - the stream is in \'Open\' state.
      PostCond: - the buffer data are written to the stream.
      Perms:    Write for the stream_server represented by the
                url used for creating this stream instance.
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the stream is blocking, the call waits
                  until the data can be written.
                - if the stream is non-blocking, the call
                  returns immediately, even if no data are
                  written -- that is not an error condition.
                - it is not an error to write less than len_in
                  bytes.
                - errors are indicated by returning negative
                  values for len_out, which correspond to
                  negatives of the respective ERRNO error code
                - the given buffer must be large enough to
                  store up to len_in bytes, or managed by the
                  implementation - otherwise a \'BadParameter\'
                  exception is thrown.
                - the notes about memory management from the
                  buffer class apply.
                - if len_in is smaller than 0, or not given, 
                  the buffer size is used for len_in.
                  If that is also not available, a
                  \'BadParameter\' exception is thrown.
                - if the stream is not in \'Open\' state, an
                  \'IncorrectState\' exception is thrown.
                - similar to write (2) as specified by POSIX
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 8
                                                                 },
                                                      'connect' => {
                                                                     'comm' => 'management methods',
                                                                     'precom' => '    Management methods:
    -------------------
',
                                                                     'name' => 'connect',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'timeout',
                                                                                     'default' => '-1.0',
                                                                                     'type' => 'float'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - connect
      Purpose:  Establishes a connection to the target defined
                during the construction of the stream.
      Format:   connect              (in float timeout = -1.0);
      Inputs:   timeout:              connection timeout
      InOuts:   -
      Outputs:  -
      PreCond:  - the stream is in \'New\' state.
      PostCond: - the stream is in \'Open\' state.
      Perms:    Exec for the stream_server represented by the
                url used for creating this stream instance.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - on failure, the stream state is changed to
                  \'Error\'
                - this call is equivalent to creating a
                  stream_server instance with the URL used ot
                  create this stream instance, and calling
                  connect() on that stream_server.
                - if the stream instance is not in \'New\' state,
                  an \'IncorrectState\' exception is thrown.
                - for timeout semantics, see Section 2.
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 4
                                                                   }
                                                    },
                                           'impl' => [
                                                       'saga::async',
                                                       'saga::attributes',
                                                       'saga::monitorable'
                                                     ],
                                           'type' => 'class',
                                           'idx' => 3
                                         },
                             'activity' => {
                                             'comm' => '',
                                             'def' => {
                                                        '2,' => {
                                                                  'comm' => '',
                                                                  'name' => 'Write'
                                                                },
                                                        '4' => {
                                                                 'comm' => '',
                                                                 'name' => 'Exception'
                                                               },
                                                        '1,' => {
                                                                  'comm' => '',
                                                                  'name' => 'Read'
                                                                }
                                                      },
                                             'name' => 'activity',
                                             'idx' => 1,
                                             'type' => 'enum'
                                           },
                             'state' => {
                                          'comm' => '',
                                          'def' => {
                                                     '2,' => {
                                                               'comm' => '',
                                                               'name' => 'Open'
                                                             },
                                                     '1' => {
                                                              'comm' => '',
                                                              'name' => 'New'
                                                            },
                                                     '4,' => {
                                                               'comm' => '',
                                                               'name' => 'Dropped'
                                                             },
                                                     '5' => {
                                                              'comm' => '',
                                                              'name' => 'Error'
                                                            },
                                                     '3,' => {
                                                               'comm' => '',
                                                               'name' => 'Closed'
                                                             }
                                                   },
                                          'name' => 'state',
                                          'idx' => 0,
                                          'type' => 'enum'
                                        }
                           },
          'saga.logical_file' => {
                                   'logical_directory' => {
                                                            'base' => [
                                                                        'saga::ns_directory'
                                                                      ],
                                                            'comm' => '',
                                                            'def' => {
                                                                       'open' => {
                                                                                   'comm' => '',
                                                                                   'precom' => '',
                                                                                   'name' => 'open',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'name',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'saga::url'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'flags',
                                                                                                   'default' => 'Read',
                                                                                                   'type' => 'int'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'out',
                                                                                                   'name' => 'file',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'logical_file'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - open
      Purpose:  creates a new logical_file instance
      Format:   open             (in  saga::url    name,
                                  in  int          flags = Read,
                                  out logical_file file);
      Inputs:   name:             file to be opened
                flags:            flags defining operation
                                  modus
      InOuts:   -
      Outputs:  file:             opened file instance
      PreCond:  -
      PostCond: - the session of the returned instance is that of
                  the calling instance.
                - \'Owner\' of name is the id of the context
                  used to perform the operation if name gets
                  created.
      Perms:    Exec  for name\'s parent directory.
                Write for name\'s parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes from the ns_directory::open() method
                  apply.
                - the flag set \'Read | Write\' is equivalent to
                  the flag \'ReadWrite\'.
                - default flags are \'Read\' (512).
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 4
                                                                                 },
                                                                       'open_dir' => {
                                                                                       'comm' => 'open methods',
                                                                                       'precom' => '',
                                                                                       'name' => 'open_dir',
                                                                                       'params' => [
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'name',
                                                                                                       'default' => undef,
                                                                                                       'type' => 'saga::url'
                                                                                                     },
                                                                                                     {
                                                                                                       'mode' => 'in',
                                                                                                       'name' => 'flags',
                                                                                                       'default' => 'Read',
                                                                                                       'type' => 'int'
                                                                                                     },
                                                                                                     {
                                                                                                       'mode' => 'out',
                                                                                                       'name' => 'dir',
                                                                                                       'default' => undef,
                                                                                                       'type' => 'logical_directory'
                                                                                                     }
                                                                                                   ],
                                                                                       'detail' => '    - open_dir
      Purpose:  creates a new logical_directory instance
      Format:   open_dir         (in  saga::url name,
                                  in  int       flags = Read,
                                  out logical_directory dir);
      Inputs:   name:             name of directory to open
                flags:            flags defining operation
                                  modus
      InOuts:   -
      Outputs:  dir:              opened directory instance
      PreCond:  -
      PostCond: - the session of the returned instance is that of
                  the calling instance.
                - \'Owner\' of name is the id of the context
                  used to perform the operation if name gets
                  created.
      Perms:    Exec  for name\'s parent directory.
                Write for name\'s parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes from the ns_directory::open_dir()
                  method apply.
                - default flags are \'Read\' (512).
',
                                                                                       'temp' => '',
                                                                                       'is_void' => 0,
                                                                                       'idx' => 3
                                                                                     },
                                                                       'DESTRUCTOR' => {
                                                                                         'comm' => '',
                                                                                         'precom' => '',
                                                                                         'name' => 'DESTRUCTOR',
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'obj',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'logical_directory'
                                                                                                       }
                                                                                                     ],
                                                                                         'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR         (in  logical_directory obj)
      Inputs:   obj:                the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the logical_directory is closed.
      Perms:    -
      Throws:   -
      Notes:    - the semantics of the inherited destructors
                  apply.
',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'idx' => 1
                                                                                       },
                                                                       'find' => {
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'name_pattern',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'attr_pattern',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'array<string>'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'flags',
                                                                                                   'default' => 'Recursive',
                                                                                                   'type' => 'int'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'out',
                                                                                                   'name' => 'names',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'array<saga::url>'
                                                                                                 }
                                                                                               ],
                                                                                   'comm' => 'find logical files based on name and meta data',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'name' => 'find',
                                                                                   'idx' => 5
                                                                                 },
                                                                       'CONSTRUCTOR' => {
                                                                                          'comm' => '',
                                                                                          'precom' => '    Constructor / Destructor:
    -------------------------
',
                                                                                          'name' => 'CONSTRUCTOR',
                                                                                          'params' => [
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 's',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'session'
                                                                                                        },
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 'name',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'saga::url'
                                                                                                        },
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 'flags',
                                                                                                          'default' => 'Read',
                                                                                                          'type' => 'int'
                                                                                                        },
                                                                                                        {
                                                                                                          'mode' => 'out',
                                                                                                          'name' => 'obj',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'logical_directory'
                                                                                                        }
                                                                                                      ],
                                                                                          'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR      (in  session       s,
                                  in  saga::url     name,
                                  in  int           flags = Read,
                                  out logical_directory
                                                    obj)
      Inputs:   s:                session to associate with
                                  the object
                name:             location of directory
                flags:            mode for opening
      InOuts:   -
      Outputs:  obj:              the newly created object
      PreCond:  -
      PostCond: - the logical_directory is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the
                  logical_directory gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the semantics of the inherited constructors
                  and of the logical_directory::open_dir()
                  method apply.
                - the default flags are \'Read\' (512).
',
                                                                                          'temp' => '',
                                                                                          'is_void' => 0,
                                                                                          'idx' => 0
                                                                                        },
                                                                       'is_file' => {
                                                                                      'comm' => 'inspection methods',
                                                                                      'precom' => '',
                                                                                      'name' => 'is_file',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'in',
                                                                                                      'name' => 'name',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'saga::url'
                                                                                                    },
                                                                                                    {
                                                                                                      'mode' => 'out',
                                                                                                      'name' => 'test',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'boolean'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - is_file
      Alias:    for is_entry of saga::ns_directory
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 2
                                                                                    }
                                                                     },
                                                            'impl' => [
                                                                        'saga::attributes'
                                                                      ],
                                                            'name' => 'logical_directory',
                                                            'idx' => 2,
                                                            'type' => 'class'
                                                          },
                                   'flags' => {
                                                'comm' => '',
                                                'def' => {
                                                           'comm' => '128,    reserved for Truncate'
                                                         },
                                                'name' => 'flags',
                                                'idx' => 0,
                                                'type' => 'enum'
                                              },
                                   'logical_file' => {
                                                       'base' => [
                                                                   'saga::ns_entry'
                                                                 ],
                                                       'comm' => '',
                                                       'def' => {
                                                                  'list_locations' => {
                                                                                        'comm' => '',
                                                                                        'precom' => '',
                                                                                        'name' => 'list_locations',
                                                                                        'params' => [
                                                                                                      {
                                                                                                        'mode' => 'out',
                                                                                                        'name' => 'names',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'array<saga::url>'
                                                                                                      }
                                                                                                    ],
                                                                                        'detail' => '    - list_locations
      Purpose:  list the locations in the location set
      Format:   list_locations   (out array<saga::url> names);
      Inputs:   -
      InOuts:   -
      Outputs:  names:            array of locations in set
      PreCond:  -
      PostCond: - 
      Perms:    Read
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - this method returns an array of urls
                  containing the complete set of locations
                  associated with the logical file.
                - an empty array returned is not an error - 
                  the logical file object is still a valid 
                  object (see replicate() method description).
                - if the logical file was opened WriteOnly, an
                  \'PermissionDenied\' exception is thrown.
',
                                                                                        'temp' => '',
                                                                                        'is_void' => 0,
                                                                                        'idx' => 5
                                                                                      },
                                                                  'update_location' => {
                                                                                         'comm' => '',
                                                                                         'precom' => '',
                                                                                         'name' => 'update_location',
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'name_old',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'saga::url'
                                                                                                       },
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'name_new',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'saga::url'
                                                                                                       }
                                                                                                     ],
                                                                                         'detail' => '    - update_location
      Purpose:  change a replica location in replica set
      Format:   update_location  (in saga::url name_old,
                                  in saga::url name_new);
      Inputs:   name_old          replica to be updated
                name_new          update of replica
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - name_old is not anymore in list of replica 
                  locations for the logical file.
                - name_new is in the list of replica locations
                  for the logical file.
      Perms:    Read 
                Write
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - this method removes a given replica location 
                  from the set of locations associated with the 
                  logical file, and adds a new location.
                - the implementation MAY choose to interpret the
                  replica locations associated with the logical 
                  file.  It MAY return an \'IncorrectURL\' error 
                  indicating an invalid location if it is unable 
                  or unwilling to handle that specific locations
                  scheme.  The implementation documentation MUST 
                  specify how valid replica locations are formed.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if the old replica location is not in the 
                  set of locations, a \'DoesNotExist\' exception 
                  is thrown.
                - if the new replica location is already in the 
                  set of locations, an \'AlreadyExists\' exception 
                  is thrown.
                - if the logical file was opened ReadOnly, an
                  \'PermissionDenied\' exception is thrown.
                - if the logical file was opened WriteOnly, an
                  \'PermissionDenied\' exception is thrown.
',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'idx' => 4
                                                                                       },
                                                                  'replicate' => {
                                                                                   'comm' => 'create a new physical replica',
                                                                                   'precom' => '',
                                                                                   'name' => 'replicate',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'name',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'saga::url'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'flags',
                                                                                                   'default' => 'None',
                                                                                                   'type' => 'int'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - replicate 
      Purpose:  replicate a file from any of the known
                replica locations to a new location, and, on 
                success, add the new replica location to the 
                set of associated replicas 
      Format:   replicate        (in  saga::url name, 
                                  in  int       flags = None);
      Inputs:   name:             location to replicate to
                flags:            flags defining the operation
                                  modus
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - an identical copy of one of the available
                  replicas exists at name.
                - name is in the list of replica locations
                  for the logical file.
      Perms:    Read 
                Write
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the method implies a two step operation:
                  1) create a new and complete replica at the
                     given location, which then represents
                     a new replica location.
                  2) perform an add_location() for the new
                     replica location.
                - all notes to the saga::ns_entry::copy() and
                  saga::logical_file::add_location methods
                  apply.
                - the method is not required to be atomic, but:
                  the implementation MUST be either
                  successful in both steps, or throw an
                  exception indicating if both methods failed, 
                  or if one of the methods succeeded.
                - a replicate call on an instance with empty
                  location set raises an \'IncorrectState\'
                  exception, with an descriptive error message.  
                - the default flags are \'None\' (0).  The
                  interpretation of flags is as described for 
                  the ns_entry::copy() method.  
                - The \'Recursive\' flag is not allowed, and 
                  causes a \'BadParameter\' exception.
                - if the logical file was opened ReadOnly, an
                  \'PermissionDenied\' exception is thrown.
                - if the logical file was opened WriteOnly, an
                  \'PermissionDenied\' exception is thrown.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 6
                                                                                 },
                                                                  'remove_location' => {
                                                                                         'comm' => '',
                                                                                         'precom' => '',
                                                                                         'name' => 'remove_location',
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'name',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'saga::url'
                                                                                                       }
                                                                                                     ],
                                                                                         'detail' => '    - remove_location
      Purpose:  remove a replica location from the replica set
      Format:   remove_location  (in  saga::url name);
      Inputs:   name:             replica to remove from set
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - name is not anymore in list of replica 
                  locations for the logical file.
      Perms:    Write
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - this method removes a given replica location 
                  from the set of replicas associated with the 
                  logical file.
                - the implementation MAY choose to interpret the
                  replica locations associated with the logical 
                  file.  It MAY return an \'IncorrectURL\' error 
                  indicating an invalid location if it is unable 
                  or unwilling to handle that specific locations
                  scheme.  The implementation documentation MUST 
                  specify how valid replica locations are formed.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if the location is not in the set of
                  replicas, a \'DoesNotExist\' exception is 
                  thrown.
                - if the set of locations is empty after this
                  operation, the logical file object is still 
                  a valid object (see replicate() method
                  description).
                - if the logical file was opened ReadOnly, a
                  \'PermissionDenied\' exception is thrown.
',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'idx' => 3
                                                                                       },
                                                                  'DESTRUCTOR' => {
                                                                                    'comm' => '',
                                                                                    'precom' => '',
                                                                                    'name' => 'DESTRUCTOR',
                                                                                    'params' => [
                                                                                                  {
                                                                                                    'mode' => 'in',
                                                                                                    'name' => 'obj',
                                                                                                    'default' => undef,
                                                                                                    'type' => 'logical_file'
                                                                                                  }
                                                                                                ],
                                                                                    'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR       (in  logical_file   obj)
      Inputs:   obj:              the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the logical_file is closed.
      Perms:    -
      Throws:   -
      Notes:    - the semantics of the inherited destructors
                  apply.
',
                                                                                    'temp' => '',
                                                                                    'is_void' => 0,
                                                                                    'idx' => 1
                                                                                  },
                                                                  'add_location' => {
                                                                                      'comm' => 'manage the set of associated replicas',
                                                                                      'precom' => '      manage the set of associated replicas:
      --------------------------------------
',
                                                                                      'name' => 'add_location',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'in',
                                                                                                      'name' => 'name',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'saga::url'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - add_location
      Purpose:  add a replica location to the replica set
      Format:   add_location     (in  saga::url name);
      Inputs:   name:             location to add to set
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - name is in the list of replica locations for
                  the logical file.
      Perms:    Write
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - this methods adds a given replica location 
                  (name) to the set of locations associated with 
                  the logical file.
                - the implementation MAY choose to interpret the
                  replica locations associated with the logical 
                  file.  It MAY return an \'IncorrectURL\' error 
                  indicating an invalid location if it is unable 
                  or unwilling to handle that specific locations
                  scheme.  The implementation documentation MUST 
                  specify how valid replica locations are formed.
                - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if the replica is already in the set, this
                  method does nothing, and in particular MUST
                  NOT raise an \'AlreadyExists\' exception
                - if the logical file was opened ReadOnly, a
                  \'PermissionDenied\' exception is thrown.
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 2
                                                                                    },
                                                                  'CONSTRUCTOR' => {
                                                                                     'comm' => '',
                                                                                     'precom' => '',
                                                                                     'name' => 'CONSTRUCTOR',
                                                                                     'params' => [
                                                                                                   {
                                                                                                     'mode' => 'in',
                                                                                                     'name' => 's',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'session'
                                                                                                   },
                                                                                                   {
                                                                                                     'mode' => 'in',
                                                                                                     'name' => 'name',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'saga::url'
                                                                                                   },
                                                                                                   {
                                                                                                     'mode' => 'in',
                                                                                                     'name' => 'flags',
                                                                                                     'default' => 'Read',
                                                                                                     'type' => 'int'
                                                                                                   },
                                                                                                   {
                                                                                                     'mode' => 'out',
                                                                                                     'name' => 'obj',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'logical_file'
                                                                                                   }
                                                                                                 ],
                                                                                     'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR      (in session    s,
                                  in  saga::url name,
                                  in  int       flags = Read,
                                  out logical_file  obj)
      Inputs:   s:                session to associate with
                                  the object
                name:             location of file
                flags:            mode for opening
      InOuts:   -
      Outputs:  obj:              the newly created object
      PreCond:  -
      PostCond: - the logical_file is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the
                  logical_file gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the semantics of the inherited constructors
                  and of the logical_directory::open() method 
                  apply.
                - the default flags are \'Read\' (512).
',
                                                                                     'temp' => '',
                                                                                     'is_void' => 0,
                                                                                     'idx' => 0
                                                                                   }
                                                                },
                                                       'impl' => [
                                                                   'saga::attributes'
                                                                 ],
                                                       'name' => 'logical_file',
                                                       'idx' => 1,
                                                       'type' => 'class'
                                                     }
                                 },
          'saga.error' => {
                            'permission_denied' => {
                                                     'base' => [
                                                                 'saga::exception'
                                                               ],
                                                     'comm' => '',
                                                     'name' => 'permission_denied',
                                                     'idx' => 8,
                                                     'type' => 'class'
                                                   },
                            'exception_type' => {
                                                  'comm' => '',
                                                  'def' => {
                                                             '2,' => {
                                                                       'comm' => '',
                                                                       'name' => 'BadParameter'
                                                                     },
                                                             '7,' => {
                                                                       'comm' => '',
                                                                       'name' => 'PermissionDenied'
                                                                     },
                                                             '4,' => {
                                                                       'comm' => '',
                                                                       'name' => 'DoesNotExist'
                                                                     },
                                                             '5,' => {
                                                                       'comm' => '',
                                                                       'name' => 'IncorrectState'
                                                                     },
                                                             '12' => {
                                                                       'comm' => '',
                                                                       'name' => 'NotImplemented'
                                                                     },
                                                             '3,' => {
                                                                       'comm' => '',
                                                                       'name' => 'AlreadyExists'
                                                                     },
                                                             '9,' => {
                                                                       'comm' => '',
                                                                       'name' => 'AuthenticationFailed'
                                                                     },
                                                             '11,' => {
                                                                        'comm' => '',
                                                                        'name' => 'NoSuccess'
                                                                      },
                                                             '8,' => {
                                                                       'comm' => '',
                                                                       'name' => 'AuthorizationFailed'
                                                                     },
                                                             '10,' => {
                                                                        'comm' => '',
                                                                        'name' => 'Timeout'
                                                                      },
                                                             '1,' => {
                                                                       'comm' => '',
                                                                       'name' => 'IncorrectURL'
                                                                     },
                                                             '6,' => {
                                                                       'comm' => '',
                                                                       'name' => 'IncorrectType'
                                                                     }
                                                           },
                                                  'name' => 'exception_type',
                                                  'idx' => 0,
                                                  'type' => 'enum'
                                                },
                            'no_success' => {
                                              'base' => [
                                                          'saga::exception'
                                                        ],
                                              'comm' => '',
                                              'name' => 'no_success',
                                              'idx' => 12,
                                              'type' => 'class'
                                            },
                            'incorrect_url' => {
                                                 'base' => [
                                                             'saga::exception'
                                                           ],
                                                 'comm' => '',
                                                 'name' => 'incorrect_url',
                                                 'idx' => 2,
                                                 'type' => 'class'
                                               },
                            'not_implemented' => {
                                                   'base' => [
                                                               'saga::exception'
                                                             ],
                                                   'comm' => '',
                                                   'name' => 'not_implemented',
                                                   'idx' => 13,
                                                   'type' => 'class'
                                                 },
                            'bad_parameter' => {
                                                 'base' => [
                                                             'saga::exception'
                                                           ],
                                                 'comm' => '',
                                                 'name' => 'bad_parameter',
                                                 'idx' => 3,
                                                 'type' => 'class'
                                               },
                            'incorrect_type' => {
                                                  'base' => [
                                                              'saga::exception'
                                                            ],
                                                  'comm' => '',
                                                  'name' => 'incorrect_type',
                                                  'idx' => 7,
                                                  'type' => 'class'
                                                },
                            'timeout' => {
                                           'base' => [
                                                       'saga::exception'
                                                     ],
                                           'comm' => '',
                                           'name' => 'timeout',
                                           'idx' => 11,
                                           'type' => 'class'
                                         },
                            'authentication_failed' => {
                                                         'base' => [
                                                                     'saga::exception'
                                                                   ],
                                                         'comm' => '',
                                                         'name' => 'authentication_failed',
                                                         'idx' => 10,
                                                         'type' => 'class'
                                                       },
                            'exception' => {
                                             'comm' => '',
                                             'def' => {
                                                        'get_all_exceptions' => {
                                                                                  'comm' => 'recursive exception information',
                                                                                  'precom' => '',
                                                                                  'name' => 'get_all_exceptions',
                                                                                  'params' => [
                                                                                                {
                                                                                                  'mode' => 'out',
                                                                                                  'name' => 'elist',
                                                                                                  'default' => undef,
                                                                                                  'type' => 'array<exception>'
                                                                                                }
                                                                                              ],
                                                                                  'detail' => '    - get_all_exceptions
      Purpose:  gets list of lower level exceptions
      Format:   get_all_exceptions (out array<exception> el);
      Inputs:   -
      InOuts:   -
      Outputs:  el:            list of exceptions
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - a copy of the exception upon which this 
                  method is called MUST be the first element 
                  of the list, but that copy MUST NOT return 
                  any exceptions when get_all_exceptions()
                  is called on it.
',
                                                                                  'temp' => '',
                                                                                  'is_void' => 0,
                                                                                  'idx' => 6
                                                                                },
                                                        'DESTRUCTOR' => {
                                                                          'detail' => '    - DESTRUCTOR
      Purpose:  destroy the exception
      Format:   DESTRUCTOR    (in  exception e);
      Inputs:   e:             the exception to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    -
',
                                                                          'comm' => '',
                                                                          'temp' => '',
                                                                          'precom' => '',
                                                                          'is_void' => 1,
                                                                          'name' => 'DESTRUCTOR',
                                                                          'idx' => 2
                                                                        },
                                                        'get_all_messages' => {
                                                                                'comm' => '',
                                                                                'precom' => '',
                                                                                'name' => 'get_all_messages',
                                                                                'params' => [
                                                                                              {
                                                                                                'mode' => 'out',
                                                                                                'name' => 'mlist',
                                                                                                'default' => undef,
                                                                                                'type' => 'array<string>'
                                                                                              }
                                                                                            ],
                                                                                'detail' => '    - get_all_messages
      Purpose:  gets list of lower level error messages
      Format:   get_all_messages    (out array<string> ml);
      Inputs:   -
      InOuts:   -
      Outputs:  ml:            list of error messages
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - a copy of the error message of the exception 
                  upon which this method is called MUST be the 
                  first element of the list.
',
                                                                                'temp' => '',
                                                                                'is_void' => 0,
                                                                                'idx' => 7
                                                                              },
                                                        'get_type' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'get_type',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'out',
                                                                                        'name' => 't',
                                                                                        'default' => undef,
                                                                                        'type' => 'exception_type'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - get_type
      Purpose:  gets the type associated with the exception    
      Format:   get_type      (out exception_type type);
      Inputs:   -
      InOuts:   -
      Outputs:  type:          the error type
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - 
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 5
                                                                      },
                                                        'get_message' => {
                                                                           'comm' => 'top level exception information',
                                                                           'precom' => '',
                                                                           'name' => 'get_message',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'message',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - get_message
      Purpose:  gets the message associated with the exception    
      Format:   get_message   (out string message);
      Inputs:   -
      InOuts:   -
      Outputs:  message:       the error message
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - the returned string MUST be formatted as
                  described earlier in this section.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 3
                                                                         },
                                                        'CONSTRUCTOR' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'CONSTRUCTOR',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'message',
                                                                                           'default' => undef,
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'e',
                                                                                           'default' => undef,
                                                                                           'type' => 'exception'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - CONSTRUCTOR
      Purpose:  create the exception,  without associating 
                a saga object instance
      Format:   CONSTRUCTOR   (in  string         message
                               out exception      e);
      Inputs:   message:       the message to be associated 
                               with the new exception
      InOuts:   -
      Outputs:  e:             the newly created exception
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    -
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 1
                                                                         },
                                                        'get_object' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'get_object',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'obj',
                                                                                          'default' => undef,
                                                                                          'type' => 'object'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - get_object
      Purpose:  gets the SAGA object associated with exception
      Format:   get_object     (out object obj);
      Inputs:   -
      InOuts:   -
      Outputs:  obj:            the object associated with the
                                exception
      PreCond:  - an object was associated with the exception
                  during construction.
      PostCond: -
      Perms:    -
      Throws:   DoesNotExist
                NoSuccess
      Notes:    - the returned object is a shallow copy of the 
                  object which was used to call the method which 
                  caused the exception.
                - if the exception is raised in a task, e.g. on
                  task.rethrow(), the object is the one which the
                  task was created from.  That allows the
                  application to handle the error condition 
                  without the need to always keep track of 
                  object/task relationships.
                - an \'DoesNotExist\' exception is thrown when no
                  object is associated with the exception, e.g. 
                  if an \'NotImplemented\' exception was raised 
                  during the construction of an object.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 4
                                                                        }
                                                      },
                                             'name' => 'exception',
                                             'idx' => 1,
                                             'type' => 'class'
                                           },
                            'does_not_exist' => {
                                                  'base' => [
                                                              'saga::exception'
                                                            ],
                                                  'comm' => '',
                                                  'name' => 'does_not_exist',
                                                  'idx' => 5,
                                                  'type' => 'class'
                                                },
                            'incorrect_state' => {
                                                   'base' => [
                                                               'saga::exception'
                                                             ],
                                                   'comm' => '',
                                                   'name' => 'incorrect_state',
                                                   'idx' => 6,
                                                   'type' => 'class'
                                                 },
                            'already_exists' => {
                                                  'base' => [
                                                              'saga::exception'
                                                            ],
                                                  'comm' => '',
                                                  'name' => 'already_exists',
                                                  'idx' => 4,
                                                  'type' => 'class'
                                                },
                            'authorization_failed' => {
                                                        'base' => [
                                                                    'saga::exception'
                                                                  ],
                                                        'comm' => '',
                                                        'name' => 'authorization_failed',
                                                        'idx' => 9,
                                                        'type' => 'class'
                                                      },
                            'error_handler' => {
                                                 'comm' => '',
                                                 'def' => {
                                                            'get_error' => {
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'error',
                                                                                             'default' => undef,
                                                                                             'type' => 'exception'
                                                                                           }
                                                                                         ],
                                                                             'comm' => '',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'name' => 'get_error',
                                                                             'idx' => 1
                                                                           },
                                                            'has_error' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'has_error',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'has_error',
                                                                                             'default' => undef,
                                                                                             'type' => 'boolean'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - has_error
      Purpose:  tests if an object method caused an exception
      Format:   has_error     (out bool       has_error);
      Inputs:   -
      InOuts:   -
      Outputs:  has_error:     indicates that an exception was
                               caught.
      PreCond:  -
      PostCond: - the internal error state is unchanged.
      Perms:    -
      Throws:   -
      Notes:    - 
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 0
                                                                           }
                                                          },
                                                 'name' => 'error_handler',
                                                 'idx' => 14,
                                                 'type' => 'interface'
                                               }
                          },
          'saga.context' => {
                              'context' => {
                                             'comm' => '',
                                             'att' => {
                                                        'Server' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadWrite',
                                                                      'desc' => 'server which manages the context',
                                                                      'name' => 'Server',
                                                                      'val' => '-
      //   note:  - a typical example would be the contact
      //            information for a MyProxy server, such as 
      //            \'myproxy.remote.net:7512\', for a \'myproxy\'
      //            type context.',
                                                                      'type' => 'String',
                                                                      'opt' => '',
                                                                      'note' => ''
                                                                    },
                                                        'RemotePort' => {
                                                                          'unit' => '',
                                                                          'mode' => 'ReadOnly',
                                                                          'desc' => 'the port used for the connection which is identified by this context.',
                                                                          'name' => 'RemotePort',
                                                                          'val' => '-',
                                                                          'type' => 'String',
                                                                          'opt' => '',
                                                                          'note' => ''
                                                                        },
                                                        'RemoteID' => {
                                                                        'unit' => '',
                                                                        'mode' => 'ReadOnly',
                                                                        'desc' => 'user ID for an remote user, who is identified by this context.',
                                                                        'name' => 'RemoteID',
                                                                        'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be
      //            "/O=dutchgrid/O=users/O=vu/OU=cs/CN=Joe Doe".',
                                                                        'type' => 'String',
                                                                        'opt' => '',
                                                                        'note' => ''
                                                                      },
                                                        'LifeTime' => {
                                                                        'unit' => '',
                                                                        'mode' => 'ReadWrite',
                                                                        'desc' => 'time up to which this context is valid',
                                                                        'name' => 'LifeTime',
                                                                        'val' => '-1
      //   note:  - format: time and date specified in number of 
      //            seconds since epoch
      //          - a value of -1 indicates an infinite lifetime.',
                                                                        'type' => 'Int',
                                                                        'opt' => '',
                                                                        'note' => ''
                                                                      },
                                                        'UserProxy' => {
                                                                         'unit' => '',
                                                                         'mode' => 'ReadWrite',
                                                                         'desc' => 'location of an existing certificate proxy to be used',
                                                                         'name' => 'UserProxy',
                                                                         'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be "/tmp/x509up_u<uid>".',
                                                                         'type' => 'String',
                                                                         'opt' => '',
                                                                         'note' => ''
                                                                       },
                                                        'UserID' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadWrite',
                                                                      'desc' => 'user id or user name to use',
                                                                      'name' => 'UserID',
                                                                      'val' => '-
      //   note:  - a typical example for a ftp type context 
      //            would be "anonymous".',
                                                                      'type' => 'String',
                                                                      'opt' => '',
                                                                      'note' => ''
                                                                    },
                                                        'UserVO' => {
                                                                      'unit' => '',
                                                                      'mode' => 'ReadWrite',
                                                                      'desc' => 'the VO the context belongs to',
                                                                      'name' => 'UserVO',
                                                                      'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be "O=dutchgrid".',
                                                                      'type' => 'String',
                                                                      'opt' => '',
                                                                      'note' => ''
                                                                    },
                                                        'UserKey' => {
                                                                       'unit' => '',
                                                                       'mode' => 'ReadWrite',
                                                                       'desc' => 'location of a user key to use',
                                                                       'name' => 'UserKey',
                                                                       'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be "$HOME/.globus/userkey.pem".',
                                                                       'type' => 'String',
                                                                       'opt' => '',
                                                                       'note' => ''
                                                                     },
                                                        'RemoteHost' => {
                                                                          'unit' => '',
                                                                          'mode' => 'ReadOnly',
                                                                          'desc' => 'the hostname where the connection origininates which is identified by this context.',
                                                                          'name' => 'RemoteHost',
                                                                          'val' => '-',
                                                                          'type' => 'String',
                                                                          'opt' => '',
                                                                          'note' => ''
                                                                        },
                                                        'Type' => {
                                                                    'unit' => '',
                                                                    'mode' => 'ReadWrite',
                                                                    'desc' => 'type of context',
                                                                    'name' => 'Type',
                                                                    'val' => 'naming conventions as described above apply',
                                                                    'type' => 'String',
                                                                    'opt' => '',
                                                                    'note' => ''
                                                                  },
                                                        'UserPass' => {
                                                                        'unit' => '',
                                                                        'mode' => 'ReadWrite',
                                                                        'desc' => 'password to use',
                                                                        'name' => 'UserPass',
                                                                        'val' => '-
      //   note:  - a typical example for a ftp type context 
      //            would be "anonymous@localhost".',
                                                                        'type' => 'String',
                                                                        'opt' => '',
                                                                        'note' => ''
                                                                      },
                                                        'UserCert' => {
                                                                        'unit' => '',
                                                                        'mode' => 'ReadWrite',
                                                                        'desc' => 'location of a user certificate to use',
                                                                        'name' => 'UserCert',
                                                                        'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be "$HOME/.globus/usercert.pem".',
                                                                        'type' => 'String',
                                                                        'opt' => '',
                                                                        'note' => ''
                                                                      },
                                                        'CertRepository' => {
                                                                              'unit' => '',
                                                                              'mode' => 'ReadWrite',
                                                                              'desc' => 'location of certificates and CA signatures',
                                                                              'name' => 'CertRepository',
                                                                              'val' => '-
      //   note:  - a typical example for a globus type context 
      //            would be "/etc/grid-security/certificates/".',
                                                                              'type' => 'String',
                                                                              'opt' => '',
                                                                              'note' => ''
                                                                            }
                                                      },
                                             'def' => {
                                                        'DESTRUCTOR' => {
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'obj',
                                                                                          'default' => undef,
                                                                                          'type' => 'context'
                                                                                        }
                                                                                      ],
                                                                          'comm' => '',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'name' => 'DESTRUCTOR',
                                                                          'idx' => 1
                                                                        },
                                                        'CONSTRUCTOR' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'CONSTRUCTOR',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'type',
                                                                                           'default' => '""',
                                                                                           'type' => 'string'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'obj',
                                                                                           'default' => undef,
                                                                                           'type' => 'context'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - CONSTRUCTOR
      Purpose:  create a security context
      Format:   CONSTRUCTOR          (in  stringt type = "",
                                      out context obj);
      Inputs:   type:                 initial type of context
      InOuts:   -
      Outputs:  obj:                  the newly created object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   IncorrectState
                Timeout
                NoSuccess
      Notes:    - 
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 0
                                                                         }
                                                      },
                                             'impl' => [
                                                         'saga::object',
                                                         'saga::attributes'
                                                       ],
                                             'name' => 'context',
                                             'idx' => 0,
                                             'type' => 'class'
                                           }
                            },
          'saga.task' => {
                           'task_container' => {
                                                 'met' => {
                                                            'task_container.state' => {
                                                                                        'unit' => '1',
                                                                                        'mode' => 'ReadOnly',
                                                                                        'desc' => 'fires on state changes of any task in the container, and has the value of that task\'s object id.',
                                                                                        'name' => 'task_container.state',
                                                                                        'val' => '-',
                                                                                        'type' => 'String',
                                                                                        'opt' => '',
                                                                                        'note' => ''
                                                                                      }
                                                          },
                                                 'comm' => '',
                                                 'def' => {
                                                            'remove' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'remove',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 't',
                                                                                          'default' => undef,
                                                                                          'type' => 'task'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - remove
      Purpose:  Remove a task from a task_container.
      Format:   remove               (in  task task);
      Inputs:   task:                 the task to be removed
      InOuts:   -
      Outputs:  -
      PreCond:  - the task is managed by the task container.
      PostCond: - the task is not managed by the task container.
      Perms:    -
      Throws:   NotImplemented
                DoesNotExist
                Timeout
                NoSuccess
      Notes:    - if a task was added more than once, it can be
                  removed only once - see notes to add().
                - if the task is not in the task_container, a 
                  \'DoesNotExist\' exception is thrown.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to remove the 
                  task from the container.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 3
                                                                        },
                                                            'add' => {
                                                                       'comm' => 'task management',
                                                                       'precom' => '    Task Management
    ---------------
',
                                                                       'name' => 'add',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 't',
                                                                                       'default' => undef,
                                                                                       'type' => 'task'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - add
      Purpose:  Add a task to a task_container.
      Format:   add                  (in  task task);
      Inputs:   task:                 task to add to the
                                      task_container
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the task is managed by the task container.
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - a task can be added only once.  Any attempt 
                  to add a task to the container which already 
                  is in the container is silently ignored.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to add the task
                  to the container.
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 2
                                                                     },
                                                            'list_tasks' => {
                                                                              'comm' => '',
                                                                              'precom' => '',
                                                                              'name' => 'list_tasks',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'out',
                                                                                              'name' => 'tasks',
                                                                                              'default' => undef,
                                                                                              'type' => 'array<task>'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - list_tasks
      Purpose:  List the tasks in the task_container.
      Format:   list_tasks           (out array<task>   tasks);
      Inputs:   -
      InOuts:   -
      Outputs:  tasks:                array of all tasks in 
                                      the task_container
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to list the
                  tasks in the container.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 8
                                                                            },
                                                            'get_tasks' => {
                                                                             'comm' => '',
                                                                             'precom' => '',
                                                                             'name' => 'get_tasks',
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'tasks',
                                                                                             'default' => undef,
                                                                                             'type' => 'array<task>'
                                                                                           }
                                                                                         ],
                                                                             'detail' => '    - get_tasks 
      Purpose:  Get the tasks in the task_container.
      Format:   get_tasks            (out array<task>   tasks);
      Inputs:   -
      InOuts:   -
      Outputs:  tasks:                array of tasks in
                                      task_container
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - the returned tasks are NOT removed from the
                  task_container.
                - if the task_container is empty, an
                  empty list is returned.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to list the
                  tasks in the container.
',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'idx' => 10
                                                                           },
                                                            'size' => {
                                                                        'comm' => 'inspection',
                                                                        'precom' => '    Inspection
    ----------
',
                                                                        'name' => 'size',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'out',
                                                                                        'name' => 'n',
                                                                                        'default' => undef,
                                                                                        'type' => 'int'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - size
      Purpose:  return the number of tasks in the task 
                task_container.
      Format:   size                 (out int  n);
      Inputs:   -
      InOuts:   -
      Outputs:  n:                    number of tasks in 
                                      task_container
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to list the
                  tasks in the container.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 7
                                                                      },
                                                            'run' => {
                                                                       'detail' => '    - run
      Purpose:  Start all asynchronous operations in the
                container.
      Format:   run (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - all tasks in the container are in \'New\' state.
      PostCond: - all tasks in the container are in \'Running\'
                  state.
      Perms:    - see permissions on task::run()
      Throws:   NotImplemented
                IncorrectState
                DoesNotExist
                Timeout
                NoSuccess
      Notes:    - run() MUST cause an \'IncorrectState\' exception 
                  if any of the tasks in the container causes 
                  that exception on run().
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to run one or
                  more tasks in the container.
                - if the task_container is empty, an
                  \'DoesNotExist\' exception is thrown.
                - As the order of execution of the tasks is
                  undefined, no assumption on the individual
                  task states can be made after any
                  exception gets thrown.
',
                                                                       'comm' => 'state management',
                                                                       'temp' => '',
                                                                       'precom' => '    State Management
    ----------------
',
                                                                       'is_void' => 1,
                                                                       'name' => 'run',
                                                                       'idx' => 4
                                                                     },
                                                            'get_states' => {
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'out',
                                                                                              'name' => 'states',
                                                                                              'default' => undef,
                                                                                              'type' => 'array<state>'
                                                                                            }
                                                                                          ],
                                                                              'comm' => '',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'name' => 'get_states',
                                                                              'idx' => 11
                                                                            },
                                                            'get_task' => {
                                                                            'comm' => '',
                                                                            'precom' => '',
                                                                            'name' => 'get_task',
                                                                            'params' => [
                                                                                          {
                                                                                            'mode' => 'in',
                                                                                            'name' => 'id',
                                                                                            'default' => undef,
                                                                                            'type' => 'string'
                                                                                          },
                                                                                          {
                                                                                            'mode' => 'out',
                                                                                            'name' => 't',
                                                                                            'default' => undef,
                                                                                            'type' => 'task'
                                                                                          }
                                                                                        ],
                                                                            'detail' => '    - get_task
      Purpose:  Get a single task from the task_container.
      Format:   get_task             (in  string   id,
                                      out task     t);
      Inputs:   id:                   the object id identifying
                                      the task to return
      InOuts:   -
      Outputs:  t:                    the task identified by
                                      id
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                DoesNotExist
                Timeout
                NoSuccess
      Notes:    - the returned task is NOT removed from the
                  task_container.
                - if the id specifies a task which is not in 
                  the container, a \'DoesNotExist\' exception is
                  thrown.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to list the
                  tasks in the container.
',
                                                                            'temp' => '',
                                                                            'is_void' => 0,
                                                                            'idx' => 9
                                                                          },
                                                            'wait' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'wait',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'mode',
                                                                                        'default' => 'All',
                                                                                        'type' => 'wait_mode'
                                                                                      },
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'timeout',
                                                                                        'default' => '-1.0',
                                                                                        'type' => 'float'
                                                                                      },
                                                                                      {
                                                                                        'mode' => 'out',
                                                                                        'name' => 'finished',
                                                                                        'default' => undef,
                                                                                        'type' => 'task'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - wait
      Purpose:  Wait for one or more of the tasks to finish.
      Format:   wait                 (in  wait_mode mode = All,
                                      in  float  timeout = -1.0,
                                      out task   done);
      Inputs:   mode:                 wait for All or Any task
                timeout:              seconds to wait
      InOuts:   -
      Outputs:  done:                 finished task
      PreCond:  -
      PostCond: - if no timeout occurs, All/Any tasks in the 
                  container are in a final state.
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                DoesNotExist
                Timeout
                NoSuccess
      Notes:    - if mode is \'All\', the wait call returns only
                  if all tasks in the container are finished,
                  or on timeout, whichever occurs first.
                  The output task is then any of the finished
                  tasks.
                - if mode is \'Any\', the wait call returns on the
                  first task which would return on task::wait in
                  that timeout period, and returns that task.
                - the default wait mode is \'All\' (0).
                - the returned task is removed from the
                  container, which allows constructs like
                    while ( tc.size () )
                    { 
                       saga::task t = tc.wait (saga::task::Any) ) 
                       ... 
                    }
                - wait() MAY cause an \'IncorrectState\' exception
                  if any of the tasks in the container causes 
                  that exception on wait().
                - if the task_container is empty, an
                  \'DoesNotExist\' exception is thrown.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to wait for one 
                  or more tasks in the container.
                - As the order of execution of the tasks is
                  undefined, no assumption on the individual
                  task states can be made after any
                  exception gets thrown.
                - for timeout semantics, see Section 2.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 6
                                                                      },
                                                            'DESTRUCTOR' => {
                                                                              'comm' => '',
                                                                              'precom' => '',
                                                                              'name' => 'DESTRUCTOR',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'obj',
                                                                                              'default' => undef,
                                                                                              'type' => 'task_container'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - DESTRUCTOR
      Purpose:  destroy a task_container
      Format:   DESTRUCTOR           (in task_container tc);
      Inputs:   tc:                   container to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - tasks in the task_container during its
                  destruction are not affected by its
                  destruction, and, in particular, are not
                  canceled.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 1
                                                                            },
                                                            'cancel' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'cancel',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'timeout',
                                                                                          'default' => '0.0',
                                                                                          'type' => 'float'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - cancel
      Purpose:  Cancel all the asynchronous operations in the
                container.
      Format:   cancel               (in  float  timeout = 0.0);
      Inputs:   timeout:              time for freeing resources
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - if no timeout occurs, all tasks in the 
                  container are in \'Canceled\' state.
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                DoesNotExist
                Timeout
                NoSuccess
      Notes:    - see semantics of task cancel.
                - cancel() MUST cause an \'IncorrectState\' 
                  exception if any of the tasks in the container
                  causes that exception on cancel().
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to run one or
                  more tasks in the container.
                - if the task_container is empty, an
                  \'DoesNotExist\' exception is thrown.
                - As the order of execution of the tasks is
                  undefined, no assumption on the individual
                  task states can be made after any
                  exception gets thrown.
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 5
                                                                        },
                                                            'CONSTRUCTOR' => {
                                                                               'comm' => '',
                                                                               'precom' => '',
                                                                               'name' => 'CONSTRUCTOR',
                                                                               'params' => [
                                                                                             {
                                                                                               'mode' => 'out',
                                                                                               'name' => 'obj',
                                                                                               'default' => undef,
                                                                                               'type' => 'task_container'
                                                                                             }
                                                                                           ],
                                                                               'detail' => '    - CONSTRUCTOR
      Purpose:  create a task_container
      Format:   CONSTRUCTOR          (out task_container tc);
      Inputs:   -
      InOuts:   -
      Outputs:  tc:                   newly created container
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to create a task
                  container.
',
                                                                               'temp' => '',
                                                                               'is_void' => 0,
                                                                               'idx' => 0
                                                                             }
                                                          },
                                                 'impl' => [
                                                             'saga::object',
                                                             'saga::monitorable'
                                                           ],
                                                 'name' => 'task_container',
                                                 'idx' => 4,
                                                 'type' => 'class'
                                               },
                           'async' => {
                                        'comm' => 'this interface is empty on purpose, and is used onlyfor tagging of SAGA classes which implement the SAGAtask model.',
                                        'name' => 'async',
                                        'idx' => 2,
                                        'type' => 'interface'
                                      },
                           'task' => {
                                       'met' => {
                                                  'task.state' => {
                                                                    'unit' => '1',
                                                                    'mode' => 'ReadOnly',
                                                                    'desc' => 'fires on task state change, and has the literal value of the task state enum.',
                                                                    'name' => 'task.state',
                                                                    'val' => '0',
                                                                    'type' => 'Enum',
                                                                    'opt' => '',
                                                                    'note' => ''
                                                                  }
                                                },
                                       'comm' => 'no constructor',
                                       'def' => {
                                                  'rethrow' => {
                                                                 'detail' => '    - rethrow
      Purpose:  re-throw any exception a failed task caught.
      Format:   rethrow (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - that method does nothing unless the task is in
                  \'Failed\' state, and also MUST NOT throw 
                  \'IncorrectState\' if the task is in any other 
                  state.
                - if in \'Failed\' state, the method MUST raise an
                  exception which indicates the reason why that
                  task entered the \'Failed\' state (i.e. it throws 
                  the exception which caused it to enter the 
                  \'Failed\' state.
                - language bindings for languages with no
                  support for exceptions MUST change the state
                  of the object from which the task was created
                  so that a subsequent call to has_error() on
                  that object returns true.  A subsequent call to
                  get_error() must then return the respective
                  exception.
                - rethrow can be called multiple times, always
                  throwing the same exception.
',
                                                                 'comm' => 'error handling',
                                                                 'temp' => '',
                                                                 'precom' => '',
                                                                 'is_void' => 1,
                                                                 'name' => 'rethrow',
                                                                 'idx' => 7
                                                               },
                                                  'run' => {
                                                             'detail' => '    - run
      Purpose:  Start the asynchronous operation.
      Format:   run (void);
      Inputs:   -
      InOuts:   -
      Outputs:  -
      PreCond:  - task is in \'New\' state.
      PostCond: - task left the \'New\' state.
      Perms:    - appropriate permissions for the method 
                  represented by the task
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    - run can only be called on a task in \'New\' 
                  state.  All other states will cause the 
                  \'IncorrectState\' exception to be thrown.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to start the 
                  task.
',
                                                             'comm' => 'state management',
                                                             'temp' => '',
                                                             'precom' => '    State Management
    ----------------
',
                                                             'is_void' => 1,
                                                             'name' => 'run',
                                                             'idx' => 1
                                                           },
                                                  'wait' => {
                                                              'comm' => '',
                                                              'precom' => '',
                                                              'name' => 'wait',
                                                              'params' => [
                                                                            {
                                                                              'mode' => 'in',
                                                                              'name' => 'timeout',
                                                                              'default' => '-1.0',
                                                                              'type' => 'float'
                                                                            },
                                                                            {
                                                                              'mode' => 'out',
                                                                              'name' => 'finished',
                                                                              'default' => undef,
                                                                              'type' => 'boolean'
                                                                            }
                                                                          ],
                                                              'detail' => '    - wait
      Purpose:  Wait for the task to finish.
      Format:   wait                 (in  float   timeout,
                                      out boolean done);
      Inputs:   timeout:              seconds to wait
      InOuts:   -
      Outputs:  done:                 indicating if the task
                                      is done running
      PreCond:  - task is not in \'New\' state.
      PostCond: - if no timeout occurs, task is in a final 
                  state.
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    - wait returns success (true) as soon as the
                  task enters a final state
                - if the task is already in a final state, the
                  call returns success (true) immediately.
                - if the task is in \'New\' state, an
                  \'IncorrectState\' exception is thrown.
                - wait returns no success (false) if the task 
                  is, even after timeout, not in a final state.
                - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to wait for the
                  task.  Note that a \'Timeout\' exception does
                  not indicate that the task is not in a final
                  state after the given wait period - that
                  causes an unsuccessful (false) return value.
                - for timeout semantics, see Section 2.
',
                                                              'temp' => '',
                                                              'is_void' => 0,
                                                              'idx' => 3
                                                            },
                                                  'get_result' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'get_result',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'result',
                                                                                    'default' => undef,
                                                                                    'type' => 'type'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - get_result 
      Purpose:  Get the result of the async operation
      Format:   get_result <type>    (out type result);
      Inputs:   -
      InOuts:   -
      Outputs:  result:               return value of async
                                      method
      PreCond:  - task is not in New, Failed or Canceled state.
      PostCond: - task is in a final state.
      Perms:    -
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                IncorrectType
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - get_result implies a wait() - all notes to
                  wait apply.
                - if the task is in \'Failed\' state after wait(), a
                  rethrow() is called.  That is why all possible
                  exceptions can be thrown by get_result().
                - an IncorrectType exception is thrown when the 
                  \'type\' specifier does not match the return type
                  of the operation represented by the task
                - the method returns the type and value which
                  would be returned by the synchronous version of
                  the respective function call.
',
                                                                    'temp' => '<type>',
                                                                    'is_void' => 0,
                                                                    'idx' => 5
                                                                  },
                                                  'DESTRUCTOR' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'DESTRUCTOR',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'in',
                                                                                    'name' => 'obj',
                                                                                    'default' => undef,
                                                                                    'type' => 'task'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR           (in  task obj)
      Inputs:   obj:                  the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - state is no longer shared with the object
                  the task was created from.
                - the task instance is \'Canceled\' prior to 
                  resource deallocation.
      Perms:    -
      Throws:   -
      Notes:    - if the instance was not in a final state 
                  before, the destructor performs a cancel() 
                  on the instance, and all notes to cancel() 
                  apply.
',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'idx' => 0
                                                                  },
                                                  'cancel' => {
                                                                'comm' => '',
                                                                'precom' => '',
                                                                'name' => 'cancel',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'timeout',
                                                                                'default' => '0.0',
                                                                                'type' => 'float'
                                                                              }
                                                                            ],
                                                                'detail' => '    - cancel
      Purpose:  Cancel the asynchronous operation.
      Format:   cancel               (in  float  timeout = 0.0);
      Inputs:   timeout:              time for freeing resources
      InOuts:   -
      Outputs:  -
      PreCond:  - task is in \'Running\' state.
      PostCond: - task is in \'Canceled\' state.
      Perms:    -
      Throws:   NotImplemented
                IncorrectState
                Timeout
                NoSuccess
      Notes:    - for resource deallocation semantics, see 
                  Section 2.
                - if cancel() fails to cancel the task
                  immediately, and tries to continue to cancel
                  the task in the background, the task state 
                  remains \'Running\' until the cancel operation 
                  succeeded.  The state then changes to 
                  \'Canceled\'.
                - if the task is in a final state, the call has
                  no effect, and, in particular, does NOT change
                  the state from \'Done\' to \'Canceled\', or from 
                  \'Failed\' to \'Canceled\'.  This is to
                  avoid race conditions.
                - if the task is in \'New\' state, an
                  \'IncorrectState\' exception is thrown.
                - a \'NoSuccess\' exception indicates
                  that the backend was not able to initiate the
                  cancellation for the task.
                - for timeout semantics, see Section 2.
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 2
                                                              },
                                                  'get_state' => {
                                                                   'comm' => 'inspection',
                                                                   'precom' => '    Inspection
    ----------
',
                                                                   'name' => 'get_state',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'state',
                                                                                   'default' => undef,
                                                                                   'type' => 'state'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - get_state 
      Purpose:  Get the state of the task.
      Format:   get_state            (out state state);
      Inputs:   -
      InOuts:   -
      Outputs:  state:                state of the task.
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - a \'Timeout\' or \'NoSuccess\' exception indicates
                  that the backend was not able to retrieve the
                  task state.
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 4
                                                                 },
                                                  'get_object' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'get_object',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'object',
                                                                                    'default' => undef,
                                                                                    'type' => 'type'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - get_object
      Purpose:  Get the object from which this task was created
      Format:   get_object <type>    (out type object);
      Inputs:   -
      InOuts:   -
      Outputs:  object:               object this task was
                                      created from
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NotImplemented
                Timeout
                NoSuccess
      Notes:    - the method returns a shallow copy of the
                  object this task was created from.
',
                                                                    'temp' => '<type>',
                                                                    'is_void' => 0,
                                                                    'idx' => 6
                                                                  }
                                                },
                                       'impl' => [
                                                   'saga::object',
                                                   'saga::monitorable'
                                                 ],
                                       'name' => 'task',
                                       'idx' => 3,
                                       'type' => 'class'
                                     },
                           'wait_mode' => {
                                            'comm' => '',
                                            'def' => {
                                                       '1' => {
                                                                'comm' => '',
                                                                'name' => 'Any'
                                                              },
                                                       '0,' => {
                                                                 'comm' => '',
                                                                 'name' => 'All'
                                                               }
                                                     },
                                            'name' => 'wait_mode',
                                            'idx' => 1,
                                            'type' => 'enum'
                                          },
                           'state' => {
                                        'comm' => '',
                                        'def' => {
                                                   '2,' => {
                                                             'comm' => '',
                                                             'name' => 'Running'
                                                           },
                                                   '4,' => {
                                                             'comm' => '',
                                                             'name' => 'Canceled'
                                                           },
                                                   '1,' => {
                                                             'comm' => '',
                                                             'name' => 'New'
                                                           },
                                                   '5' => {
                                                            'comm' => '',
                                                            'name' => 'Failed'
                                                          },
                                                   '3,' => {
                                                             'comm' => '',
                                                             'name' => 'Done'
                                                           }
                                                 },
                                        'name' => 'state',
                                        'idx' => 0,
                                        'type' => 'enum'
                                      }
                         },
          'saga.permissions' => {
                                  'permissions' => {
                                                     'comm' => 'setter / getters',
                                                     'def' => {
                                                                'get_group' => {
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'out',
                                                                                                 'name' => 'group',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'string'
                                                                                               }
                                                                                             ],
                                                                                 'comm' => '',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'name' => 'get_group',
                                                                                 'idx' => 4
                                                                               },
                                                                'permissions_allow' => {
                                                                                         'comm' => '',
                                                                                         'precom' => '    // deep copy:
    -------------
',
                                                                                         'name' => 'permissions_allow',
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'id',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'string'
                                                                                                       },
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'perm',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'int'
                                                                                                       }
                                                                                                     ],
                                                                                         'detail' => '    - permissions_allow
      Purpose:  enable permission flags
      Format:   permissions_allow    (in  string     id,
                                      in  int        perm);
      Inputs:   id:                   id to set permission for
                perm:                 permissions to enable
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the permissions are enabled.
      Perms:    Owner
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - an id \'*\' sets the permissions for all (world)
                - whether an id is interpreted as a group id is up to
                  the implementation.  An implementation MUST
                  specify how user and group id\'s are formed.
                - the \'Owner\' permission can not be set to the
                  id \'*\' (all).
                - if the given id is unknown or not supported, a
                  \'BadParameter\' exception is thrown.
',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'idx' => 0
                                                                                       },
                                                                'permissions_check' => {
                                                                                         'comm' => '',
                                                                                         'precom' => '',
                                                                                         'name' => 'permissions_check',
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'id',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'string'
                                                                                                       },
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'perm',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'int'
                                                                                                       },
                                                                                                       {
                                                                                                         'mode' => 'out',
                                                                                                         'name' => 'value',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'bool'
                                                                                                       }
                                                                                                     ],
                                                                                         'detail' => '    - permissions_check
      Purpose:  check permission flags
      Format:   permissions_check    (in  string     id,
                                      in  int        perm,
                                      out bool       allow);
      Inputs:   id:                   id to check permissions for
                perm:                 permissions to check
      InOuts:   -
      Outputs:  allow:                indicates if, for that id,
                                      the permissions are granted
                                      (true) or not.
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - an id \'*\' gets the permissions for all (world)
                - \'true\' is only returned when all permissions
                  specified in \'perm\' are set for the given id.
                - if the given id is unknown or not supported, a
                  \'BadParameter\' exception is thrown.
',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'idx' => 2
                                                                                       },
                                                                'get_owner' => {
                                                                                 'comm' => '',
                                                                                 'precom' => '',
                                                                                 'name' => 'get_owner',
                                                                                 'params' => [
                                                                                               {
                                                                                                 'mode' => 'out',
                                                                                                 'name' => 'owner',
                                                                                                 'default' => undef,
                                                                                                 'type' => 'string'
                                                                                               }
                                                                                             ],
                                                                                 'detail' => '    - get_owner 
      Purpose:  get the owner of the entity
      Format:   get_owner            (out string     owner);
      Inputs:   -
      InOuts:   -
      Outputs:  owner:                id of the owner
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - returns the id of the owner of the entity
                - an entity, on which the permission interface is
                  available, always has exactly one owner: this 
                  method MUST NOT return an empty string, and 
                  MUST NOT return \'*\' (all), and MUST NOT return 
                  a group id.
',
                                                                                 'temp' => '',
                                                                                 'is_void' => 0,
                                                                                 'idx' => 3
                                                                               },
                                                                'permissions_deny' => {
                                                                                        'comm' => '',
                                                                                        'precom' => '',
                                                                                        'name' => 'permissions_deny',
                                                                                        'params' => [
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'id',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'string'
                                                                                                      },
                                                                                                      {
                                                                                                        'mode' => 'in',
                                                                                                        'name' => 'perm',
                                                                                                        'default' => undef,
                                                                                                        'type' => 'int'
                                                                                                      }
                                                                                                    ],
                                                                                        'detail' => '    - permissions_deny
      Purpose:  disable permission flags
      Format:   permissions_deny     (in  string     id,
                                      in  int        perm);
      Inputs:   id:                   id to set permissions for
                perm:                 permissions to disable
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the permissions are disabled.
      Perms:    Owner
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - an id \'*\' sets the permissions for all (world)
                - whether an id is interpreted as a group id is up to
                  the implementation.  An implementation MUST
                  specify how user and group id\'s are formed.
                - the \'Owner\' permission can not be set to the
                  id \'*\' (all).
                - if the given id is unknown or not supported, a
                  \'BadParameter\' exception is thrown.
',
                                                                                        'temp' => '',
                                                                                        'is_void' => 0,
                                                                                        'idx' => 1
                                                                                      }
                                                              },
                                                     'impl' => [
                                                                 'saga::async'
                                                               ],
                                                     'name' => 'permissions',
                                                     'idx' => 1,
                                                     'type' => 'interface'
                                                   },
                                  'permission' => {
                                                    'comm' => '',
                                                    'def' => {
                                                               '2,' => {
                                                                         'comm' => '',
                                                                         'name' => 'Read'
                                                                       },
                                                               '4,' => {
                                                                         'comm' => '',
                                                                         'name' => 'Write'
                                                                       },
                                                               '16,' => {
                                                                          'comm' => '',
                                                                          'name' => 'Owner'
                                                                        },
                                                               '8,' => {
                                                                         'comm' => '',
                                                                         'name' => 'Exec'
                                                                       },
                                                               '0,' => {
                                                                         'comm' => '',
                                                                         'name' => 'None'
                                                                       },
                                                               '31' => {
                                                                         'comm' => '',
                                                                         'name' => 'All'
                                                                       },
                                                               '1,' => {
                                                                         'comm' => '',
                                                                         'name' => 'Query'
                                                                       }
                                                             },
                                                    'name' => 'permission',
                                                    'idx' => 0,
                                                    'type' => 'enum'
                                                  }
                                },
          'saga.attributes' => {
                                 'attributes' => {
                                                   'comm' => 'setter / getters',
                                                   'def' => {
                                                              'attribute_exists' => {
                                                                                      'comm' => '',
                                                                                      'precom' => '',
                                                                                      'name' => 'attribute_exists',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'in',
                                                                                                      'name' => 'key',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'string'
                                                                                                    },
                                                                                                    {
                                                                                                      'mode' => 'out',
                                                                                                      'name' => 'test',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'bool'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - attribute_exists
      Purpose:  check the attribute\'s existence.
      Format:   attribute_exists     (in  string key,
                                      out bool   test);
      Inputs:   key:                  attribute key
      InOuts:   -
      Outputs:  test:                 bool indicating success
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - This method returns TRUE if the attribute
                  identified by the key exists.
                - exceptions have the same semantics as defined
                  for the get_attribute() method description, 
                  apart from the fact that a DoesNotExist
                  exception is never thrown.
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 7
                                                                                    },
                                                              'find_attributes' => {
                                                                                     'comm' => '',
                                                                                     'precom' => '',
                                                                                     'name' => 'find_attributes',
                                                                                     'params' => [
                                                                                                   {
                                                                                                     'mode' => 'in',
                                                                                                     'name' => 'pattern',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'array<string>'
                                                                                                   },
                                                                                                   {
                                                                                                     'mode' => 'out',
                                                                                                     'name' => 'keys',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'array<string>'
                                                                                                   }
                                                                                                 ],
                                                                                     'detail' => '    - find_attributes
      Purpose:  find matching attributes.
      Format:   find_attributes      (in  array<string>   pattern,
                                      out array<string>   keys);
      Inputs:   pattern:              search patterns
      InOuts:   -
      Outputs:  keys:                 matching attribute keys
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the pattern must be formatted as described 
                  earlier, otherwise a \'BadParameter\' exception 
                  is thrown. 
                - exceptions have the same semantics as defined
                  for the get_attribute() method description.
',
                                                                                     'temp' => '',
                                                                                     'is_void' => 0,
                                                                                     'idx' => 6
                                                                                   },
                                                              'remove_attribute' => {
                                                                                      'comm' => '',
                                                                                      'precom' => '',
                                                                                      'name' => 'remove_attribute',
                                                                                      'params' => [
                                                                                                    {
                                                                                                      'mode' => 'in',
                                                                                                      'name' => 'key',
                                                                                                      'default' => undef,
                                                                                                      'type' => 'string'
                                                                                                    }
                                                                                                  ],
                                                                                      'detail' => '    - remove_attribute
      Purpose:  removes an attribute.
      Format:   remove_attribute     (in string key);
      Inputs:   key:                  attribute to be removed
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the attribute is not available anymore.
      Perms:    Write
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - a vector attribute can also be removed with
                  this method
                - only some SAGA objects allow to remove
                  attributes.
                - a ReadOnly attribute cannot be removed - any
                  attempt to do so throws a \'PermissionDenied\' 
                  exception.
                - if a non-existing attribute is removed, a
                  \'DoesNotExist\' exception is raised.
                - exceptions have the same semantics as defined
                  for the set_attribute() method description.
',
                                                                                      'temp' => '',
                                                                                      'is_void' => 0,
                                                                                      'idx' => 4
                                                                                    },
                                                              'attribute_is_vector' => {
                                                                                         'params' => [
                                                                                                       {
                                                                                                         'mode' => 'in',
                                                                                                         'name' => 'key',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'string'
                                                                                                       },
                                                                                                       {
                                                                                                         'mode' => 'out',
                                                                                                         'name' => 'test',
                                                                                                         'default' => undef,
                                                                                                         'type' => 'bool'
                                                                                                       }
                                                                                                     ],
                                                                                         'comm' => '',
                                                                                         'temp' => '',
                                                                                         'is_void' => 0,
                                                                                         'name' => 'attribute_is_vector',
                                                                                         'idx' => 11
                                                                                       },
                                                              'set_vector_attribute' => {
                                                                                          'comm' => '',
                                                                                          'precom' => '',
                                                                                          'name' => 'set_vector_attribute',
                                                                                          'params' => [
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 'key',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'string'
                                                                                                        },
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 'values',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'array<string>'
                                                                                                        }
                                                                                                      ],
                                                                                          'detail' => '    - set_vector_attribute
      Purpose:  set an attribute to an array of values.
      Format:   set_vector_attribute (in string          key,
                                      in array<string>   values);
      Inputs:   key:                  attribute key
                values:               array of attribute values
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    Write
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the notes to the set_attribute() method apply.
                - if the operation is attempted on a scalar
                  attribute, an \'IncorrectState\' exception is
                  thrown.
',
                                                                                          'temp' => '',
                                                                                          'is_void' => 0,
                                                                                          'idx' => 2
                                                                                        },
                                                              'attribute_is_readonly' => {
                                                                                           'comm' => '',
                                                                                           'precom' => '',
                                                                                           'name' => 'attribute_is_readonly',
                                                                                           'params' => [
                                                                                                         {
                                                                                                           'mode' => 'in',
                                                                                                           'name' => 'key',
                                                                                                           'default' => undef,
                                                                                                           'type' => 'string'
                                                                                                         },
                                                                                                         {
                                                                                                           'mode' => 'out',
                                                                                                           'name' => 'test',
                                                                                                           'default' => undef,
                                                                                                           'type' => 'bool'
                                                                                                         }
                                                                                                       ],
                                                                                           'detail' => '    - attribute_is_readonly
      Purpose:  check the attribute mode.
      Format:   attribute_is_readonly(in  string key,
                                      out bool   test);
      Inputs:   key:                  attribute key
      InOuts:   -
      Outputs:  test:                 bool indicating success
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - This method returns TRUE if the attribute
                  identified by the key exists, and can be read
                  by get_attribute() or get_vector attribute(),
                  but cannot be changed by set_attribute() and
                  set_vector_attribute().
                - exceptions have the same semantics as defined
                  for the get_attribute() method description.
',
                                                                                           'temp' => '',
                                                                                           'is_void' => 0,
                                                                                           'idx' => 8
                                                                                         },
                                                              'list_attributes' => {
                                                                                     'comm' => 'inspection methods',
                                                                                     'precom' => '',
                                                                                     'name' => 'list_attributes',
                                                                                     'params' => [
                                                                                                   {
                                                                                                     'mode' => 'out',
                                                                                                     'name' => 'keys',
                                                                                                     'default' => undef,
                                                                                                     'type' => 'array<string>'
                                                                                                   }
                                                                                                 ],
                                                                                     'detail' => '    - list_attributes
      Purpose:  Get the list of attribute keys.
      Format:   list_attributes      (out array<string>   keys);
      Inputs:   -
      InOuts:   -
      Outputs:  keys:                 existing attribute keys
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - exceptions have the same semantics as defined
                  for the get_attribute() method description.
                - if no attributes are defined for the object, 
                  an empty list is returned.
',
                                                                                     'temp' => '',
                                                                                     'is_void' => 0,
                                                                                     'idx' => 5
                                                                                   },
                                                              'attribute_is_removable' => {
                                                                                            'comm' => '',
                                                                                            'precom' => '',
                                                                                            'name' => 'attribute_is_removable',
                                                                                            'params' => [
                                                                                                          {
                                                                                                            'mode' => 'in',
                                                                                                            'name' => 'key',
                                                                                                            'default' => undef,
                                                                                                            'type' => 'string'
                                                                                                          },
                                                                                                          {
                                                                                                            'mode' => 'out',
                                                                                                            'name' => 'test',
                                                                                                            'default' => undef,
                                                                                                            'type' => 'bool'
                                                                                                          }
                                                                                                        ],
                                                                                            'detail' => '    - attribute_is_removable
      Purpose:  check the attribute mode.
      Format:   attribute_is_removable (in  string key,
                                        out bool   test);
      Inputs:   key:                    attribute key
      InOuts:   -
      Outputs:  test:                   bool indicating success
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - This method returns TRUE if the attribute
                  identified by the key exists, and can be
                  removed by remove_attribute().
                - exceptions have the same semantics as defined
                  for the get_attribute() method description.
',
                                                                                            'temp' => '',
                                                                                            'is_void' => 0,
                                                                                            'idx' => 10
                                                                                          },
                                                              'attribute_is_writable' => {
                                                                                           'comm' => '',
                                                                                           'precom' => '',
                                                                                           'name' => 'attribute_is_writable',
                                                                                           'params' => [
                                                                                                         {
                                                                                                           'mode' => 'in',
                                                                                                           'name' => 'key',
                                                                                                           'default' => undef,
                                                                                                           'type' => 'string'
                                                                                                         },
                                                                                                         {
                                                                                                           'mode' => 'out',
                                                                                                           'name' => 'test',
                                                                                                           'default' => undef,
                                                                                                           'type' => 'bool'
                                                                                                         }
                                                                                                       ],
                                                                                           'detail' => '    - attribute_is_writable
      Purpose:  check the attribute mode.
      Format:   attribute_is_writable(in  string key,
                                      out bool   test);
      Inputs:   key:                  attribute key
      InOuts:   -
      Outputs:  test:                 bool indicating success
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - This method returns TRUE if the attribute
                  identified by the key exists, and can be
                  changed by set_attribute() or
                  set_vector_attribute().
                - exceptions have the same semantics as defined
                  for the get_attribute() method description.
',
                                                                                           'temp' => '',
                                                                                           'is_void' => 0,
                                                                                           'idx' => 9
                                                                                         },
                                                              'set_attribute' => {
                                                                                   'comm' => '',
                                                                                   'precom' => undef,
                                                                                   'name' => 'set_attribute',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'key',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'value',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - set_attribute
      Purpose:  set an attribute to a value
      Format:   set_attribute        (in string key,
                                      in string value);
      Inputs:   key:                  attribute key
                value:                value to set the
                                      attribute to
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    Write
      Throws:   NotImplemented
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - an empty string means to set an empty value
                  (the attribute is not removed).
                - the attribute is created, if it does not exist
                - a \'PermissionDenied\' exception is thrown if the
                  attribute to be changed is ReadOnly.
                - only some SAGA objects allow to create new
                  attributes - others allow only access to
                  predefined attributes.  If a non-existing
                  attribute is queried on such objects, a
                  \'DoesNotExist\' exception is raised
                - changes of attributes may reflect changes of
                  endpoint entity properties.  As such,
                  authorization and/or authentication may fail
                  for settings such attributes, for some
                  backends.  In that case, the respective
                  \'AuthenticationFailed\', \'AuthorizationFailed\',
                  and \'PermissionDenied\' exceptions are thrown.
                  For example, an implementation may forbid to
                  change the saga::stream \'BufSize\' attribute.
                - if an attribute is not well formatted, or
                  outside of some allowed range, a \'BadParameter\'
                  exception with a descriptive error message is
                  thrown.
                - if the operation is attempted on a vector
                  attribute, an \'IncorrectState\' exception is
                  thrown.
                - setting of attributes may time out, or may fail
                  for other reasons - which causes a \'Timeout\' or
                  \'NoSuccess\' exception, respectively.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 0
                                                                                 },
                                                              'get_attribute' => {
                                                                                   'comm' => '',
                                                                                   'precom' => '',
                                                                                   'name' => 'get_attribute',
                                                                                   'params' => [
                                                                                                 {
                                                                                                   'mode' => 'in',
                                                                                                   'name' => 'key',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 },
                                                                                                 {
                                                                                                   'mode' => 'out',
                                                                                                   'name' => 'value',
                                                                                                   'default' => undef,
                                                                                                   'type' => 'string'
                                                                                                 }
                                                                                               ],
                                                                                   'detail' => '    - get_attribute
      Purpose:  get an attribute value
      Format:   get_attribute        (in  string key,
                                      out string value);
      Inputs:   key:                  attribute key
      InOuts:   -
      Outputs:  value:                value of the attribute
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - queries of attributes may imply queries of
                  endpoint entity properties.  As such,
                  authorization and/or authentication may fail
                  for querying such attributes, for some
                  backends.  In that case, the respective
                  \'AuthenticationFailed\', \'AuthorizationFailed\',
                  and \'PermissionDenied\' exceptions are thrown.
                  For example, an implementation may forbid to
                  read the saga::stream \'BufSize\' attribute.
                - reading an attribute value for an attribute
                  which is not in the current set of attributes
                  causes a \'DoesNotExist\' exception.
                - if the operation is attempted on a vector
                  attribute, an \'IncorrectState\' exception is
                  thrown.
                - getting attribute values may time out, or may 
                  fail for other reasons - which causes a 
                  \'Timeout\' or \'NoSuccess\' exception, 
                  respectively.
',
                                                                                   'temp' => '',
                                                                                   'is_void' => 0,
                                                                                   'idx' => 1
                                                                                 },
                                                              'get_vector_attribute' => {
                                                                                          'comm' => '',
                                                                                          'precom' => '',
                                                                                          'name' => 'get_vector_attribute',
                                                                                          'params' => [
                                                                                                        {
                                                                                                          'mode' => 'in',
                                                                                                          'name' => 'key',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'string'
                                                                                                        },
                                                                                                        {
                                                                                                          'mode' => 'out',
                                                                                                          'name' => 'values',
                                                                                                          'default' => undef,
                                                                                                          'type' => 'array<string>'
                                                                                                        }
                                                                                                      ],
                                                                                          'detail' => '    - get_vector_attribute
      Purpose:  get the array of values associated with an
                attribute
      Format:   get_vector_attribute (in string           key,
                                      out array<string>   values);
      Inputs:   key:                  attribute key
      InOuts:   -
      Outputs:  values:               array of values of the
                                      attribute.
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the notes to the get_attribute() method apply.
                - if the operation is attempted on a scalar
                  attribute, an \'IncorrectState\' exception is
                  thrown.
',
                                                                                          'temp' => '',
                                                                                          'is_void' => 0,
                                                                                          'idx' => 3
                                                                                        }
                                                            },
                                                   'name' => 'attributes',
                                                   'idx' => 0,
                                                   'type' => 'interface'
                                                 }
                               },
          'saga.buffer' => {
                             'buffer' => {
                                           'comm' => '',
                                           'def' => {
                                                      'set_data' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'set_data',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'data',
                                                                                      'default' => undef,
                                                                                      'type' => 'array<byte>'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'size',
                                                                                      'default' => undef,
                                                                                      'type' => 'int'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - set_data
      Purpose:  set new buffer data
      Format:   set_data             (in  array<byte> data, 
                                      in  int         size);
      Inputs:   data:                 data to be used in buffer
                size:                 size of given data
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the buffer memory is managed by the
                  application.
      Perms:    -
      Throws:   BadParameter
                IncorrectState
      Notes:    - the method is semantically equivalent to
                  destroying the buffer, and re-creating it with
                  the first CONSTRUCTOR with the given size.
                - the notes for the DESTRUCTOR and the first
                  CONSTRUCTOR apply.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 5
                                                                    },
                                                      'close' => {
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'timeout',
                                                                                   'default' => '-0.0',
                                                                                   'type' => 'float'
                                                                                 }
                                                                               ],
                                                                   'comm' => '',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'name' => 'close',
                                                                   'idx' => 7
                                                                 },
                                                      'DESTRUCTOR' => {
                                                                        'comm' => '',
                                                                        'precom' => '',
                                                                        'name' => 'DESTRUCTOR',
                                                                        'params' => [
                                                                                      {
                                                                                        'mode' => 'in',
                                                                                        'name' => 'obj',
                                                                                        'default' => undef,
                                                                                        'type' => 'buffer'
                                                                                      }
                                                                                    ],
                                                                        'detail' => '    - DESTRUCTOR
      Purpose:  destroy a buffer
      Format:   DESTRUCTOR           (in  buffer obj);
      Inputs:   obj:                  the buffer to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - if the instance was not closed before, the 
                  DESTRUCTOR performs a close() on the instance,
                  and all notes to close() apply.
',
                                                                        'temp' => '',
                                                                        'is_void' => 0,
                                                                        'idx' => 2
                                                                      },
                                                      'get_size' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'get_size',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'size',
                                                                                      'default' => undef,
                                                                                      'type' => 'int'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - get_size
      Purpose:  retrieve the current value for size
      Format:   get_size           (out int   size);
      Inputs:   -
      InOuts:   -
      Outputs:  size               value of size
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   IncorrectState
      Notes:    - if the buffer was created with negative size
                  with the second CONSTRUCTOR, or the size was
                  set to a negative value with set_size(), this
                  method returns \'-1\' if the buffer was not yet
                  used for an I/O operation.  
                - if the buffer was used for a successful I/O
                  operation where data have been read into the
                  buffer, the call returns the size of the 
                  memory which has been allocated by the
                  implementation during that read operation.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 4
                                                                    },
                                                      'CONSTRUCTOR' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'CONSTRUCTOR',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'size',
                                                                                         'default' => '-1',
                                                                                         'type' => 'int'
                                                                                       },
                                                                                       {
                                                                                         'mode' => 'out',
                                                                                         'name' => 'obj',
                                                                                         'default' => undef,
                                                                                         'type' => 'buffer'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - CONSTRUCTOR
      Purpose:  create an I/O buffer
      Format:   CONSTRUCTOR          (in  int         size = -1,
                                      out buffer      obj);
      Inputs:   size:                 size of data buffer
      InOuts:   -
      Outputs:  buffer:               the newly created buffer
      PreCond:  -
      PostCond: - the buffer memory is managed by the
                  implementation.
                - if size > 0, the buffer memory is allocated by
                  the implementation.
      Perms:    -
      Throws:   BadParameter
                NoSuccess
      Notes:    - see notes about memory management.
                - if the implementation cannot handle the 
                  given size, a \'BadParameter\' exception is 
                  thrown.
                - later method descriptions refer to this
                  CONSTRUCTOR as \'second CONSTRUCTOR\'.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 1
                                                                       },
                                                      'get_data' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'get_data',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'data',
                                                                                      'default' => undef,
                                                                                      'type' => 'array<byte>'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - get_data
      Purpose:  retrieve the buffer data
      Format:   get_data             (out array<byte> data);
      Inputs:   -
      InOuts:   -
      Outputs:  data:                 buffer data to retrieve
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   DoesNotExist
                IncorrectState
      Notes:    - see notes about memory management
                - if the buffer was created as implementation
                  managed (size = -1), but no I/O operation has
                  yet been successfully performed on the buffer,
                  a \'DoesNotExist\' exception is thrown.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 6
                                                                    },
                                                      'set_size' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'set_size',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'size',
                                                                                      'default' => '-1',
                                                                                      'type' => 'int'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - set_size
      Purpose:  set size of buffer
      Format:   set_size           (in  int   size = -1);
      Inputs:   size:               value for size
      InOuts:   -
      Outputs:  -
      PreCond:  - 
      PostCond: - the buffer memory is managed by the
                  implementation.
      Perms:    -
      Throws:   BadParameter
                IncorrectState
      Notes:    - the method is semantically equivalent to
                  destroying the buffer, and re-creating it with
                  the second CONSTRUCTOR using the given size.
                - the notes for the DESTRUCTOR and the second
                  CONSTRUCTOR apply.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 3
                                                                    }
                                                    },
                                           'impl' => [
                                                       'saga::object'
                                                     ],
                                           'name' => 'buffer',
                                           'idx' => 0,
                                           'type' => 'class'
                                         }
                           },
          'saga.file' => {
                           'seek_mode' => {
                                            'comm' => '',
                                            'def' => {
                                                       '2,' => {
                                                                 'comm' => '',
                                                                 'name' => 'Current'
                                                               },
                                                       '3' => {
                                                                'comm' => '',
                                                                'name' => 'End'
                                                              },
                                                       '1,' => {
                                                                 'comm' => '',
                                                                 'name' => 'Start'
                                                               }
                                                     },
                                            'name' => 'seek_mode',
                                            'idx' => 1,
                                            'type' => 'enum'
                                          },
                           'flags' => {
                                        'comm' => '',
                                        'def' => {
                                                   '2,' => {
                                                             'comm' => 'same as in namespace::flags ',
                                                             'name' => 'Recursive'
                                                           },
                                                   '32,' => {
                                                              'comm' => 'same as in namespace::flags ',
                                                              'name' => 'Lock'
                                                            },
                                                   '1024,' => {
                                                                'comm' => 'same as in namespace::flags ',
                                                                'name' => 'Write'
                                                              },
                                                   '4,' => {
                                                             'comm' => 'same as in namespace::flags ',
                                                             'name' => 'Dereference'
                                                           },
                                                   '2048' => {
                                                               'comm' => '',
                                                               'name' => 'Binary'
                                                             },
                                                   '0,' => {
                                                             'comm' => 'same as in namespace::flags ',
                                                             'name' => 'None'
                                                           },
                                                   '1536,' => {
                                                                'comm' => 'same as in namespace::flags ',
                                                                'name' => 'ReadWrite'
                                                              },
                                                   '128,' => {
                                                               'comm' => '',
                                                               'name' => 'Truncate'
                                                             },
                                                   '64,' => {
                                                              'comm' => 'same as in namespace::flags ',
                                                              'name' => 'CreateParents'
                                                            },
                                                   '512,' => {
                                                               'comm' => 'same as in namespace::flags ',
                                                               'name' => 'Read'
                                                             },
                                                   '8,' => {
                                                             'comm' => 'same as in namespace::flags ',
                                                             'name' => 'Create'
                                                           },
                                                   '16,' => {
                                                              'comm' => 'same as in namespace::flags',
                                                              'name' => 'Exclusive'
                                                            },
                                                   '1,' => {
                                                             'comm' => 'same as in namespace::flags',
                                                             'name' => 'Overwrite'
                                                           },
                                                   '256,' => {
                                                               'comm' => '',
                                                               'name' => 'Append'
                                                             }
                                                 },
                                        'name' => 'flags',
                                        'idx' => 0,
                                        'type' => 'enum'
                                      },
                           'iovec' => {
                                        'base' => [
                                                    'saga::buffer'
                                                  ],
                                        'comm' => '',
                                        'def' => {
                                                   'set_len_in' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'set_len_in',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'len_in',
                                                                                     'default' => undef,
                                                                                     'type' => 'int'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - set_len_in
      Purpose:  set len_in
      Format:   set_len_in           (in  int   len_in);
      Inputs:   len_in:               value for len_in
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   BadParameter
      Notes:    - if len_in is larger than size, and size is 
                  not set to -1, a \'BadParameter\' exception 
                  is thrown.
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 4
                                                                   },
                                                   'set_offset' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'set_offset',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'offset',
                                                                                     'default' => undef,
                                                                                     'type' => 'int'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - set_offset
      Purpose:  set offset
      Format:   set_offset           (in  int   offset);
      Inputs:   offset:               value for offset
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   BadParameter
      Notes:    - if offset is smaller that zero, a 
                  \'BadParameter\' exception is thrown.
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 2
                                                                   },
                                                   'get_len_in' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'get_len_in',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'out',
                                                                                     'name' => 'len_in',
                                                                                     'default' => undef,
                                                                                     'type' => 'int'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - get_len_in
      Purpose:  retrieve the current value for len_in
      Format:   get_len_in           (out int   len_in);
      Inputs:   -
      InOuts:   -
      Outputs:  len_in:               value of len_in
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   -
      Notes:    -
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 5
                                                                   },
                                                   'get_offset' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'get_offset',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'out',
                                                                                     'name' => 'offset',
                                                                                     'default' => undef,
                                                                                     'type' => 'int'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - get_offset
      Purpose:  retrieve the current value for offset
      Format:   get_offset           (out int   offset);
      Inputs:   -
      InOuts:   -
      Outputs:  offset:               value of offset
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   -
      Notes:    -
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 3
                                                                   },
                                                   'DESTRUCTOR' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'DESTRUCTOR',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'obj',
                                                                                     'default' => undef,
                                                                                     'type' => 'iovec'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - DESTRUCTOR
      Purpose:  destroy an iovec instance
      Format:   DESTRUCTOR           (in  iovec obj);
      Inputs:   obj:                  the iovec to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   - 
      Notes:    - all notes from the buffer DESTRUCTOR apply.
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 1
                                                                   },
                                                   'CONSTRUCTOR' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'CONSTRUCTOR',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'data',
                                                                                      'default' => '""',
                                                                                      'type' => 'array<byte>'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'size',
                                                                                      'default' => '0',
                                                                                      'type' => 'int'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'offset',
                                                                                      'default' => '0',
                                                                                      'type' => 'int'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'len_in',
                                                                                      'default' => 'size',
                                                                                      'type' => 'int'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'obj',
                                                                                      'default' => undef,
                                                                                      'type' => 'iovec'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - CONSTRUCTOR
      Purpose:  create an iovec instance
      Format:   CONSTRUCTOR     (in  array<byte> data   = "",
                                 in  int         size   = -1,
                                 in  int         offset = 0,
                                 in  int         len_in = size,
                                 out iovec       obj);
      Inputs:   type:                 data to be used
                size:                 size of data to be used
                offset                offset for I/O operation
                len_in:               number of bytes to read
                                      or write on read_v/write_v
      InOuts:   -
      Outputs:  buffer:               the newly created iovec 
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   BadParameter
                NoSuccess
      Notes:    - all notes from the buffer CONSTRUCTOR apply.
                - if len_in is larger than size, and size is 
                  not given as -1, a \'BadParameter\' exception 
                  is thrown.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 0
                                                                    },
                                                   'get_len_out' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'get_len_out',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'len_out',
                                                                                      'default' => undef,
                                                                                      'type' => 'int'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - get_len_out
      Purpose:  retrieve the value for len_out
      Format:   get_len_out          (out int   len_out);
      Inputs:   -
      InOuts:   -
      Outputs:  len_out:              value of len_out
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   -
      Notes:    - len_out reports the number of bytes read
                  or written in a completed read_w or write_w
                  operation.
                - before completion of the operation, the
                  returned value is -1.
                - for implementation managed memory, the 
                  value of len_out is always the same as 
                  for size.
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 6
                                                                    }
                                                 },
                                        'name' => 'iovec',
                                        'idx' => 2,
                                        'type' => 'class'
                                      },
                           'file' => {
                                       'base' => [
                                                   'saga::ns_entry,'
                                                 ],
                                       'comm' => '',
                                       'def' => {
                                                  'modes_e' => {
                                                                 'comm' => 'extended I/O',
                                                                 'precom' => '    Extended I/O methods:
    ---------------------
',
                                                                 'name' => 'modes_e',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'emodes',
                                                                                 'default' => undef,
                                                                                 'type' => 'array<string>'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - modes_e
      Purpose:  list the extended modes available in this
                implementation, and/or on server side
      Format:   modes_e            (out array<string> emodes);
      Inputs:   -
      InOuts:   -
      Outputs:  emodes:             list of modes available for
                                    extended I/O
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the method does, in general, not perform a
                  remote operation, but is intended to help
                  the application programmer to determine what
                  extended I/O methods are supported by the
                  implementation.
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 11
                                                               },
                                                  'size_p' => {
                                                                'comm' => 'pattern-based I/O',
                                                                'precom' => '    Pattern-based I/O methods:
    --------------------------
',
                                                                'name' => 'size_p',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'pattern',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'size',
                                                                                'default' => undef,
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'detail' => '    - size_p
      Purpose:  determine the storage size required for a
                pattern I/O operation
      Format:   size_p             (in  string  pattern,
                                    out int     size);
      Inputs:   pattern:            pattern to determine size for
      InOuts:   -
      Outputs:  size:               size required for I/O
                                    operation with that pattern
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the method does, in general, not perform a
                  remote operation, but is intended to help
                  the application programmer to correctly handle 
                  pattern-based I/O and associated buffer sizes.
                - if the pattern cannot be parsed or interpreted,
                  a \'BadParameter\' exception is thrown.
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 8
                                                              },
                                                  'write_e' => {
                                                                 'comm' => '',
                                                                 'precom' => '',
                                                                 'name' => 'write_e',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'emode',
                                                                                 'default' => undef,
                                                                                 'type' => 'string'
                                                                               },
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'spec',
                                                                                 'default' => undef,
                                                                                 'type' => 'string'
                                                                               },
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'buf',
                                                                                 'default' => undef,
                                                                                 'type' => 'buffer'
                                                                               },
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'len_out',
                                                                                 'default' => undef,
                                                                                 'type' => 'int'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - write_e
      Purpose:  extended write
      Format:   write_e            (in    string      emode, 
                                    in    string      spec, 
                                    in    buffer      buf,  
                                    out   int         len_out); 
      Inputs:   emode:              extended mode to use
                spec:               specification of write 
                                    operation
                buf:                buffer to store read data
                                    into
      InOuts:   -
      Outputs:  len_out:            number of bytes successfully
                                    written
      PreCond:  -
      PostCond: - the buffer data are written to the file.
      Perms:    Write
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the emode is not supported, a \'BadParameter\'
                  exception is thrown.
                - if the spec cannot be parsed or interpreted,
                  a \'BadParameter\' exception is thrown.
                - all notes from the write() method apply to the
                  individual writes resulting from the
                  interpretation of the \'emode\' and \'spec\'.
                - an exception MUST be thrown if any of the
                  individual writes detects a condition which
                  would raise an exception for the normal write
                  method.
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 14
                                                               },
                                                  'size_e' => {
                                                                'comm' => '',
                                                                'precom' => '',
                                                                'name' => 'size_e',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'emode',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'spec',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'size',
                                                                                'default' => undef,
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'detail' => '    - size_e
      Purpose:  determine the storage size required for an
                extended I/O operation
      Format:   size_e             (in  string  emode,
                                   (in  string  spec,
                                    out int     size);
      Inputs:   emode:              extended mode to use
                spec:               specification to determine
                                    size for
      InOuts:   -
      Outputs:  size:               size required for I/O
                                    operation with that 
                                    emode/spec
      PreCond:  -
      PostCond: -
      Perms:    - 
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the method does, in general, not perform a
                  remote operation, but is intended to help
                  the application programmer to correctly handle 
                  extended I/O and associated buffer sizes.
                - if the specification cannot be parsed or 
                  interpreted, a \'BadParameter\' exception is 
                  thrown.
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 12
                                                              },
                                                  'write_v' => {
                                                                 'comm' => '',
                                                                 'precom' => '',
                                                                 'name' => 'write_v',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'inout',
                                                                                 'name' => 'iovecs',
                                                                                 'default' => undef,
                                                                                 'type' => 'array<iovec>'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - write_v
      Purpose:  gather/scatter write
      Format:   write_v            (inout  array<iovec> iovecs);
      Inputs:   -
      InOuts:   iovecs:             array of iovec structs
                                    defining start (offset) and
                                    length (len_in) of each
                                    individual write, and
                                    buffers containing the data
                                    to write (len_out)
      Outputs:  -
      PreCond:  -
      PostCond: - the iovec buffer data are written to the file.
      Perms:    Write
      Throws:   NotImplemented
                IncorrectState
                BadParameter
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the behavior of each individual write is as
                  in the normal write method.
                - an exception MUST be thrown if any of the
                  individual writes detects a condition which
                  would raise an exception for the normal write
                  method.
                - the notes about memory management from the
                  buffer class apply.
                - if for any of the given iovecs no len_in is
                  given, then the buffer\'s (size - offset) is 
                  used as len_in.  If that is also not available,
                  a \'BadParameter\' exception is thrown.
                - if for any of the given iovecs, the of 
                  (offset + len_in) is larger than size,  
                  a \'BadParameter\' exception is thrown.
                - if the file was opened ReadOnly, a
                  \'PermissionDenied\' exception is thrown.
                - similar to writev (2) as specified by POSIX
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 7
                                                               },
                                                  'read_v' => {
                                                                'comm' => 'scattered I/O',
                                                                'precom' => '    Scattered I/O methods:
    ----------------------
',
                                                                'name' => 'read_v',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'inout',
                                                                                'name' => 'iovecs',
                                                                                'default' => undef,
                                                                                'type' => 'array<iovec>'
                                                                              }
                                                                            ],
                                                                'detail' => '    - read_v
      Purpose:  gather/scatter read
      Format:   read_v             (inout array<iovec> iovecs);
      Inputs:   -
      InOuts:   iovecs:             array of iovec structs
                                    defining start (offset) and
                                    length (len_in) of each
                                    individual read, the buffer
                                    to read into, and integer 
                                    to store result into
                                    (len_out).
      Outputs:  -
      PreCond:  -
      PostCond: - data from the file are available in the
                  iovec buffers.
      Perms:    Read
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the behavior of each individual read is as
                  in the normal read method, and all notes from
                  the read() method apply.
                - an exception MUST be thrown if any of the
                  individual reads detects a condition which
                  would raise an exception for the normal
                  read() method.
                - the notes about memory management from the
                  buffer class apply.
                - if for any of the given iovecs no len_in is
                  given, then the buffer\'s (size - offset) is 
                  used as len_in.  If that is also not available,
                  a \'BadParameter\' exception is thrown.
                - if for any of the given iovecs, the of 
                  (offset + len_in) is larger than size,  
                  a \'BadParameter\' exception is thrown.
                - if the file was opened WriteOnly, a
                  \'PermissionDenied\' exception is thrown.
                - similar to readv (2) as specified by POSIX
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 6
                                                              },
                                                  'read_p' => {
                                                                'comm' => '',
                                                                'precom' => '',
                                                                'name' => 'read_p',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'pattern',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'inout',
                                                                                'name' => 'buf',
                                                                                'default' => undef,
                                                                                'type' => 'buffer'
                                                                              },
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'len_out',
                                                                                'default' => undef,
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'detail' => '    - read_p
      Purpose:  pattern-based read
      Format:   read_p             (in    string      pattern, 
                                    inout buffer      buf,
                                    out   int         len_out); 
      Inputs:   pattern:            pattern specification for
                                    read operation
      InOuts:   buf:                buffer to store read data
                                    into
      Outputs:  len_out:            number of successfully read
                                    bytes
      PreCond:  -
      PostCond: - data from the file are available in the
                  buffers.
      Perms:    Read
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the pattern cannot be parsed or interpreted,
                  a \'BadParameter\' exception is thrown.
                - all notes for the read() method apply for the
                  individual reads resulting from the
                  interpretation of the pattern.
                - an exception MUST be thrown if any of the
                  individual writes detects a condition which
                  would raise an exception for the normal write
                  method.
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 9
                                                              },
                                                  'write_p' => {
                                                                 'comm' => '',
                                                                 'precom' => '',
                                                                 'name' => 'write_p',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'pattern',
                                                                                 'default' => undef,
                                                                                 'type' => 'string'
                                                                               },
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'buf',
                                                                                 'default' => undef,
                                                                                 'type' => 'buffer'
                                                                               },
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'len_out',
                                                                                 'default' => undef,
                                                                                 'type' => 'int'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - write_p
      Purpose:  pattern-based read
      Format:   write_p            (in    string      pattern, 
                                    in    buffer      buf, 
                                    out   int         len_out); 
      Inputs:   pattern:            pattern specification for
                                    write operation
                buf:                buffer to be written
      InOuts:   -
      Outputs:  len_out:            number of bytes successfully
                                    written
      PreCond:  -
      PostCond: - the buffer data are written to the file.
      Perms:    Write
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the pattern cannot be parsed or interpreted,
                  a \'BadParameter\' exception is thrown.
                - all notes for the write() method apply for the
                  individual writes resulting from the
                  interpretation of the pattern.
                - an exception MUST be thrown if any of the
                  individual writes detects a condition which
                  would raise an exception for the normal write
                  method.
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 10
                                                               },
                                                  'DESTRUCTOR' => {
                                                                    'comm' => '',
                                                                    'precom' => '',
                                                                    'name' => 'DESTRUCTOR',
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'in',
                                                                                    'name' => 'obj',
                                                                                    'default' => undef,
                                                                                    'type' => 'file'
                                                                                  }
                                                                                ],
                                                                    'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR         (in  file      obj)
      Inputs:   obj:                the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the file is closed.
      Perms:    - 
      Throws:   - 
      Notes:    - the semantics of the inherited destructors
                  apply
',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'idx' => 1
                                                                  },
                                                  'read' => {
                                                              'comm' => 'POSIX-like I/O',
                                                              'precom' => '    POSIX-like I/O methods:
    -----------------------
',
                                                              'name' => 'read',
                                                              'params' => [
                                                                            {
                                                                              'mode' => 'inout',
                                                                              'name' => 'buf',
                                                                              'default' => undef,
                                                                              'type' => 'buffer'
                                                                            },
                                                                            {
                                                                              'mode' => 'in',
                                                                              'name' => 'len_in',
                                                                              'default' => '-1',
                                                                              'type' => 'int'
                                                                            },
                                                                            {
                                                                              'mode' => 'out',
                                                                              'name' => 'len_out',
                                                                              'default' => undef,
                                                                              'type' => 'int'
                                                                            }
                                                                          ],
                                                              'detail' => '    - read
      Purpose:  reads up to len_in bytes from the file into
                the buffer.
      Format:   read               (inout buffer      buf,
                                    in    int         len_in = -1,
                                    out   int         len_out);
      Inputs:   len_in:             number of bytes to be read
      InOuts:   buf:                buffer to read data into
      Outputs:  len_out:            number of bytes successfully 
                                    read
      PreCond:  -
      PostCond: - the data from the file are available in the
                  buffer.
      Perms:    Read
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the actual number of bytes read into buffer
                  is returned in len_out.  It is not an error
                  to read less bytes than requested, or in fact
                  zero bytes, e.g. at the end of the file.
                - errors are indicated by returning negative
                  values for len_out, which correspond to
                  negatives of the respective POSIX ERRNO error
                  code.
                - the file pointer is positioned at the end of
                  the byte area successfully read during this 
                  call.
                - the given buffer must be large enough to
                  store up to len_in bytes, or managed by the
                  implementation - otherwise a \'BadParameter\'
                  exception is thrown.
                - the notes about memory management from the
                  buffer class apply.
                - if the file was opened in write-only mode (i.e.
                  no \'Read\' or \'ReadWrite\' flag was given), this
                  method throws an \'PermissionDenied\' exception.
                - if len_in is smaller than 0, or not given, 
                  the buffer size is used for len_in.
                  If that is also not available, a
                  \'BadParameter\' exception is thrown.
                - similar to read (2) as specified by POSIX
',
                                                              'temp' => '',
                                                              'is_void' => 0,
                                                              'idx' => 3
                                                            },
                                                  'read_e' => {
                                                                'comm' => '',
                                                                'precom' => '',
                                                                'name' => 'read_e',
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'emode',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'spec',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              },
                                                                              {
                                                                                'mode' => 'inout',
                                                                                'name' => 'buf',
                                                                                'default' => undef,
                                                                                'type' => 'buffer'
                                                                              },
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'len_out',
                                                                                'default' => undef,
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'detail' => '    - read_e
      Purpose:  extended read
      Format:   read_e             (in    string      emode, 
                                    in    string      spec, 
                                    inout buffer      buf,  
                                    out   int         len_out); 
      Inputs:   emode:              extended mode to use
                spec:               specification of read 
                                    operation
      InOuts:   buf:                buffer to store read data
                                    into
      Outputs:  len_out:            number of successfully read
                                    bytes
      PreCond:  -
      PostCond: - data from the file are available in the
                  buffers.
      Perms:    Read
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if the emode is not supported, a \'BadParameter\'
                  exception is thrown.
                - if the spec cannot be parsed or interpreted,
                  a \'BadParameter\' exception is thrown.
                - all notes from the read() method apply to the
                  individual reads resulting from the
                  interpretation of the emode and spec.
                - an exception MUST be thrown if any of the
                  individual writes detects a condition which
                  would raise an exception for the normal write
                  method.
',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'idx' => 13
                                                              },
                                                  'CONSTRUCTOR' => {
                                                                     'comm' => '',
                                                                     'precom' => '',
                                                                     'name' => 'CONSTRUCTOR',
                                                                     'params' => [
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 's',
                                                                                     'default' => undef,
                                                                                     'type' => 'session'
                                                                                   },
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'name',
                                                                                     'default' => undef,
                                                                                     'type' => 'saga::url'
                                                                                   },
                                                                                   {
                                                                                     'mode' => 'in',
                                                                                     'name' => 'flags',
                                                                                     'default' => 'Read',
                                                                                     'type' => 'int'
                                                                                   },
                                                                                   {
                                                                                     'mode' => 'out',
                                                                                     'name' => 'obj',
                                                                                     'default' => undef,
                                                                                     'type' => 'file'
                                                                                   }
                                                                                 ],
                                                                     'detail' => '    - CONSTRUCTOR
      Purpose:  create the obj
      Format:   CONSTRUCTOR        (in  session   s,
                                    in  saga::url name,
                                    in  int       flags = Read,
                                    out file      obj)
      Inputs:   s:                  session to associate the
                                    object with
                name:               location of file
                flags:              mode for opening
      InOuts:   -
      Outputs:  obj:                the newly created object
      PreCond:  -
      PostCond: - the file is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the file
                  gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes from the directory::open() method
                  apply.
                - the default flags are \'Read\' (512).
',
                                                                     'temp' => '',
                                                                     'is_void' => 0,
                                                                     'idx' => 0
                                                                   },
                                                  'get_size' => {
                                                                  'comm' => 'inspection',
                                                                  'precom' => '    additional inspection methods:
    ------------------------------
',
                                                                  'name' => 'get_size',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'size',
                                                                                  'default' => undef,
                                                                                  'type' => 'int'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - get_size
      Purpose:  returns the number of bytes in the file
      Format:   get_size           (out int     size);
      Inputs:   -
      InOuts:   -
      Outputs:  size:               number of bytes in the file
      PreCond:  -
      PostCond: -
      Perms:    Query
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - similar to the \'st_size\' field from \'stat\' (2)
                  as defined by POSIX
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 2
                                                                },
                                                  'write' => {
                                                               'comm' => '',
                                                               'precom' => '',
                                                               'name' => 'write',
                                                               'params' => [
                                                                             {
                                                                               'mode' => 'in',
                                                                               'name' => 'buf',
                                                                               'default' => undef,
                                                                               'type' => 'buffer'
                                                                             },
                                                                             {
                                                                               'mode' => 'in',
                                                                               'name' => 'len_in',
                                                                               'default' => '-1',
                                                                               'type' => 'int'
                                                                             },
                                                                             {
                                                                               'mode' => 'out',
                                                                               'name' => 'len_out',
                                                                               'default' => undef,
                                                                               'type' => 'int'
                                                                             }
                                                                           ],
                                                               'detail' => '    - write
      Purpose:  writes up to len_in bytes from buffer into
                the file at the current file position.
      Format:   write              (in  buffer      buf,
                                    in  int         len_in = -1,
                                    out int         len_out);
      Inputs:   len_in:             number of bytes to write
                buf:                buffer to write data from
      InOuts:   -
      Outputs:  len_out:            number of bytes successfully
                                    written
      PreCond:  -
      PostCond: - the buffer data are written to the file.
      Perms:    Write
      Throws:   NotImplemented
                BadParameter
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - errors are indicated by returning negative
                  values for len_out, which correspond to
                  negatives of the respective POSIX ERRNO error 
                  code.
                - the file pointer is positioned at the end
                  of the byte area written during this call.
                - if the file was opened in read-only mode (i.e.
                  no \'Write\' or \'ReadWrite\' flag was given), this
                  method throws an \'PermissionDenied\' exception.
                - the given buffer must hold enough data to
                  write - otherwise, only the available data
                  will be written, and and len_out will be set
                  to the number of bytes written.
                - the notes about memory management from the
                  buffer class apply.
                - if len_in is smaller than 0, or not given, 
                  the buffer size is used for len_in.
                  If that is also not available, a
                  \'BadParameter\' exception is thrown.
                - if data are written beyond the current end of
                  file, the intermediate gap is filled with \'\\0\'
                  bytes.
                - similar to write (2) as specified by POSIX
',
                                                               'temp' => '',
                                                               'is_void' => 0,
                                                               'idx' => 4
                                                             },
                                                  'seek' => {
                                                              'comm' => '',
                                                              'precom' => '',
                                                              'name' => 'seek',
                                                              'params' => [
                                                                            {
                                                                              'mode' => 'in',
                                                                              'name' => 'offset',
                                                                              'default' => undef,
                                                                              'type' => 'int'
                                                                            },
                                                                            {
                                                                              'mode' => 'in',
                                                                              'name' => 'whence',
                                                                              'default' => undef,
                                                                              'type' => 'seek_mode'
                                                                            },
                                                                            {
                                                                              'mode' => 'out',
                                                                              'name' => 'position',
                                                                              'default' => undef,
                                                                              'type' => 'int'
                                                                            }
                                                                          ],
                                                              'detail' => '    - seek
      Purpose:  reposition the file pointer
      Format:   seek               (in  int        offset,
                                    in  seek_mode  whence,
                                    out int        position);
      Inputs:   offset:             offset in bytes to move
                                    pointer
                whence:             offset is relative to
                                    \'whence\'
      InOuts:   -
      Outputs:  position:           position of pointer after
                                    seek
      PreCond:  -
      PostCond: - the file pointer is moved to the new position.
                - following read() or write() operations use
                  that position.
      Perms:    Read or Write.
      Throws:   NotImplemented
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - seek repositions the file pointer for
                  subsequent read, write and seek calls.
                - initially (after open), the file pointer is
                  positioned at the beginning of the file,
                  unless the \'Append\' flag was given - then
                  the initial position is the end of the file.
                - the repositioning is done relative to the
                  position given in \'Whence\', so relative to
                  the \'Begin\' or \'End\' of the file, or to the
                  \'Current\' position.
                - errors are indicated by returning negative
                  values for len_out, which correspond to
                  negatives of the respective POSIX ERRNO error 
                  code.
                - the file pointer can be positioned after the
                  end of the file without extending it.  
                - the given offset can be positive, negative, or
                  zero.
                - note that a subsequent read at or behind the end 
                  of file returns no data.
                - similar to lseek (2) as specified by POSIX.
',
                                                              'temp' => '',
                                                              'is_void' => 0,
                                                              'idx' => 5
                                                            }
                                                },
                                       'name' => 'file',
                                       'idx' => 3,
                                       'type' => 'class'
                                     },
                           'directory' => {
                                            'base' => [
                                                        'saga::ns_directory'
                                                      ],
                                            'comm' => '',
                                            'def' => {
                                                       'open' => {
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'name',
                                                                                   'default' => undef,
                                                                                   'type' => 'saga::url'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'flags',
                                                                                   'default' => 'Read',
                                                                                   'type' => 'int'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'file',
                                                                                   'default' => undef,
                                                                                   'type' => 'file'
                                                                                 }
                                                                               ],
                                                                   'comm' => '',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'name' => 'open',
                                                                   'idx' => 5
                                                                 },
                                                       'open_dir' => {
                                                                       'comm' => 'factory-like methods',
                                                                       'precom' => '    Factory-like methods for creating objects:
    ------------------------------------------
',
                                                                       'name' => 'open_dir',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'name',
                                                                                       'default' => undef,
                                                                                       'type' => 'saga::url'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'flags',
                                                                                       'default' => 'Read',
                                                                                       'type' => 'int'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'dir',
                                                                                       'default' => undef,
                                                                                       'type' => 'directory'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - open_dir
      Purpose:  creates a directory object
      Format:   open_dir           (in  saga::url name,
                                    in  int       flags = Read,
                                    out directory dir)
      Inputs:   name:               name of directory to open
                flags:              flags defining operation
                                    modus
      InOuts:   -
      Outputs:  dir:                opened directory instance
      PreCond:  -
      PostCond: - the session of the returned instance is that of
                  the calling instance.
                - \'Owner\' of name is the id of the context
                  used to perform the operation if name gets
                  created.
      Perms:    Exec  for name\'s parent directory.
                Write for name\'s parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - all notes from the ns_directory::open_dir()
                  method apply.
                - default flags are \'Read\' (512).
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 4
                                                                     },
                                                       'DESTRUCTOR' => {
                                                                         'comm' => '',
                                                                         'precom' => '',
                                                                         'name' => 'DESTRUCTOR',
                                                                         'params' => [
                                                                                       {
                                                                                         'mode' => 'in',
                                                                                         'name' => 'obj',
                                                                                         'default' => undef,
                                                                                         'type' => 'directory'
                                                                                       }
                                                                                     ],
                                                                         'detail' => '    - DESTRUCTOR
      Purpose:  destroy the directory object
      Format:   DESTRUCTOR         (in  directory obj)
      Inputs:   obj:                the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the directory is closed.
      Perms:    - 
      Throws:   - 
      Notes:    - the semantics of the inherited destructors
                  apply.
',
                                                                         'temp' => '',
                                                                         'is_void' => 0,
                                                                         'idx' => 1
                                                                       },
                                                       'get_size' => {
                                                                       'comm' => 'inspection methods',
                                                                       'precom' => '    inspection methods:
    -------------------
',
                                                                       'name' => 'get_size',
                                                                       'params' => [
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'name',
                                                                                       'default' => undef,
                                                                                       'type' => 'saga::url'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'in',
                                                                                       'name' => 'flags',
                                                                                       'default' => 'None',
                                                                                       'type' => 'int'
                                                                                     },
                                                                                     {
                                                                                       'mode' => 'out',
                                                                                       'name' => 'size',
                                                                                       'default' => undef,
                                                                                       'type' => 'int'
                                                                                     }
                                                                                   ],
                                                                       'detail' => '    - get_size
      Purpose:  returns the number of bytes in the file
      Format:   get_size           (in  saga::url name,
                                    in  int       flags = None,
                                    out int       size);
      Inputs:   name:               name of file to inspect
                flags:              mode for operation
      InOuts:   -
      Outputs:  size:               number of bytes in the file
      PreCond:  -
      PostCond: - 
      Perms:    Query
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                DoesNotExist
                IncorrectState
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - if \'name\' can be parsed as URL, but contains 
                  an invalid entry name, a \'BadParameter\'
                  exception is thrown.
                - if the entry \'name\' points to does not exist, 
                  a \'DoesNotExist\' exception is thrown.
                - if the \'name\' points to a link and the 
                  \'Dereference\' flag is set, the size is 
                  returned for the link target.  If that target 
                  does not exist, a \'DoesNotExist\' exception is 
                  thrown.
                - implementations MAY report directory sizes by
                  accumulating the content sizes recursively.  
                  If that is not implemented, a \'BadParameter\' 
                  exception with descriptive error message is 
                  thrown.
                - the default flags are \'None\' (0).
                - other flags are not allowed on this method, 
                  and cause a \'BadParameter\' exception.
                - similar to the \'st_size\' field from \'stat\' (2)
                  as defined by POSIX
',
                                                                       'temp' => '',
                                                                       'is_void' => 0,
                                                                       'idx' => 2
                                                                     },
                                                       'CONSTRUCTOR' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'CONSTRUCTOR',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 's',
                                                                                          'default' => undef,
                                                                                          'type' => 'session'
                                                                                        },
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'name',
                                                                                          'default' => undef,
                                                                                          'type' => 'saga::url'
                                                                                        },
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'flags',
                                                                                          'default' => 'Read',
                                                                                          'type' => 'int'
                                                                                        },
                                                                                        {
                                                                                          'mode' => 'out',
                                                                                          'name' => 'obj',
                                                                                          'default' => undef,
                                                                                          'type' => 'directory'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - CONSTRUCTOR
      Purpose:  open the directory
      Format:   CONSTRUCTOR        (in  session    s,
                                    in  saga::url  name,
                                    in  int        flags = Read,
                                    out directory  obj)
      Inputs:   s:                  session to associate the
                                    object with
                name:               location of directory
                flags:              mode for opening
      InOuts:   -
      Outputs:  obj:                the newly created object
      PreCond:  -
      PostCond: - the directory is opened.
                - \'Owner\' of target is the id of the context
                  use to perform the operation, if the
                  directory gets created.
      Perms:    Exec  for parent directory.
                Write for parent directory if Create is set.
                Write for name if Write is set.
                Read  for name if Read  is set.
      Throws:   NotImplemented
                IncorrectURL
                BadParameter
                AlreadyExists
                DoesNotExist
                PermissionDenied
                AuthorizationFailed
                AuthenticationFailed
                Timeout
                NoSuccess
      Notes:    - the default flags are \'Read\' (512).
                - the semantics of the inherited constructors
                  apply
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 0
                                                                        },
                                                       'is_file' => {
                                                                      'comm' => '',
                                                                      'precom' => '',
                                                                      'name' => 'is_file',
                                                                      'params' => [
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'name',
                                                                                      'default' => undef,
                                                                                      'type' => 'saga::url'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'in',
                                                                                      'name' => 'flags',
                                                                                      'default' => 'None',
                                                                                      'type' => 'int'
                                                                                    },
                                                                                    {
                                                                                      'mode' => 'out',
                                                                                      'name' => 'test',
                                                                                      'default' => undef,
                                                                                      'type' => 'boolean'
                                                                                    }
                                                                                  ],
                                                                      'detail' => '    - is_file
      Alias:    for is_entry in saga::ns_directory
',
                                                                      'temp' => '',
                                                                      'is_void' => 0,
                                                                      'idx' => 3
                                                                    }
                                                     },
                                            'name' => 'directory',
                                            'idx' => 4,
                                            'type' => 'class'
                                          }
                         },
          'saga.session' => {
                              'session' => {
                                             'comm' => '',
                                             'def' => {
                                                        'list_contexts' => {
                                                                             'params' => [
                                                                                           {
                                                                                             'mode' => 'out',
                                                                                             'name' => 'contexts',
                                                                                             'default' => undef,
                                                                                             'type' => 'array<context,1>'
                                                                                           }
                                                                                         ],
                                                                             'comm' => '',
                                                                             'temp' => '',
                                                                             'is_void' => 0,
                                                                             'name' => 'list_contexts',
                                                                             'idx' => 4
                                                                           },
                                                        'remove_context' => {
                                                                              'comm' => '',
                                                                              'precom' => '',
                                                                              'name' => 'remove_context',
                                                                              'params' => [
                                                                                            {
                                                                                              'mode' => 'in',
                                                                                              'name' => 'context',
                                                                                              'default' => undef,
                                                                                              'type' => 'context'
                                                                                            }
                                                                                          ],
                                                                              'detail' => '    - remove_context
      Purpose:  detach a security context from a session
      Format:   remove_context       (in context  c);
      Inputs:   c:                    Security context to remove
      InOuts:   -
      Outputs:  -
      Throws:   DoesNotExist
      PreCond:  - a context with completely identical attributes
                  is available in the session.
      PostCond: - that context is removed from the session, and
                  can from now on not be used by any object in
                  that session, even if it was created before
                  remove_context was called.
      Perms:    -
      Notes:    - this methods removes the context on the
                  session which has exactly the same set of
                  parameter values as the parameter context.
                - a \'DoesNotExist\' exception is thrown if no
                  context exist on the session which has the
                  same attributes as the parameter context.
',
                                                                              'temp' => '',
                                                                              'is_void' => 0,
                                                                              'idx' => 3
                                                                            },
                                                        'add_context' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'add_context',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'context',
                                                                                           'default' => undef,
                                                                                           'type' => 'context'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - add_context
      Purpose:  attach a security context to a session
      Format:   add_context          (in context  c);
      Inputs:   c:                    Security context to add
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - the added context is deep copied, and no 
                  state is shared.
                - after the deep copy, the implementation MAY 
                  try to initialize those context attributes
                  which have not been explicitely set, e.g. to
                  sensible default values.  
                - any object within that session can use the
                  context, even if it was created before
                  add_context was called.
      Perms:    -
      Throws:   NoSuccess
                TimeOut
      Notes:    - if the session already has a context attached
                  which has exactly the same set of attribute
                  values as the parameter context, no action is
                  taken.
                - if the implementation is not able to
                  initialize the context, and cannot use the
                  context as-is, a NoSuccess exception is
                  thrown.
                - if the context initialization implies remote
                  operations, and that operations times out, a
                  TimeOut exception is thrown.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 2
                                                                         },
                                                        'DESTRUCTOR' => {
                                                                          'comm' => '',
                                                                          'precom' => '',
                                                                          'name' => 'DESTRUCTOR',
                                                                          'params' => [
                                                                                        {
                                                                                          'mode' => 'in',
                                                                                          'name' => 'obj',
                                                                                          'default' => undef,
                                                                                          'type' => 'session'
                                                                                        }
                                                                                      ],
                                                                          'detail' => '    - DESTRUCTOR
      Purpose:  destroy the object
      Format:   DESTRUCTOR           (in  session obj)
      Inputs:   obj:                  the object to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: - See notes about lifetime management 
                  in Section 2
      Perms:    -
      Throws:   -
      Notes:    -
',
                                                                          'temp' => '',
                                                                          'is_void' => 0,
                                                                          'idx' => 1
                                                                        },
                                                        'CONSTRUCTOR' => {
                                                                           'comm' => '',
                                                                           'precom' => '',
                                                                           'name' => 'CONSTRUCTOR',
                                                                           'params' => [
                                                                                         {
                                                                                           'mode' => 'in',
                                                                                           'name' => 'default',
                                                                                           'default' => 'true',
                                                                                           'type' => 'bool'
                                                                                         },
                                                                                         {
                                                                                           'mode' => 'out',
                                                                                           'name' => 'obj',
                                                                                           'default' => undef,
                                                                                           'type' => 'session'
                                                                                         }
                                                                                       ],
                                                                           'detail' => '    - CONSTRUCTOR
      Purpose:  create the object
      Format:   CONSTRUCTOR          (in  bool    default = true,
                                      out session obj)
      Inputs:   default:              indicates if the default
                                      session is returned
      InOuts:   -
      Outputs:  obj:                  the newly created object
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   NoSuccess
      Notes:    - the created session has no context
                  instances attached.
                - if \'default\' is specified as \'true\', the
                  constructor returns a shallow copy of the
                  default session, with all the default 
                  contexts attached.  The application can then
                  change the properties of the default session,
                  which is continued to be implicetly used on
                  the creation of all saga objects, unless
                  specified otherwise.
',
                                                                           'temp' => '',
                                                                           'is_void' => 0,
                                                                           'idx' => 0
                                                                         }
                                                      },
                                             'impl' => [
                                                         'saga::object'
                                                       ],
                                             'name' => 'session',
                                             'idx' => 0,
                                             'type' => 'class'
                                           }
                            },
          'saga.url' => {
                          'url' => {
                                     'comm' => '',
                                     'def' => {
                                                'set_port' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'port',
                                                                                'default' => '""',
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'set_port',
                                                                'idx' => 9
                                                              },
                                                'get_userinfo' => {
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'userinfo',
                                                                                    'default' => undef,
                                                                                    'type' => 'string'
                                                                                  }
                                                                                ],
                                                                    'comm' => '',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'name' => 'get_userinfo',
                                                                    'idx' => 18
                                                                  },
                                                'set_query' => {
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'query',
                                                                                 'default' => '""',
                                                                                 'type' => 'string'
                                                                               }
                                                                             ],
                                                                 'comm' => '',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'name' => 'set_query',
                                                                 'idx' => 15
                                                               },
                                                'get_path' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'path',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'get_path',
                                                                'idx' => 14
                                                              },
                                                'get_fragment' => {
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'out',
                                                                                    'name' => 'fragment',
                                                                                    'default' => undef,
                                                                                    'type' => 'string'
                                                                                  }
                                                                                ],
                                                                    'comm' => '',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'name' => 'get_fragment',
                                                                    'idx' => 12
                                                                  },
                                                'get_scheme' => {
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'scheme',
                                                                                  'default' => undef,
                                                                                  'type' => 'string'
                                                                                }
                                                                              ],
                                                                  'comm' => '',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'name' => 'get_scheme',
                                                                  'idx' => 6
                                                                },
                                                'get_escaped' => {
                                                                   'comm' => '',
                                                                   'precom' => '',
                                                                   'name' => 'get_escaped',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'url',
                                                                                   'default' => undef,
                                                                                   'type' => 'string'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - get_escaped
      Purpose:  retrieve the url as string with escaped
                characters
      Format:   get_escaped          (out string url);
      Inputs:   -
      InOuts:   -
      Outputs:  url:                  string representing the url
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - the URL may be empty, e.g. after creating the
                  instance with an empty url parameter.
                - as get_string(), but all characters are 
                  escaped where required.
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 4
                                                                 },
                                                'set_path' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'path',
                                                                                'default' => '""',
                                                                                'type' => 'string'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'set_path',
                                                                'idx' => 13
                                                              },
                                                'set_fragment' => {
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'in',
                                                                                    'name' => 'fragment',
                                                                                    'default' => '""',
                                                                                    'type' => 'string'
                                                                                  }
                                                                                ],
                                                                    'comm' => '',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'name' => 'set_fragment',
                                                                    'idx' => 11
                                                                  },
                                                'set_scheme' => {
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'scheme',
                                                                                  'default' => '""',
                                                                                  'type' => 'string'
                                                                                }
                                                                              ],
                                                                  'comm' => '',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'name' => 'set_scheme',
                                                                  'idx' => 5
                                                                },
                                                'get_host' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'host',
                                                                                'default' => undef,
                                                                                'type' => 'string'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'get_host',
                                                                'idx' => 8
                                                              },
                                                'get_port' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'out',
                                                                                'name' => 'port',
                                                                                'default' => undef,
                                                                                'type' => 'int'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'get_port',
                                                                'idx' => 10
                                                              },
                                                'get_query' => {
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'query',
                                                                                 'default' => undef,
                                                                                 'type' => 'string'
                                                                               }
                                                                             ],
                                                                 'comm' => '',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'name' => 'get_query',
                                                                 'idx' => 16
                                                               },
                                                'set_string' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'set_string',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'url',
                                                                                  'default' => '""',
                                                                                  'type' => 'string'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - set_string
      Purpose:  set a new url
      Format:   set_string           (in  string url = "");
      Inputs:   url:                  new url
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   BadParameter
      Notes:    - the method is semantically equivalent to
                  destroying the url, and re-creating it with
                  the given parameter.
                - the notes for the DESTRUCTOR and the 
                  CONSTRUCTOR apply.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 2
                                                                },
                                                'translate' => {
                                                                 'comm' => '',
                                                                 'precom' => '',
                                                                 'name' => 'translate',
                                                                 'params' => [
                                                                               {
                                                                                 'mode' => 'in',
                                                                                 'name' => 'scheme',
                                                                                 'default' => undef,
                                                                                 'type' => 'string'
                                                                               },
                                                                               {
                                                                                 'mode' => 'out',
                                                                                 'name' => 'url',
                                                                                 'default' => undef,
                                                                                 'type' => 'url'
                                                                               }
                                                                             ],
                                                                 'detail' => '    - translate
      Purpose:  translate an URL to a new scheme
      Format:   translate            (in  session s, 
                                      in  string  scheme,
                                      out url     url);
      Inputs:   s:                    session for authorization/
                                      authentication
                scheme:               the new scheme to
                                      translate into
      InOuts:   -
      Outputs:  url:                  string representation of
                                      the translated url
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   BadParameter
                NoSuccess
      Notes:    - the notes from section \'The URL Problem\' apply.
                - if the scheme is not supported,  a
                  \'BadParameter\' exception is thrown.
                - if the scheme is supported, but the url
                  cannot be translated to the scheme, a
                  \'NoSuccess\' exception is thrown.
                - if the url can be translated, but cannot be
                  handled with the new scheme anymore, no
                  exception is thrown.  That can only be
                  detected if the returned string is again used
                  in a URL constructor, or with set_string().
                - the call does not change the URL represented
                  by the class instance itself, but the
                  translation is only reflected by the returned
                  url string.
                - the given session is used for backend
                  communication.
',
                                                                 'temp' => '',
                                                                 'is_void' => 0,
                                                                 'idx' => 20
                                                               },
                                                'get_string' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'get_string',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'out',
                                                                                  'name' => 'url',
                                                                                  'default' => undef,
                                                                                  'type' => 'string'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - get_string
      Purpose:  retrieve the url as string
      Format:   get_string           (out string url);
      Inputs:   -
      InOuts:   -
      Outputs:  url:                  string representing the url
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    - the URL may be empty, e.g. after creating the
                  instance with an empty url parameter.
                - the returned string is unescaped.
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 3
                                                                },
                                                'DESTRUCTOR' => {
                                                                  'comm' => '',
                                                                  'precom' => '',
                                                                  'name' => 'DESTRUCTOR',
                                                                  'params' => [
                                                                                {
                                                                                  'mode' => 'in',
                                                                                  'name' => 'obj',
                                                                                  'default' => undef,
                                                                                  'type' => 'buffer'
                                                                                }
                                                                              ],
                                                                  'detail' => '    - DESTRUCTOR
      Purpose:  destroy a url
      Format:   DESTRUCTOR           (in  url obj);
      Inputs:   obj:                  the url to destroy
      InOuts:   -
      Outputs:  -
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   -
      Notes:    -
',
                                                                  'temp' => '',
                                                                  'is_void' => 0,
                                                                  'idx' => 1
                                                                },
                                                'set_userinfo' => {
                                                                    'params' => [
                                                                                  {
                                                                                    'mode' => 'in',
                                                                                    'name' => 'userinfo',
                                                                                    'default' => '""',
                                                                                    'type' => 'string'
                                                                                  }
                                                                                ],
                                                                    'comm' => '',
                                                                    'temp' => '',
                                                                    'is_void' => 0,
                                                                    'name' => 'set_userinfo',
                                                                    'idx' => 17
                                                                  },
                                                'set_host' => {
                                                                'params' => [
                                                                              {
                                                                                'mode' => 'in',
                                                                                'name' => 'host',
                                                                                'default' => '""',
                                                                                'type' => 'string'
                                                                              }
                                                                            ],
                                                                'comm' => '',
                                                                'temp' => '',
                                                                'is_void' => 0,
                                                                'name' => 'set_host',
                                                                'idx' => 7
                                                              },
                                                'CONSTRUCTOR' => {
                                                                   'comm' => '',
                                                                   'precom' => '',
                                                                   'name' => 'CONSTRUCTOR',
                                                                   'params' => [
                                                                                 {
                                                                                   'mode' => 'in',
                                                                                   'name' => 'url',
                                                                                   'default' => undef,
                                                                                   'type' => 'string'
                                                                                 },
                                                                                 {
                                                                                   'mode' => 'out',
                                                                                   'name' => 'obj',
                                                                                   'default' => undef,
                                                                                   'type' => 'buffer'
                                                                                 }
                                                                               ],
                                                                   'detail' => '    - CONSTRUCTOR
      Purpose:  create a url instance
      Format:   CONSTRUCTOR          (in  string url = "",
                                      out url    obj);
      Inputs:   url:                  initial URL to be used
      InOuts:   -
      Outputs:  url:                  the newly created url
      PreCond:  -
      PostCond: -
      Perms:    -
      Throws:   BadParameter
                NoSuccess
      Notes:    - if the implementation cannot parse the given
                  url, a \'BadParameter\' exception is thrown.
                - if the implementation cannot perform proper
                  escaping on the url, a \'BadParameter\' 
                  exception is thrown.
                - this constructor will never throw an
                  \'IncorrectURL\' exception, as the
                  interpretation of the URL is not part of the
                  functionality of this class.
                - the implementation MAY change the given
                  URL as long as that does not change the
                  resource the URL is pointing to.  For
                  example, an implementation may normalize the
                  path element of the URL.
',
                                                                   'temp' => '',
                                                                   'is_void' => 0,
                                                                   'idx' => 0
                                                                 }
                                              },
                                     'impl' => [
                                                 'saga::object'
                                               ],
                                     'name' => 'url',
                                     'idx' => 0,
                                     'type' => 'class'
                                   }
                        }
        };
